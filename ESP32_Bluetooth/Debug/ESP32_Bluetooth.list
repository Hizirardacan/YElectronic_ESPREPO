
ESP32_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e48  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005150  08005150  0000714c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005158  08005158  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005158  08005158  00006158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800515c  0800515c  0000615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005160  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  0800516c  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  0800520c  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000754  2000014c  080052ac  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008a0  080052ac  000078a0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015a05  00000000  00000000  0000717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bd9  00000000  00000000  0001cb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c8  00000000  00000000  0001f760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d09  00000000  00000000  00020828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002709c  00000000  00000000  00021531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015068  00000000  00000000  000485cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef719  00000000  00000000  0005d635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014cd4e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000046d0  00000000  00000000  0014cd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  00151464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004ff8 	.word	0x08004ff8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08004ff8 	.word	0x08004ff8

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <ESP_SendCmd>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send AT command to ESP32 via UART6
HAL_StatusTypeDef ESP_SendCmd(const char *cmd, uint32_t timeout)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0c6      	sub	sp, #280	@ 0x118
 8000548:	af00      	add	r7, sp, #0
 800054a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800054e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000552:	6018      	str	r0, [r3, #0]
 8000554:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000558:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800055c:	6019      	str	r1, [r3, #0]

	    // 2) Echo the exact command we’re about to send to the PC (so you can see it)
	    HAL_UART_Transmit(&huart3, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 800055e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000562:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000566:	6818      	ldr	r0, [r3, #0]
 8000568:	f7ff fe4e 	bl	8000208 <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000574:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	6809      	ldr	r1, [r1, #0]
 800057e:	4834      	ldr	r0, [pc, #208]	@ (8000650 <ESP_SendCmd+0x10c>)
 8000580:	f003 f950 	bl	8003824 <HAL_UART_Transmit>

	    // 3) Send the AT command over UART6 to the ESP32
	    HAL_UART_Transmit(&huart6, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000584:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000588:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	f7ff fe3b 	bl	8000208 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	b29a      	uxth	r2, r3
 8000596:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800059a:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	6809      	ldr	r1, [r1, #0]
 80005a4:	482b      	ldr	r0, [pc, #172]	@ (8000654 <ESP_SendCmd+0x110>)
 80005a6:	f003 f93d 	bl	8003824 <HAL_UART_Transmit>

	    // 4) Now collect *all* bytes the ESP32 replies with (up to `timeout`) into a buffer
	    uint32_t start = HAL_GetTick();
 80005aa:	f000 fe7d 	bl	80012a8 <HAL_GetTick>
 80005ae:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	    uint8_t  respBuf[256];
	    size_t   rlen = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	    while ((HAL_GetTick() - start) < timeout && rlen < sizeof(respBuf)-1) {
 80005b8:	e01c      	b.n	80005f4 <ESP_SendCmd+0xb0>
	        uint8_t c;
	        // give each byte up to 20 ms to arrive
	        if (HAL_UART_Receive(&huart6, &c, 1, 20) == HAL_OK) {
 80005ba:	f107 010f 	add.w	r1, r7, #15
 80005be:	2314      	movs	r3, #20
 80005c0:	2201      	movs	r2, #1
 80005c2:	4824      	ldr	r0, [pc, #144]	@ (8000654 <ESP_SendCmd+0x110>)
 80005c4:	f003 f9b7 	bl	8003936 <HAL_UART_Receive>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d112      	bne.n	80005f4 <ESP_SendCmd+0xb0>
	            respBuf[rlen++] = c;
 80005ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 80005d8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80005dc:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80005e0:	7811      	ldrb	r1, [r2, #0]
 80005e2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80005e6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80005ea:	54d1      	strb	r1, [r2, r3]
	            start = HAL_GetTick();  // reset our timeout on each new byte
 80005ec:	f000 fe5c 	bl	80012a8 <HAL_GetTick>
 80005f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	    while ((HAL_GetTick() - start) < timeout && rlen < sizeof(respBuf)-1) {
 80005f4:	f000 fe58 	bl	80012a8 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000604:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000608:	6812      	ldr	r2, [r2, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d903      	bls.n	8000616 <ESP_SendCmd+0xd2>
 800060e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000612:	2bfe      	cmp	r3, #254	@ 0xfe
 8000614:	d9d1      	bls.n	80005ba <ESP_SendCmd+0x76>
	        }
	    }
	    respBuf[rlen] = '\0';
 8000616:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800061a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800061e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000622:	4413      	add	r3, r2
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]

	    // 5) Dump the *entire* response back to the PC in one go
	    if (rlen) {
 8000628:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800062c:	2b00      	cmp	r3, #0
 800062e:	d009      	beq.n	8000644 <ESP_SendCmd+0x100>
	        HAL_UART_Transmit(&huart3, respBuf, rlen, HAL_MAX_DELAY);
 8000630:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000634:	b29a      	uxth	r2, r3
 8000636:	f107 0110 	add.w	r1, r7, #16
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	4804      	ldr	r0, [pc, #16]	@ (8000650 <ESP_SendCmd+0x10c>)
 8000640:	f003 f8f0 	bl	8003824 <HAL_UART_Transmit>
	    }
	    return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200002a4 	.word	0x200002a4
 8000654:	2000032c 	.word	0x2000032c

08000658 <ESP_ReadResponse>:

// Function to read response from ESP32
void ESP_ReadResponse(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0c0      	sub	sp, #256	@ 0x100
 800065c:	af00      	add	r7, sp, #0
    uint8_t rx_buf[256] = {0};
 800065e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000662:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000666:	4618      	mov	r0, r3
 8000668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066c:	461a      	mov	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f004 fc96 	bl	8004fa0 <memset>
    HAL_UART_Receive(&huart6, rx_buf, sizeof(rx_buf), 1000);
 8000674:	4639      	mov	r1, r7
 8000676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800067e:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <ESP_ReadResponse+0x50>)
 8000680:	f003 f959 	bl	8003936 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart3, rx_buf, strlen((char *)rx_buf), 1000);
 8000684:	463b      	mov	r3, r7
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fdbe 	bl	8000208 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	4639      	mov	r1, r7
 8000692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <ESP_ReadResponse+0x54>)
 8000698:	f003 f8c4 	bl	8003824 <HAL_UART_Transmit>
}
 800069c:	bf00      	nop
 800069e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000032c 	.word	0x2000032c
 80006ac:	200002a4 	.word	0x200002a4

080006b0 <ESP_BT_StartScan>:
    ESP_ReadResponse();
}

// ESP32 Bluetooth scan başlatma
void ESP_BT_StartScan(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    ESP_SendCmd("AT+BTSCAN=1,5\r\n", 3000);  // 1 = Inquiry scan, 1 = enable
 80006b4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <ESP_BT_StartScan+0x18>)
 80006ba:	f7ff ff43 	bl	8000544 <ESP_SendCmd>
    ESP_ReadResponse(); // tarama sonucu gelen cihazlar burada listelenir
 80006be:	f7ff ffcb 	bl	8000658 <ESP_ReadResponse>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	08005024 	.word	0x08005024

080006cc <ESP32_Bluetooth_Init>:


// Initializes Bluetooth module through ESP32 AT commands
void ESP32_Bluetooth_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

	// 1) Basic AT check
	    ESP_SendCmd("AT\r\n",  500);
 80006d0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006d4:	4822      	ldr	r0, [pc, #136]	@ (8000760 <ESP32_Bluetooth_Init+0x94>)
 80006d6:	f7ff ff35 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 80006da:	f7ff ffbd 	bl	8000658 <ESP_ReadResponse>

	    ESP_SendCmd("AT+GMR\r\n",  5000);
	    ESP_ReadResponse();*/
	    // 2) Init BT stack

    	ESP_SendCmd("AT+BTINIT=1\r\n", 500);
 80006de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006e2:	4820      	ldr	r0, [pc, #128]	@ (8000764 <ESP32_Bluetooth_Init+0x98>)
 80006e4:	f7ff ff2e 	bl	8000544 <ESP_SendCmd>
    	ESP_ReadResponse();
 80006e8:	f7ff ffb6 	bl	8000658 <ESP_ReadResponse>

	    ESP_SendCmd("AT+BTINIT?\r\n", 500);
 80006ec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006f0:	481d      	ldr	r0, [pc, #116]	@ (8000768 <ESP32_Bluetooth_Init+0x9c>)
 80006f2:	f7ff ff27 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 80006f6:	f7ff ffaf 	bl	8000658 <ESP_ReadResponse>

	    //Spp Config
	    ESP_SendCmd("AT+BTSPPINIT?\r\n", 500);
 80006fa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006fe:	481b      	ldr	r0, [pc, #108]	@ (800076c <ESP32_Bluetooth_Init+0xa0>)
 8000700:	f7ff ff20 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 8000704:	f7ff ffa8 	bl	8000658 <ESP_ReadResponse>

	    ESP_SendCmd("AT+BTSPPINIT=1\r\n", 500);
 8000708:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800070c:	4818      	ldr	r0, [pc, #96]	@ (8000770 <ESP32_Bluetooth_Init+0xa4>)
 800070e:	f7ff ff19 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 8000712:	f7ff ffa1 	bl	8000658 <ESP_ReadResponse>

	    // 3) Give it a friendly name
	    ESP_SendCmd("AT+BTNAME=\"ESP32_Bluetooth\"\r\n", 500);
 8000716:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800071a:	4816      	ldr	r0, [pc, #88]	@ (8000774 <ESP32_Bluetooth_Init+0xa8>)
 800071c:	f7ff ff12 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 8000720:	f7ff ff9a 	bl	8000658 <ESP_ReadResponse>

	    // 3) AT+BTSCANMODE: Set Classic Bluetooth Scan Mode
	   	ESP_SendCmd("AT+BTSCANMODE=2\r\n", 500);
 8000724:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000728:	4813      	ldr	r0, [pc, #76]	@ (8000778 <ESP32_Bluetooth_Init+0xac>)
 800072a:	f7ff ff0b 	bl	8000544 <ESP_SendCmd>
	   	ESP_ReadResponse();
 800072e:	f7ff ff93 	bl	8000658 <ESP_ReadResponse>
	   	/*
		ESP_SendCmd("AT+BTSTARTDISC=0,10,5\r\n", 1000);
		ESP_ReadResponse();*/

										// Write your mac ID
	    ESP_SendCmd("AT+BTSPPCONN=0,0,\"00:00:00:00:00:00\"\r\n",3000);
 8000732:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000736:	4811      	ldr	r0, [pc, #68]	@ (800077c <ESP32_Bluetooth_Init+0xb0>)
 8000738:	f7ff ff04 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 800073c:	f7ff ff8c 	bl	8000658 <ESP_ReadResponse>

	    //4) Configure a classic-SPP service (use the standard SPP UUID)
	    //This returns something like: +BTSPPCFG:1


		ESP_SendCmd("AT+BTSPPCONN?\r\n", 2000);
 8000740:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000744:	480e      	ldr	r0, [pc, #56]	@ (8000780 <ESP32_Bluetooth_Init+0xb4>)
 8000746:	f7ff fefd 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 800074a:	f7ff ff85 	bl	8000658 <ESP_ReadResponse>

	    ESP_SendCmd("AT+BTSPPSTART\r\n", 2000);
 800074e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000752:	480c      	ldr	r0, [pc, #48]	@ (8000784 <ESP32_Bluetooth_Init+0xb8>)
 8000754:	f7ff fef6 	bl	8000544 <ESP_SendCmd>
	    ESP_ReadResponse();
 8000758:	f7ff ff7e 	bl	8000658 <ESP_ReadResponse>



	    // Now the module is advertising as “ESP32_Bluetooth”*/

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08005034 	.word	0x08005034
 8000764:	0800503c 	.word	0x0800503c
 8000768:	0800504c 	.word	0x0800504c
 800076c:	0800505c 	.word	0x0800505c
 8000770:	0800506c 	.word	0x0800506c
 8000774:	08005080 	.word	0x08005080
 8000778:	080050a0 	.word	0x080050a0
 800077c:	080050b4 	.word	0x080050b4
 8000780:	080050dc 	.word	0x080050dc
 8000784:	080050ec 	.word	0x080050ec

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 fd3b 	bl	8001206 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f82e 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f000 f9b6 	bl	8000b04 <MX_GPIO_Init>
  MX_ETH_Init();
 8000798:	f000 f898 	bl	80008cc <MX_ETH_Init>
  MX_I2C1_Init();
 800079c:	f000 f8e4 	bl	8000968 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80007a0:	f000 f922 	bl	80009e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a4:	f000 f980 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80007a8:	f000 f94e 	bl	8000a48 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  //ESP_SetBaudRate_115200();

  // Initialize Bluetooth over UART6 (ESP32 AT commands)
  ESP32_Bluetooth_Init();
 80007ac:	f7ff ff8e 	bl	80006cc <ESP32_Bluetooth_Init>

  // Cihazları tara
  ESP_BT_StartScan();
 80007b0:	f7ff ff7e 	bl	80006b0 <ESP_BT_StartScan>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // send 5 bytes over the connected SPP link ID (always 0 for one client)
	  ESP_SendCmd("\nAT+BTSPPSEND=1,5\r\n", 500);
 80007b4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007b8:	480a      	ldr	r0, [pc, #40]	@ (80007e4 <main+0x5c>)
 80007ba:	f7ff fec3 	bl	8000544 <ESP_SendCmd>
	  HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	@ 0x64
 80007c0:	f000 fd7e 	bl	80012c0 <HAL_Delay>
	  HAL_UART_Transmit(&huart6, (uint8_t*)"HELLO", 5, HAL_MAX_DELAY);
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	2205      	movs	r2, #5
 80007ca:	4907      	ldr	r1, [pc, #28]	@ (80007e8 <main+0x60>)
 80007cc:	4807      	ldr	r0, [pc, #28]	@ (80007ec <main+0x64>)
 80007ce:	f003 f829 	bl	8003824 <HAL_UART_Transmit>
	  ESP_ReadResponse();
 80007d2:	f7ff ff41 	bl	8000658 <ESP_ReadResponse>
	     HAL_Delay(1500);
 80007d6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007da:	f000 fd71 	bl	80012c0 <HAL_Delay>
	  ESP_SendCmd("\nAT+BTSPPSEND=1,5\r\n", 500);
 80007de:	bf00      	nop
 80007e0:	e7e8      	b.n	80007b4 <main+0x2c>
 80007e2:	bf00      	nop
 80007e4:	0800511c 	.word	0x0800511c
 80007e8:	08005130 	.word	0x08005130
 80007ec:	2000032c 	.word	0x2000032c

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	@ 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	@ 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fbce 	bl	8004fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000814:	f001 fe9e 	bl	8002554 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <SystemClock_Config+0xd4>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081c:	4a29      	ldr	r2, [pc, #164]	@ (80008c4 <SystemClock_Config+0xd4>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	@ 0x40
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <SystemClock_Config+0xd4>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <SystemClock_Config+0xd8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a24      	ldr	r2, [pc, #144]	@ (80008c8 <SystemClock_Config+0xd8>)
 8000836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <SystemClock_Config+0xd8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000848:	2301      	movs	r3, #1
 800084a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000860:	23d8      	movs	r3, #216	@ 0xd8
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000868:	2309      	movs	r3, #9
 800086a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fecf 	bl	8002614 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800087c:	f000 f9e4 	bl	8000c48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000880:	f001 fe78 	bl	8002574 <HAL_PWREx_EnableOverDrive>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800088a:	f000 f9dd 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	230f      	movs	r3, #15
 8000890:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2302      	movs	r3, #2
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800089e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2107      	movs	r1, #7
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 f955 	bl	8002b5c <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008b8:	f000 f9c6 	bl	8000c48 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	@ 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_ETH_Init+0x84>)
 80008d2:	4a20      	ldr	r2, [pc, #128]	@ (8000954 <MX_ETH_Init+0x88>)
 80008d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008e4:	22e1      	movs	r2, #225	@ 0xe1
 80008e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_ETH_Init+0x84>)
 80008fc:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <MX_ETH_Init+0x8c>)
 80008fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_ETH_Init+0x84>)
 8000902:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000906:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_ETH_Init+0x84>)
 800090a:	4a14      	ldr	r2, [pc, #80]	@ (800095c <MX_ETH_Init+0x90>)
 800090c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_ETH_Init+0x84>)
 8000910:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <MX_ETH_Init+0x94>)
 8000912:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000914:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_ETH_Init+0x84>)
 8000916:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800091a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_ETH_Init+0x84>)
 800091e:	f000 fe97 	bl	8001650 <HAL_ETH_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 f98e 	bl	8000c48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800092c:	2238      	movs	r2, #56	@ 0x38
 800092e:	2100      	movs	r1, #0
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_ETH_Init+0x98>)
 8000932:	f004 fb35 	bl	8004fa0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <MX_ETH_Init+0x98>)
 8000938:	2221      	movs	r2, #33	@ 0x21
 800093a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_ETH_Init+0x98>)
 800093e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000942:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <MX_ETH_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001a0 	.word	0x200001a0
 8000954:	40028000 	.word	0x40028000
 8000958:	20000894 	.word	0x20000894
 800095c:	200000ac 	.word	0x200000ac
 8000960:	2000000c 	.word	0x2000000c
 8000964:	20000168 	.word	0x20000168

08000968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_I2C1_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <MX_I2C1_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <MX_I2C1_Init+0x7c>)
 8000976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000980:	2201      	movs	r2, #1
 8000982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a2:	480e      	ldr	r0, [pc, #56]	@ (80009dc <MX_I2C1_Init+0x74>)
 80009a4:	f001 fb68 	bl	8002078 <HAL_I2C_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ae:	f000 f94b 	bl	8000c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <MX_I2C1_Init+0x74>)
 80009b6:	f001 fbfb 	bl	80021b0 <HAL_I2CEx_ConfigAnalogFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c0:	f000 f942 	bl	8000c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_I2C1_Init+0x74>)
 80009c8:	f001 fc3d 	bl	8002246 <HAL_I2CEx_ConfigDigitalFilter>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 f939 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000250 	.word	0x20000250
 80009e0:	40005400 	.word	0x40005400
 80009e4:	20404768 	.word	0x20404768

080009e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <MX_USART3_UART_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_USART3_UART_Init+0x58>)
 8000a2c:	f002 feac 	bl	8003788 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 f907 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200002a4 	.word	0x200002a4
 8000a44:	40004800 	.word	0x40004800

08000a48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <MX_USART6_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_USART6_UART_Init+0x58>)
 8000a8c:	f002 fe7c 	bl	8003788 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f8d7 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000032c 	.word	0x2000032c
 8000aa4:	40011400 	.word	0x40011400

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	f001 fbf7 	bl	80022de <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f8a7 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200003b4 	.word	0x200003b4

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	@ 0x30
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b47      	ldr	r3, [pc, #284]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a46      	ldr	r2, [pc, #280]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b44      	ldr	r3, [pc, #272]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b41      	ldr	r3, [pc, #260]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a40      	ldr	r2, [pc, #256]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b38      	ldr	r3, [pc, #224]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b35      	ldr	r3, [pc, #212]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a34      	ldr	r2, [pc, #208]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b32      	ldr	r3, [pc, #200]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b92:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a28      	ldr	r2, [pc, #160]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <MX_GPIO_Init+0x134>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bb0:	4822      	ldr	r0, [pc, #136]	@ (8000c3c <MX_GPIO_Init+0x138>)
 8000bb2:	f001 fa47 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	@ 0x40
 8000bba:	4821      	ldr	r0, [pc, #132]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000bbc:	f001 fa42 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481b      	ldr	r0, [pc, #108]	@ (8000c44 <MX_GPIO_Init+0x140>)
 8000bd8:	f001 f888 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bdc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <MX_GPIO_Init+0x138>)
 8000bf6:	f001 f879 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000c12:	f001 f86b 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_GPIO_Init+0x13c>)
 8000c2a:	f001 f85f 	bl	8001cec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	@ 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40021800 	.word	0x40021800
 8000c44:	40020800 	.word	0x40020800

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <Error_Handler+0x8>

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x44>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800

08000c9c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	@ 0x38
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a4e      	ldr	r2, [pc, #312]	@ (8000df4 <HAL_ETH_MspInit+0x158>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	f040 8096 	bne.w	8000dec <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cd4:	623b      	str	r3, [r7, #32]
 8000cd6:	6a3b      	ldr	r3, [r7, #32]
 8000cd8:	4b47      	ldr	r3, [pc, #284]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cdc:	4a46      	ldr	r2, [pc, #280]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce4:	4b44      	ldr	r3, [pc, #272]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	4b41      	ldr	r3, [pc, #260]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf4:	4a40      	ldr	r2, [pc, #256]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d08:	4b3b      	ldr	r3, [pc, #236]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0c:	4a3a      	ldr	r2, [pc, #232]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d14:	4b38      	ldr	r3, [pc, #224]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b35      	ldr	r3, [pc, #212]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	4a34      	ldr	r2, [pc, #208]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2c:	4b32      	ldr	r3, [pc, #200]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b2f      	ldr	r3, [pc, #188]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d44:	4b2c      	ldr	r3, [pc, #176]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d50:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	4a28      	ldr	r2, [pc, #160]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5c:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <HAL_ETH_MspInit+0x15c>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d68:	2332      	movs	r3, #50	@ 0x32
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d78:	230b      	movs	r3, #11
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	481e      	ldr	r0, [pc, #120]	@ (8000dfc <HAL_ETH_MspInit+0x160>)
 8000d84:	f000 ffb2 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d88:	2386      	movs	r3, #134	@ 0x86
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4817      	ldr	r0, [pc, #92]	@ (8000e00 <HAL_ETH_MspInit+0x164>)
 8000da4:	f000 ffa2 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000da8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dba:	230b      	movs	r3, #11
 8000dbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480f      	ldr	r0, [pc, #60]	@ (8000e04 <HAL_ETH_MspInit+0x168>)
 8000dc6:	f000 ff91 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4808      	ldr	r0, [pc, #32]	@ (8000e08 <HAL_ETH_MspInit+0x16c>)
 8000de8:	f000 ff80 	bl	8001cec <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000dec:	bf00      	nop
 8000dee:	3738      	adds	r7, #56	@ 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40028000 	.word	0x40028000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40021800 	.word	0x40021800

08000e0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0aa      	sub	sp, #168	@ 0xa8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2284      	movs	r2, #132	@ 0x84
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 f8b7 	bl	8004fa0 <memset>
  if(hi2c->Instance==I2C1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a22      	ldr	r2, [pc, #136]	@ (8000ec0 <HAL_I2C_MspInit+0xb4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d13c      	bne.n	8000eb6 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 f8ac 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e56:	f7ff fef7 	bl	8000c48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_I2C_MspInit+0xb8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <HAL_I2C_MspInit+0xb8>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <HAL_I2C_MspInit+0xb8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7a:	2312      	movs	r3, #18
 8000e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e96:	4619      	mov	r1, r3
 8000e98:	480b      	ldr	r0, [pc, #44]	@ (8000ec8 <HAL_I2C_MspInit+0xbc>)
 8000e9a:	f000 ff27 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_I2C_MspInit+0xb8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_I2C_MspInit+0xb8>)
 8000ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_I2C_MspInit+0xb8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eb6:	bf00      	nop
 8000eb8:	37a8      	adds	r7, #168	@ 0xa8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020400 	.word	0x40020400

08000ecc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0ac      	sub	sp, #176	@ 0xb0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	2284      	movs	r2, #132	@ 0x84
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 f857 	bl	8004fa0 <memset>
  if(huart->Instance==USART3)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a47      	ldr	r2, [pc, #284]	@ (8001014 <HAL_UART_MspInit+0x148>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d13d      	bne.n	8000f78 <HAL_UART_MspInit+0xac>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f00:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 f84c 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f16:	f7ff fe97 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f26:	4b3c      	ldr	r3, [pc, #240]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f32:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a38      	ldr	r2, [pc, #224]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000f38:	f043 0308 	orr.w	r3, r3, #8
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b36      	ldr	r3, [pc, #216]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f64:	2307      	movs	r3, #7
 8000f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	482a      	ldr	r0, [pc, #168]	@ (800101c <HAL_UART_MspInit+0x150>)
 8000f72:	f000 febb 	bl	8001cec <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f76:	e048      	b.n	800100a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a28      	ldr	r2, [pc, #160]	@ (8001020 <HAL_UART_MspInit+0x154>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d143      	bne.n	800100a <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 f809 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000f9c:	f7ff fe54 	bl	8000c48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000fa6:	f043 0320 	orr.w	r3, r3, #32
 8000faa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb8:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbc:	4a16      	ldr	r2, [pc, #88]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_UART_MspInit+0x14c>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fd0:	23c0      	movs	r3, #192	@ 0xc0
 8000fd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <HAL_UART_MspInit+0x158>)
 8000ff6:	f000 fe79 	bl	8001cec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2047      	movs	r0, #71	@ 0x47
 8001000:	f000 fa5d 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001004:	2047      	movs	r0, #71	@ 0x47
 8001006:	f000 fa76 	bl	80014f6 <HAL_NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	37b0      	adds	r7, #176	@ 0xb0
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004800 	.word	0x40004800
 8001018:	40023800 	.word	0x40023800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40011400 	.word	0x40011400
 8001024:	40020800 	.word	0x40020800

08001028 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0ac      	sub	sp, #176	@ 0xb0
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	2284      	movs	r2, #132	@ 0x84
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f003 ffa9 	bl	8004fa0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001056:	d159      	bne.n	800110c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001058:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800105c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4618      	mov	r0, r3
 800106a:	f001 ff9d 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001074:	f7ff fde8 	bl	8000c48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	4a25      	ldr	r2, [pc, #148]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	@ 0x30
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001090:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010aa:	230a      	movs	r3, #10
 80010ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010b4:	4619      	mov	r1, r3
 80010b6:	4818      	ldr	r0, [pc, #96]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 80010b8:	f000 fe18 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d4:	4619      	mov	r1, r3
 80010d6:	4810      	ldr	r0, [pc, #64]	@ (8001118 <HAL_PCD_MspInit+0xf0>)
 80010d8:	f000 fe08 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 80010de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 80010e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 80010ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 80010f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <HAL_PCD_MspInit+0xec>)
 8001102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800110c:	bf00      	nop
 800110e:	37b0      	adds	r7, #176	@ 0xb0
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <UsageFault_Handler+0x4>

08001144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f000 f885 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <USART6_IRQHandler+0x10>)
 8001182:	f002 fca1 	bl	8003ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000032c 	.word	0x2000032c

08001190 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b8:	f7ff ffea 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f003 fee5 	bl	8004fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e6:	f7ff facf 	bl	8000788 <main>
  bx  lr    
 80011ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011f8:	08005160 	.word	0x08005160
  ldr r2, =_sbss
 80011fc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001200:	200008a0 	.word	0x200008a0

08001204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC_IRQHandler>

08001206 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120a:	2003      	movs	r0, #3
 800120c:	f000 f94c 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001210:	2000      	movs	r0, #0
 8001212:	f000 f805 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001216:	f7ff fd1d 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f967 	bl	8001512 <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f92f 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	@ (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	2000089c 	.word	0x2000089c

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000089c 	.word	0x2000089c

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <__NVIC_SetPriorityGrouping+0x40>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	4313      	orrs	r3, r2
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <__NVIC_SetPriorityGrouping+0x40>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	05fa0000 	.word	0x05fa0000

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	@ (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff3e 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff31 	bl	800136c <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff feb6 	bl	80012a8 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d008      	beq.n	800155c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e052      	b.n	8001602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0216 	bic.w	r2, r2, #22
 800156a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800157a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d103      	bne.n	800158c <HAL_DMA_Abort+0x62>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0208 	bic.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ac:	e013      	b.n	80015d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ae:	f7ff fe7b 	bl	80012a8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d90c      	bls.n	80015d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e015      	b.n	8001602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e4      	bne.n	80015ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e8:	223f      	movs	r2, #63	@ 0x3f
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2280      	movs	r2, #128	@ 0x80
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e00c      	b.n	8001642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2205      	movs	r2, #5
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e086      	b.n	8001770 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001668:	2b00      	cmp	r3, #0
 800166a:	d106      	bne.n	800167a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fb11 	bl	8000c9c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b3f      	ldr	r3, [pc, #252]	@ (8001778 <HAL_ETH_Init+0x128>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <HAL_ETH_Init+0x128>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
 8001686:	4b3c      	ldr	r3, [pc, #240]	@ (8001778 <HAL_ETH_Init+0x128>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001692:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <HAL_ETH_Init+0x12c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a39      	ldr	r2, [pc, #228]	@ (800177c <HAL_ETH_Init+0x12c>)
 8001698:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800169c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_ETH_Init+0x12c>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4935      	ldr	r1, [pc, #212]	@ (800177c <HAL_ETH_Init+0x12c>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016ac:	4b33      	ldr	r3, [pc, #204]	@ (800177c <HAL_ETH_Init+0x12c>)
 80016ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c8:	f7ff fdee 	bl	80012a8 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016ce:	e011      	b.n	80016f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016d0:	f7ff fdea 	bl	80012a8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016de:	d909      	bls.n	80016f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2204      	movs	r2, #4
 80016e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	22e0      	movs	r2, #224	@ 0xe0
 80016ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e03d      	b.n	8001770 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1e4      	bne.n	80016d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f97a 	bl	8001a00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fa25 	bl	8001b5c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fa7b 	bl	8001c0e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	461a      	mov	r2, r3
 800171e:	2100      	movs	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f9e3 	bl	8001aec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001734:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_ETH_Init+0x130>)
 8001744:	430b      	orrs	r3, r1
 8001746:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800175a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2210      	movs	r2, #16
 800176a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	00020060 	.word	0x00020060

08001784 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <ETH_SetMACConfig+0x164>)
 800179a:	4013      	ands	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	7b9b      	ldrb	r3, [r3, #14]
 80017a2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	7c12      	ldrb	r2, [r2, #16]
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d102      	bne.n	80017b2 <ETH_SetMACConfig+0x2e>
 80017ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017b0:	e000      	b.n	80017b4 <ETH_SetMACConfig+0x30>
 80017b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80017b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	7c52      	ldrb	r2, [r2, #17]
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	d102      	bne.n	80017c4 <ETH_SetMACConfig+0x40>
 80017be:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017c2:	e000      	b.n	80017c6 <ETH_SetMACConfig+0x42>
 80017c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	7fdb      	ldrb	r3, [r3, #31]
 80017d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	7f92      	ldrb	r2, [r2, #30]
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d102      	bne.n	80017ea <ETH_SetMACConfig+0x66>
 80017e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e8:	e000      	b.n	80017ec <ETH_SetMACConfig+0x68>
 80017ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80017ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	7f1b      	ldrb	r3, [r3, #28]
 80017f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001802:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	f892 2020 	ldrb.w	r2, [r2, #32]
 800180a:	2a00      	cmp	r2, #0
 800180c:	d102      	bne.n	8001814 <ETH_SetMACConfig+0x90>
 800180e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001812:	e000      	b.n	8001816 <ETH_SetMACConfig+0x92>
 8001814:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001816:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	7bdb      	ldrb	r3, [r3, #15]
 800181c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800181e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001824:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800182c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800182e:	4313      	orrs	r3, r2
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff fd3a 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001872:	2a00      	cmp	r2, #0
 8001874:	d101      	bne.n	800187a <ETH_SetMACConfig+0xf6>
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	e000      	b.n	800187c <ETH_SetMACConfig+0xf8>
 800187a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800187c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001882:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800188a:	2a01      	cmp	r2, #1
 800188c:	d101      	bne.n	8001892 <ETH_SetMACConfig+0x10e>
 800188e:	2208      	movs	r2, #8
 8001890:	e000      	b.n	8001894 <ETH_SetMACConfig+0x110>
 8001892:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001894:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800189c:	2a01      	cmp	r2, #1
 800189e:	d101      	bne.n	80018a4 <ETH_SetMACConfig+0x120>
 80018a0:	2204      	movs	r2, #4
 80018a2:	e000      	b.n	80018a6 <ETH_SetMACConfig+0x122>
 80018a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80018ae:	2a01      	cmp	r2, #1
 80018b0:	d101      	bne.n	80018b6 <ETH_SetMACConfig+0x132>
 80018b2:	2202      	movs	r2, #2
 80018b4:	e000      	b.n	80018b8 <ETH_SetMACConfig+0x134>
 80018b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018b8:	4313      	orrs	r3, r2
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fcf5 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	fd20810f 	.word	0xfd20810f

080018ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <ETH_SetDMAConfig+0x110>)
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	7b1b      	ldrb	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <ETH_SetDMAConfig+0x2c>
 8001912:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001916:	e000      	b.n	800191a <ETH_SetDMAConfig+0x2e>
 8001918:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	7b5b      	ldrb	r3, [r3, #13]
 800191e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001920:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	7f52      	ldrb	r2, [r2, #29]
 8001926:	2a00      	cmp	r2, #0
 8001928:	d102      	bne.n	8001930 <ETH_SetDMAConfig+0x44>
 800192a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800192e:	e000      	b.n	8001932 <ETH_SetDMAConfig+0x46>
 8001930:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001932:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	7b9b      	ldrb	r3, [r3, #14]
 8001938:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800193a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001940:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	7f1b      	ldrb	r3, [r3, #28]
 8001946:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001948:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	7f9b      	ldrb	r3, [r3, #30]
 800194e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001950:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001956:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800195e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001960:	4313      	orrs	r3, r2
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001970:	461a      	mov	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001982:	2001      	movs	r0, #1
 8001984:	f7ff fc9c 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001990:	461a      	mov	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	791b      	ldrb	r3, [r3, #4]
 800199a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80019b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff fc6d 	bl	80012c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	f8de3f23 	.word	0xf8de3f23

08001a00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0a6      	sub	sp, #152	@ 0x98
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a42:	2300      	movs	r3, #0
 8001a44:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fe7f 	bl	8001784 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ab6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001abc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ac0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff05 	bl	80018ec <ETH_SetDMAConfig>
}
 8001ae2:	bf00      	nop
 8001ae4:	3798      	adds	r7, #152	@ 0x98
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3305      	adds	r3, #5
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	3204      	adds	r2, #4
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <ETH_MACAddressConfig+0x68>)
 8001b0e:	4413      	add	r3, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3303      	adds	r3, #3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	061a      	lsls	r2, r3, #24
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3302      	adds	r3, #2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	4313      	orrs	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <ETH_MACAddressConfig+0x6c>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	461a      	mov	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	6013      	str	r3, [r2, #0]
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40028040 	.word	0x40028040
 8001b58:	40028044 	.word	0x40028044

08001b5c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e03e      	b.n	8001be8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	3206      	adds	r2, #6
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d80c      	bhi.n	8001bcc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68d9      	ldr	r1, [r3, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	e004      	b.n	8001bd6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d9bd      	bls.n	8001b6a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c00:	611a      	str	r2, [r3, #16]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	e048      	b.n	8001cae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6919      	ldr	r1, [r3, #16]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001c58:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	3212      	adds	r2, #18
 8001c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d80c      	bhi.n	8001c9e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6919      	ldr	r1, [r3, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	e004      	b.n	8001ca8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3301      	adds	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d9b3      	bls.n	8001c1c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cde:	60da      	str	r2, [r3, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e175      	b.n	8001ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8164 	bne.w	8001ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x56>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80be 	beq.w	8001ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <HAL_GPIO_Init+0x324>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a65      	ldr	r2, [pc, #404]	@ (8002010 <HAL_GPIO_Init+0x324>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b63      	ldr	r3, [pc, #396]	@ (8002010 <HAL_GPIO_Init+0x324>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e8e:	4a61      	ldr	r2, [pc, #388]	@ (8002014 <HAL_GPIO_Init+0x328>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	@ (8002018 <HAL_GPIO_Init+0x32c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d037      	beq.n	8001f2a <HAL_GPIO_Init+0x23e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a57      	ldr	r2, [pc, #348]	@ (800201c <HAL_GPIO_Init+0x330>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0x23a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a56      	ldr	r2, [pc, #344]	@ (8002020 <HAL_GPIO_Init+0x334>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x236>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a55      	ldr	r2, [pc, #340]	@ (8002024 <HAL_GPIO_Init+0x338>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x232>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a54      	ldr	r2, [pc, #336]	@ (8002028 <HAL_GPIO_Init+0x33c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x22e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a53      	ldr	r2, [pc, #332]	@ (800202c <HAL_GPIO_Init+0x340>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x22a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	@ (8002030 <HAL_GPIO_Init+0x344>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	@ (8002034 <HAL_GPIO_Init+0x348>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	@ (8002038 <HAL_GPIO_Init+0x34c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	@ (800203c <HAL_GPIO_Init+0x350>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001f02:	2309      	movs	r3, #9
 8001f04:	e012      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f06:	230a      	movs	r3, #10
 8001f08:	e010      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	e00e      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x240>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f3c:	4935      	ldr	r1, [pc, #212]	@ (8002014 <HAL_GPIO_Init+0x328>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a34      	ldr	r2, [pc, #208]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a29      	ldr	r2, [pc, #164]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <HAL_GPIO_Init+0x354>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae86 	bls.w	8001d0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3724      	adds	r7, #36	@ 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40013800 	.word	0x40013800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40021000 	.word	0x40021000
 800202c:	40021400 	.word	0x40021400
 8002030:	40021800 	.word	0x40021800
 8002034:	40021c00 	.word	0x40021c00
 8002038:	40022000 	.word	0x40022000
 800203c:	40022400 	.word	0x40022400
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e08b      	b.n	80021a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe feb4 	bl	8000e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	@ 0x24
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e006      	b.n	8002100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d108      	bne.n	800211a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	e007      	b.n	800212a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <HAL_I2C_Init+0x134>)
 8002136:	430b      	orrs	r3, r1
 8002138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69d9      	ldr	r1, [r3, #28]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	02008000 	.word	0x02008000

080021b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d138      	bne.n	8002238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e032      	b.n	800223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	@ 0x24
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b20      	cmp	r3, #32
 800225a:	d139      	bne.n	80022d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002266:	2302      	movs	r3, #2
 8002268:	e033      	b.n	80022d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2224      	movs	r2, #36	@ 0x24
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af02      	add	r7, sp, #8
 80022e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e108      	b.n	8002502 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fe8c 	bl	8001028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2203      	movs	r2, #3
 8002314:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800231e:	d102      	bne.n	8002326 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fb9c 	bl	8004a68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7c1a      	ldrb	r2, [r3, #16]
 8002338:	f88d 2000 	strb.w	r2, [sp]
 800233c:	3304      	adds	r3, #4
 800233e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002340:	f002 fb38 	bl	80049b4 <USB_CoreInit>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0d5      	b.n	8002502 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f002 fb94 	bl	8004a8a <USB_SetCurrentMode>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0c6      	b.n	8002502 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e04a      	b.n	8002410 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3315      	adds	r3, #21
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3314      	adds	r3, #20
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	b298      	uxth	r0, r3
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	332e      	adds	r3, #46	@ 0x2e
 80023b6:	4602      	mov	r2, r0
 80023b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3318      	adds	r3, #24
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	331c      	adds	r3, #28
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3320      	adds	r3, #32
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3324      	adds	r3, #36	@ 0x24
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	3301      	adds	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	791b      	ldrb	r3, [r3, #4]
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	429a      	cmp	r2, r3
 8002418:	d3af      	bcc.n	800237a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e044      	b.n	80024aa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	3301      	adds	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	791b      	ldrb	r3, [r3, #4]
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d3b5      	bcc.n	8002420 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7c1a      	ldrb	r2, [r3, #16]
 80024bc:	f88d 2000 	strb.w	r2, [sp]
 80024c0:	3304      	adds	r3, #4
 80024c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c4:	f002 fb2e 	bl	8004b24 <USB_DevInit>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e013      	b.n	8002502 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7b1b      	ldrb	r3, [r3, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d102      	bne.n	80024f6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f80b 	bl	800250c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fce9 	bl	8004ed2 <USB_DevDisconnect>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_PCDEx_ActivateLPM+0x44>)
 800253c:	4313      	orrs	r3, r2
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	10000003 	.word	0x10000003

08002554 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40007000 	.word	0x40007000

08002574 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	4b23      	ldr	r3, [pc, #140]	@ (800260c <HAL_PWREx_EnableOverDrive+0x98>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	4a22      	ldr	r2, [pc, #136]	@ (800260c <HAL_PWREx_EnableOverDrive+0x98>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	@ 0x40
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_PWREx_EnableOverDrive+0x98>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002596:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1d      	ldr	r2, [pc, #116]	@ (8002610 <HAL_PWREx_EnableOverDrive+0x9c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a2:	f7fe fe81 	bl	80012a8 <HAL_GetTick>
 80025a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025a8:	e009      	b.n	80025be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025aa:	f7fe fe7d 	bl	80012a8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025b8:	d901      	bls.n	80025be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e022      	b.n	8002604 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025be:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ca:	d1ee      	bne.n	80025aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002610 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d8:	f7fe fe66 	bl	80012a8 <HAL_GetTick>
 80025dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025de:	e009      	b.n	80025f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025e0:	f7fe fe62 	bl	80012a8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ee:	d901      	bls.n	80025f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e007      	b.n	8002604 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002600:	d1ee      	bne.n	80025e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	40007000 	.word	0x40007000

08002614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e291      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8087 	beq.w	8002746 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	4b96      	ldr	r3, [pc, #600]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00c      	beq.n	800265e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002644:	4b93      	ldr	r3, [pc, #588]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d112      	bne.n	8002676 <HAL_RCC_OscConfig+0x62>
 8002650:	4b90      	ldr	r3, [pc, #576]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b8d      	ldr	r3, [pc, #564]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06c      	beq.n	8002744 <HAL_RCC_OscConfig+0x130>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d168      	bne.n	8002744 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e26b      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x7a>
 8002680:	4b84      	ldr	r3, [pc, #528]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a83      	ldr	r2, [pc, #524]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0xd8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x9c>
 8002696:	4b7f      	ldr	r3, [pc, #508]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7e      	ldr	r2, [pc, #504]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xd8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0xc0>
 80026ba:	4b76      	ldr	r3, [pc, #472]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a75      	ldr	r2, [pc, #468]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b73      	ldr	r3, [pc, #460]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a72      	ldr	r2, [pc, #456]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xd8>
 80026d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fdd8 	bl	80012a8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fdd4 	bl	80012a8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e21f      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b61      	ldr	r3, [pc, #388]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xe8>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fdc4 	bl	80012a8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fdc0 	bl	80012a8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e20b      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x110>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d069      	beq.n	8002826 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	4b50      	ldr	r3, [pc, #320]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b4d      	ldr	r3, [pc, #308]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x190>
 800276a:	4b4a      	ldr	r3, [pc, #296]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b47      	ldr	r3, [pc, #284]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x17a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1df      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	493d      	ldr	r1, [pc, #244]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e040      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d023      	beq.n	80027f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a38      	ldr	r2, [pc, #224]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd76 	bl	80012a8 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7fe fd72 	bl	80012a8 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1bd      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b30      	ldr	r3, [pc, #192]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4929      	ldr	r1, [pc, #164]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
 80027f2:	e018      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a26      	ldr	r2, [pc, #152]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fd52 	bl	80012a8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002808:	f7fe fd4e 	bl	80012a8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e199      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d038      	beq.n	80028a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d019      	beq.n	800286e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b16      	ldr	r3, [pc, #88]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283e:	4a15      	ldr	r2, [pc, #84]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe fd2f 	bl	80012a8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7fe fd2b 	bl	80012a8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e176      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x23a>
 800286c:	e01a      	b.n	80028a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002872:	4a08      	ldr	r2, [pc, #32]	@ (8002894 <HAL_RCC_OscConfig+0x280>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fd15 	bl	80012a8 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe fd11 	bl	80012a8 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d903      	bls.n	8002898 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e15c      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
 8002894:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	4b91      	ldr	r3, [pc, #580]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ee      	bne.n	8002882 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a4 	beq.w	80029fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	4b88      	ldr	r3, [pc, #544]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	4a87      	ldr	r2, [pc, #540]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80028c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ca:	4b85      	ldr	r3, [pc, #532]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028da:	4b82      	ldr	r3, [pc, #520]	@ (8002ae4 <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d118      	bne.n	8002918 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028e6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae4 <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a7e      	ldr	r2, [pc, #504]	@ (8002ae4 <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f2:	f7fe fcd9 	bl	80012a8 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe fcd5 	bl	80012a8 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	@ 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e120      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290c:	4b75      	ldr	r3, [pc, #468]	@ (8002ae4 <HAL_RCC_OscConfig+0x4d0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x31a>
 8002920:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6713      	str	r3, [r2, #112]	@ 0x70
 800292c:	e02d      	b.n	800298a <HAL_RCC_OscConfig+0x376>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x33c>
 8002936:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	4a69      	ldr	r2, [pc, #420]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	@ 0x70
 8002942:	4b67      	ldr	r3, [pc, #412]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	4a66      	ldr	r2, [pc, #408]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	@ 0x70
 800294e:	e01c      	b.n	800298a <HAL_RCC_OscConfig+0x376>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d10c      	bne.n	8002972 <HAL_RCC_OscConfig+0x35e>
 8002958:	4b61      	ldr	r3, [pc, #388]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a60      	ldr	r2, [pc, #384]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
 8002964:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002970:	e00b      	b.n	800298a <HAL_RCC_OscConfig+0x376>
 8002972:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	4a5a      	ldr	r2, [pc, #360]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	@ 0x70
 800297e:	4b58      	ldr	r3, [pc, #352]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a57      	ldr	r2, [pc, #348]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002984:	f023 0304 	bic.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d015      	beq.n	80029be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fc89 	bl	80012a8 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe fc85 	bl	80012a8 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0ce      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ee      	beq.n	800299a <HAL_RCC_OscConfig+0x386>
 80029bc:	e014      	b.n	80029e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe fc73 	bl	80012a8 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fc6f 	bl	80012a8 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e0b8      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029dc:	4b40      	ldr	r3, [pc, #256]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ee      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d105      	bne.n	80029fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ee:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 80029f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80a4 	beq.w	8002b4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a04:	4b36      	ldr	r3, [pc, #216]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d06b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d149      	bne.n	8002aac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a18:	4b31      	ldr	r3, [pc, #196]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a30      	ldr	r2, [pc, #192]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fc40 	bl	80012a8 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe fc3c 	bl	80012a8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e087      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002a72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fc10 	bl	80012a8 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fc0c 	bl	80012a8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e057      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x478>
 8002aaa:	e04f      	b.n	8002b4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fbf6 	bl	80012a8 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fbf2 	bl	80012a8 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e03d      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <HAL_RCC_OscConfig+0x4cc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x4ac>
 8002ade:	e035      	b.n	8002b4c <HAL_RCC_OscConfig+0x538>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <HAL_RCC_OscConfig+0x544>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d028      	beq.n	8002b48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d121      	bne.n	8002b48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d11a      	bne.n	8002b48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d111      	bne.n	8002b48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	3b01      	subs	r3, #1
 8002b32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d0      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b67      	ldr	r3, [pc, #412]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 020f 	bic.w	r2, r3, #15
 8002b8a:	4965      	ldr	r1, [pc, #404]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b63      	ldr	r3, [pc, #396]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b8      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bbc:	4b59      	ldr	r3, [pc, #356]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a58      	ldr	r2, [pc, #352]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd4:	4b53      	ldr	r3, [pc, #332]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	494d      	ldr	r1, [pc, #308]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d040      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d115      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b41      	ldr	r3, [pc, #260]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e073      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4936      	ldr	r1, [pc, #216]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c50:	f7fe fb2a 	bl	80012a8 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fb26 	bl	80012a8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e053      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d210      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 020f 	bic.w	r2, r3, #15
 8002c96:	4922      	ldr	r1, [pc, #136]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e032      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4916      	ldr	r1, [pc, #88]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cda:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	490e      	ldr	r1, [pc, #56]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cee:	f000 f821 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	490a      	ldr	r1, [pc, #40]	@ (8002d28 <HAL_RCC_ClockConfig+0x1cc>)
 8002d00:	5ccb      	ldrb	r3, [r1, r3]
 8002d02:	fa22 f303 	lsr.w	r3, r2, r3
 8002d06:	4a09      	ldr	r2, [pc, #36]	@ (8002d2c <HAL_RCC_ClockConfig+0x1d0>)
 8002d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <HAL_RCC_ClockConfig+0x1d4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fa86 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023c00 	.word	0x40023c00
 8002d24:	40023800 	.word	0x40023800
 8002d28:	08005138 	.word	0x08005138
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000004 	.word	0x20000004

08002d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d38:	b094      	sub	sp, #80	@ 0x50
 8002d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d40:	2300      	movs	r3, #0
 8002d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d44:	2300      	movs	r3, #0
 8002d46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d4c:	4b79      	ldr	r3, [pc, #484]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d00d      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x40>
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	f200 80e1 	bhi.w	8002f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x34>
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d66:	e0db      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b73      	ldr	r3, [pc, #460]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d6c:	e0db      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6e:	4b73      	ldr	r3, [pc, #460]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002d70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d72:	e0d8      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d74:	4b6f      	ldr	r3, [pc, #444]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d063      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	2200      	movs	r2, #0
 8002d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d9e:	2300      	movs	r3, #0
 8002da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002da6:	4622      	mov	r2, r4
 8002da8:	462b      	mov	r3, r5
 8002daa:	f04f 0000 	mov.w	r0, #0
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	0159      	lsls	r1, r3, #5
 8002db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db8:	0150      	lsls	r0, r2, #5
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	1a51      	subs	r1, r2, r1
 8002dc2:	6139      	str	r1, [r7, #16]
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd8:	4659      	mov	r1, fp
 8002dda:	018b      	lsls	r3, r1, #6
 8002ddc:	4651      	mov	r1, sl
 8002dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de2:	4651      	mov	r1, sl
 8002de4:	018a      	lsls	r2, r1, #6
 8002de6:	4651      	mov	r1, sl
 8002de8:	ebb2 0801 	subs.w	r8, r2, r1
 8002dec:	4659      	mov	r1, fp
 8002dee:	eb63 0901 	sbc.w	r9, r3, r1
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e06:	4690      	mov	r8, r2
 8002e08:	4699      	mov	r9, r3
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	eb18 0303 	adds.w	r3, r8, r3
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	462b      	mov	r3, r5
 8002e14:	eb49 0303 	adc.w	r3, r9, r3
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e26:	4629      	mov	r1, r5
 8002e28:	024b      	lsls	r3, r1, #9
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e30:	4621      	mov	r1, r4
 8002e32:	024a      	lsls	r2, r1, #9
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e44:	f7fd f9e8 	bl	8000218 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e50:	e058      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b38      	ldr	r3, [pc, #224]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	0159      	lsls	r1, r3, #5
 8002e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7e:	0150      	lsls	r0, r2, #5
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4641      	mov	r1, r8
 8002e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	00eb      	lsls	r3, r5, #3
 8002eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eba:	00e2      	lsls	r2, r4, #3
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	18e3      	adds	r3, r4, r3
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	eb45 0303 	adc.w	r3, r5, r3
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eda:	4629      	mov	r1, r5
 8002edc:	028b      	lsls	r3, r1, #10
 8002ede:	4621      	mov	r1, r4
 8002ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	028a      	lsls	r2, r1, #10
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	61fa      	str	r2, [r7, #28]
 8002ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef8:	f7fd f98e 	bl	8000218 <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4613      	mov	r3, r2
 8002f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3750      	adds	r7, #80	@ 0x50
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200

08002f40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff0 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	0a9b      	lsrs	r3, r3, #10
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4903      	ldr	r1, [pc, #12]	@ (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	08005148 	.word	0x08005148

08002f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f84:	f7ff ffdc 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0b5b      	lsrs	r3, r3, #13
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	@ (8002fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	08005148 	.word	0x08005148

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fd0:	4b69      	ldr	r3, [pc, #420]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a68      	ldr	r2, [pc, #416]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	4b66      	ldr	r3, [pc, #408]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe4:	4964      	ldr	r1, [pc, #400]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d017      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003002:	4b5d      	ldr	r3, [pc, #372]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003008:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003010:	4959      	ldr	r1, [pc, #356]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003020:	d101      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003022:	2301      	movs	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d017      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800303e:	4b4e      	ldr	r3, [pc, #312]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003044:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	494a      	ldr	r1, [pc, #296]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 808b 	beq.w	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	4b3a      	ldr	r3, [pc, #232]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	4a39      	ldr	r2, [pc, #228]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	@ 0x40
 8003098:	4b37      	ldr	r3, [pc, #220]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030a4:	4b35      	ldr	r3, [pc, #212]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a34      	ldr	r2, [pc, #208]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b0:	f7fe f8fa 	bl	80012a8 <HAL_GetTick>
 80030b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe f8f6 	bl	80012a8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	@ 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e357      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030ca:	4b2c      	ldr	r3, [pc, #176]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030d6:	4b28      	ldr	r3, [pc, #160]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d035      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d02e      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f4:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003102:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003108:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800310a:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310e:	4a1a      	ldr	r2, [pc, #104]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003114:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003116:	4a18      	ldr	r2, [pc, #96]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800311c:	4b16      	ldr	r3, [pc, #88]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d114      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f8be 	bl	80012a8 <HAL_GetTick>
 800312c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe f8ba 	bl	80012a8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e319      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003146:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ee      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800315e:	d111      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800316c:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800316e:	400b      	ands	r3, r1
 8003170:	4901      	ldr	r1, [pc, #4]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
 8003176:	e00b      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	0ffffcff 	.word	0x0ffffcff
 8003184:	4baa      	ldr	r3, [pc, #680]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4aa9      	ldr	r2, [pc, #676]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800318e:	6093      	str	r3, [r2, #8]
 8003190:	4ba7      	ldr	r3, [pc, #668]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003192:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	49a4      	ldr	r1, [pc, #656]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ae:	4ba0      	ldr	r3, [pc, #640]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b4:	4a9e      	ldr	r2, [pc, #632]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031be:	4b9c      	ldr	r3, [pc, #624]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	4999      	ldr	r1, [pc, #612]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031dc:	4b94      	ldr	r3, [pc, #592]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ea:	4991      	ldr	r1, [pc, #580]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031fe:	4b8c      	ldr	r3, [pc, #560]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003204:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800320c:	4988      	ldr	r1, [pc, #544]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003220:	4b83      	ldr	r3, [pc, #524]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003226:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322e:	4980      	ldr	r1, [pc, #512]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003242:	4b7b      	ldr	r3, [pc, #492]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003248:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003250:	4977      	ldr	r1, [pc, #476]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003264:	4b72      	ldr	r3, [pc, #456]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	496f      	ldr	r1, [pc, #444]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003286:	4b6a      	ldr	r3, [pc, #424]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328c:	f023 020c 	bic.w	r2, r3, #12
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003294:	4966      	ldr	r1, [pc, #408]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a8:	4b61      	ldr	r3, [pc, #388]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	495e      	ldr	r1, [pc, #376]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032ca:	4b59      	ldr	r3, [pc, #356]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d8:	4955      	ldr	r1, [pc, #340]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032ec:	4b50      	ldr	r3, [pc, #320]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	494d      	ldr	r1, [pc, #308]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800330e:	4b48      	ldr	r3, [pc, #288]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	4944      	ldr	r1, [pc, #272]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003330:	4b3f      	ldr	r3, [pc, #252]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003336:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333e:	493c      	ldr	r1, [pc, #240]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003352:	4b37      	ldr	r3, [pc, #220]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003360:	4933      	ldr	r1, [pc, #204]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003374:	4b2e      	ldr	r3, [pc, #184]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003382:	492b      	ldr	r1, [pc, #172]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d011      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003396:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a4:	4922      	ldr	r1, [pc, #136]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033d6:	4b16      	ldr	r3, [pc, #88]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e4:	4912      	ldr	r1, [pc, #72]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003408:	4909      	ldr	r1, [pc, #36]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d006      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80d9 	beq.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003424:	4b02      	ldr	r3, [pc, #8]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a01      	ldr	r2, [pc, #4]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800342e:	e001      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003430:	40023800 	.word	0x40023800
 8003434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003436:	f7fd ff37 	bl	80012a8 <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800343e:	f7fd ff33 	bl	80012a8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	@ 0x64
 800344a:	d901      	bls.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e194      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003450:	4b6c      	ldr	r3, [pc, #432]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d021      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11d      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003470:	4b64      	ldr	r3, [pc, #400]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800347e:	4b61      	ldr	r3, [pc, #388]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003484:	0e1b      	lsrs	r3, r3, #24
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	019a      	lsls	r2, r3, #6
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	071b      	lsls	r3, r3, #28
 80034a4:	4957      	ldr	r1, [pc, #348]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02e      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d6:	d129      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034e6:	4b47      	ldr	r3, [pc, #284]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ec:	0f1b      	lsrs	r3, r3, #28
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	019a      	lsls	r2, r3, #6
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	431a      	orrs	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	071b      	lsls	r3, r3, #28
 800350c:	493d      	ldr	r1, [pc, #244]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003514:	4b3b      	ldr	r3, [pc, #236]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800351a:	f023 021f 	bic.w	r2, r3, #31
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	3b01      	subs	r3, #1
 8003524:	4937      	ldr	r1, [pc, #220]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01d      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003538:	4b32      	ldr	r3, [pc, #200]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353e:	0e1b      	lsrs	r3, r3, #24
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003546:	4b2f      	ldr	r3, [pc, #188]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800354c:	0f1b      	lsrs	r3, r3, #28
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	019a      	lsls	r2, r3, #6
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	431a      	orrs	r2, r3
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	061b      	lsls	r3, r3, #24
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	071b      	lsls	r3, r3, #28
 800356c:	4925      	ldr	r1, [pc, #148]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d011      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	019a      	lsls	r2, r3, #6
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	071b      	lsls	r3, r3, #28
 800359c:	4919      	ldr	r1, [pc, #100]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035a4:	4b17      	ldr	r3, [pc, #92]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b0:	f7fd fe7a 	bl	80012a8 <HAL_GetTick>
 80035b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035b8:	f7fd fe76 	bl	80012a8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	@ 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0d7      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 80cd 	bne.w	8003778 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ea:	f7fd fe5d 	bl	80012a8 <HAL_GetTick>
 80035ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035f0:	e00a      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035f2:	f7fd fe59 	bl	80012a8 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	@ 0x64
 80035fe:	d903      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0ba      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003604:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003608:	4b5e      	ldr	r3, [pc, #376]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003614:	d0ed      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02e      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d12a      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800363e:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800364c:	4b4d      	ldr	r3, [pc, #308]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	0f1b      	lsrs	r3, r3, #28
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	019a      	lsls	r2, r3, #6
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	071b      	lsls	r3, r3, #28
 8003672:	4944      	ldr	r1, [pc, #272]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800367a:	4b42      	ldr	r3, [pc, #264]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800367c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003680:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	493d      	ldr	r1, [pc, #244]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d022      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a8:	d11d      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036aa:	4b36      	ldr	r3, [pc, #216]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	0e1b      	lsrs	r3, r3, #24
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036b8:	4b32      	ldr	r3, [pc, #200]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036be:	0f1b      	lsrs	r3, r3, #28
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	019a      	lsls	r2, r3, #6
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	431a      	orrs	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	071b      	lsls	r3, r3, #28
 80036de:	4929      	ldr	r1, [pc, #164]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d028      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036f2:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003700:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	019a      	lsls	r2, r3, #6
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	431a      	orrs	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	061b      	lsls	r3, r3, #24
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	4917      	ldr	r1, [pc, #92]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	4911      	ldr	r1, [pc, #68]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003744:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0e      	ldr	r2, [pc, #56]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800374e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003750:	f7fd fdaa 	bl	80012a8 <HAL_GetTick>
 8003754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003758:	f7fd fda6 	bl	80012a8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	@ 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e007      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003776:	d1ef      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e040      	b.n	800381c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fb8e 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	@ 0x24
 80037b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 feea 	bl	80045a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fc83 	bl	80040e0 <UART_SetConfig>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e01b      	b.n	800381c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 ff69 	bl	80046ec <UART_CheckIdleState>
 800381a:	4603      	mov	r3, r0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	@ 0x28
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003838:	2b20      	cmp	r3, #32
 800383a:	d177      	bne.n	800392c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_UART_Transmit+0x24>
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e070      	b.n	800392e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	@ 0x21
 8003858:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800385a:	f7fd fd25 	bl	80012a8 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003878:	d108      	bne.n	800388c <HAL_UART_Transmit+0x68>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e003      	b.n	8003894 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003894:	e02f      	b.n	80038f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	2180      	movs	r1, #128	@ 0x80
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 ff7a 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e03b      	b.n	800392e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	3302      	adds	r3, #2
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e007      	b.n	80038e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3301      	adds	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1c9      	bne.n	8003896 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	2140      	movs	r1, #64	@ 0x40
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 ff44 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d004      	beq.n	8003922 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e005      	b.n	800392e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b08a      	sub	sp, #40	@ 0x28
 800393a:	af02      	add	r7, sp, #8
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800394c:	2b20      	cmp	r3, #32
 800394e:	f040 80b5 	bne.w	8003abc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_Receive+0x28>
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0ad      	b.n	8003abe <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2222      	movs	r2, #34	@ 0x22
 800396e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003978:	f7fd fc96 	bl	80012a8 <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003996:	d10e      	bne.n	80039b6 <HAL_UART_Receive+0x80>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_UART_Receive+0x76>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80039a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039aa:	e02d      	b.n	8003a08 <HAL_UART_Receive+0xd2>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	@ 0xff
 80039b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039b4:	e028      	b.n	8003a08 <HAL_UART_Receive+0xd2>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_UART_Receive+0xa4>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Receive+0x9a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039ce:	e01b      	b.n	8003a08 <HAL_UART_Receive+0xd2>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	@ 0x7f
 80039d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039d8:	e016      	b.n	8003a08 <HAL_UART_Receive+0xd2>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e2:	d10d      	bne.n	8003a00 <HAL_UART_Receive+0xca>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_UART_Receive+0xc0>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	227f      	movs	r2, #127	@ 0x7f
 80039f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039f4:	e008      	b.n	8003a08 <HAL_UART_Receive+0xd2>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	223f      	movs	r2, #63	@ 0x3f
 80039fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80039fe:	e003      	b.n	8003a08 <HAL_UART_Receive+0xd2>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a18:	d108      	bne.n	8003a2c <HAL_UART_Receive+0xf6>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	e003      	b.n	8003a34 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a34:	e036      	b.n	8003aa4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2120      	movs	r1, #32
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 feaa 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e032      	b.n	8003abe <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	8a7b      	ldrh	r3, [r7, #18]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	3302      	adds	r3, #2
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e00c      	b.n	8003a92 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	8a7b      	ldrh	r3, [r7, #18]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	4013      	ands	r3, r2
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1c2      	bne.n	8003a36 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b0ba      	sub	sp, #232	@ 0xe8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003aee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003af2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003af6:	4013      	ands	r3, r2
 8003af8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d115      	bne.n	8003b30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00f      	beq.n	8003b30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 82b1 	beq.w	8004088 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
      }
      return;
 8003b2e:	e2ab      	b.n	8004088 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8117 	beq.w	8003d68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b4a:	4b85      	ldr	r3, [pc, #532]	@ (8003d60 <HAL_UART_IRQHandler+0x298>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 810a 	beq.w	8003d68 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d011      	beq.n	8003b84 <HAL_UART_IRQHandler+0xbc>
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2201      	movs	r2, #1
 8003b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b7a:	f043 0201 	orr.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d011      	beq.n	8003bb4 <HAL_UART_IRQHandler+0xec>
 8003b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d011      	beq.n	8003be4 <HAL_UART_IRQHandler+0x11c>
 8003bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d017      	beq.n	8003c20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c16:	f043 0208 	orr.w	r2, r3, #8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_UART_IRQHandler+0x18a>
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00c      	beq.n	8003c52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8217 	beq.w	800408c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9a:	2b40      	cmp	r3, #64	@ 0x40
 8003c9c:	d005      	beq.n	8003caa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ca2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04f      	beq.n	8003d4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fde2 	bl	8004874 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cba:	2b40      	cmp	r3, #64	@ 0x40
 8003cbc:	d141      	bne.n	8003d42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1d9      	bne.n	8003cbe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d16:	4a13      	ldr	r2, [pc, #76]	@ (8003d64 <HAL_UART_IRQHandler+0x29c>)
 8003d18:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fc73 	bl	800160a <HAL_DMA_Abort_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d017      	beq.n	8003d5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	e00f      	b.n	8003d5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9ba 	bl	80040b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	e00b      	b.n	8003d5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f9b6 	bl	80040b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e007      	b.n	8003d5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9b2 	bl	80040b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003d58:	e198      	b.n	800408c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5a:	bf00      	nop
    return;
 8003d5c:	e196      	b.n	800408c <HAL_UART_IRQHandler+0x5c4>
 8003d5e:	bf00      	nop
 8003d60:	04000120 	.word	0x04000120
 8003d64:	0800493d 	.word	0x0800493d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	f040 8166 	bne.w	800403e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 815f 	beq.w	800403e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8158 	beq.w	800403e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2210      	movs	r2, #16
 8003d94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da0:	2b40      	cmp	r3, #64	@ 0x40
 8003da2:	f040 80d0 	bne.w	8003f46 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003db2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80ab 	beq.w	8003f12 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	f080 80a3 	bcs.w	8003f12 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de0:	f000 8086 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1da      	bne.n	8003de4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e1      	bne.n	8003e2e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ec0:	f023 0310 	bic.w	r3, r3, #16
 8003ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ed4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e4      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fb1d 	bl	800152a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8dc 	bl	80040c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f10:	e0be      	b.n	8004090 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	f040 80b7 	bne.w	8004090 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2c:	f040 80b0 	bne.w	8004090 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8c2 	bl	80040c8 <HAL_UARTEx_RxEventCallback>
      return;
 8003f44:	e0a4      	b.n	8004090 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8096 	beq.w	8004094 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8003f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8091 	beq.w	8004094 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e4      	bne.n	8003f72 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e3      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	60fb      	str	r3, [r7, #12]
   return(result);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f023 0310 	bic.w	r3, r3, #16
 8004008:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	69b9      	ldr	r1, [r7, #24]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	617b      	str	r3, [r7, #20]
   return(result);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e4      	bne.n	8003ff4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f846 	bl	80040c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800403c:	e02a      	b.n	8004094 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800404e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01c      	beq.n	8004098 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
    }
    return;
 8004066:	e017      	b.n	8004098 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_UART_IRQHandler+0x5d2>
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00c      	beq.n	800409a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fc6d 	bl	8004960 <UART_EndTransmit_IT>
    return;
 8004086:	e008      	b.n	800409a <HAL_UART_IRQHandler+0x5d2>
      return;
 8004088:	bf00      	nop
 800408a:	e006      	b.n	800409a <HAL_UART_IRQHandler+0x5d2>
    return;
 800408c:	bf00      	nop
 800408e:	e004      	b.n	800409a <HAL_UART_IRQHandler+0x5d2>
      return;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_UART_IRQHandler+0x5d2>
      return;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_UART_IRQHandler+0x5d2>
    return;
 8004098:	bf00      	nop
  }

}
 800409a:	37e8      	adds	r7, #232	@ 0xe8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4ba6      	ldr	r3, [pc, #664]	@ (80043a4 <UART_SetConfig+0x2c4>)
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6979      	ldr	r1, [r7, #20]
 8004114:	430b      	orrs	r3, r1
 8004116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a94      	ldr	r2, [pc, #592]	@ (80043a8 <UART_SetConfig+0x2c8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d120      	bne.n	800419e <UART_SetConfig+0xbe>
 800415c:	4b93      	ldr	r3, [pc, #588]	@ (80043ac <UART_SetConfig+0x2cc>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b03      	cmp	r3, #3
 8004168:	d816      	bhi.n	8004198 <UART_SetConfig+0xb8>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <UART_SetConfig+0x90>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004181 	.word	0x08004181
 8004174:	0800418d 	.word	0x0800418d
 8004178:	08004187 	.word	0x08004187
 800417c:	08004193 	.word	0x08004193
 8004180:	2301      	movs	r3, #1
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e150      	b.n	8004428 <UART_SetConfig+0x348>
 8004186:	2302      	movs	r3, #2
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e14d      	b.n	8004428 <UART_SetConfig+0x348>
 800418c:	2304      	movs	r3, #4
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e14a      	b.n	8004428 <UART_SetConfig+0x348>
 8004192:	2308      	movs	r3, #8
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e147      	b.n	8004428 <UART_SetConfig+0x348>
 8004198:	2310      	movs	r3, #16
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e144      	b.n	8004428 <UART_SetConfig+0x348>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a83      	ldr	r2, [pc, #524]	@ (80043b0 <UART_SetConfig+0x2d0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d132      	bne.n	800420e <UART_SetConfig+0x12e>
 80041a8:	4b80      	ldr	r3, [pc, #512]	@ (80043ac <UART_SetConfig+0x2cc>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d828      	bhi.n	8004208 <UART_SetConfig+0x128>
 80041b6:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0xdc>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041f1 	.word	0x080041f1
 80041c0:	08004209 	.word	0x08004209
 80041c4:	08004209 	.word	0x08004209
 80041c8:	08004209 	.word	0x08004209
 80041cc:	080041fd 	.word	0x080041fd
 80041d0:	08004209 	.word	0x08004209
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004209 	.word	0x08004209
 80041dc:	080041f7 	.word	0x080041f7
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004209 	.word	0x08004209
 80041e8:	08004209 	.word	0x08004209
 80041ec:	08004203 	.word	0x08004203
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e118      	b.n	8004428 <UART_SetConfig+0x348>
 80041f6:	2302      	movs	r3, #2
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e115      	b.n	8004428 <UART_SetConfig+0x348>
 80041fc:	2304      	movs	r3, #4
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e112      	b.n	8004428 <UART_SetConfig+0x348>
 8004202:	2308      	movs	r3, #8
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e10f      	b.n	8004428 <UART_SetConfig+0x348>
 8004208:	2310      	movs	r3, #16
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e10c      	b.n	8004428 <UART_SetConfig+0x348>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a68      	ldr	r2, [pc, #416]	@ (80043b4 <UART_SetConfig+0x2d4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d120      	bne.n	800425a <UART_SetConfig+0x17a>
 8004218:	4b64      	ldr	r3, [pc, #400]	@ (80043ac <UART_SetConfig+0x2cc>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004222:	2b30      	cmp	r3, #48	@ 0x30
 8004224:	d013      	beq.n	800424e <UART_SetConfig+0x16e>
 8004226:	2b30      	cmp	r3, #48	@ 0x30
 8004228:	d814      	bhi.n	8004254 <UART_SetConfig+0x174>
 800422a:	2b20      	cmp	r3, #32
 800422c:	d009      	beq.n	8004242 <UART_SetConfig+0x162>
 800422e:	2b20      	cmp	r3, #32
 8004230:	d810      	bhi.n	8004254 <UART_SetConfig+0x174>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <UART_SetConfig+0x15c>
 8004236:	2b10      	cmp	r3, #16
 8004238:	d006      	beq.n	8004248 <UART_SetConfig+0x168>
 800423a:	e00b      	b.n	8004254 <UART_SetConfig+0x174>
 800423c:	2300      	movs	r3, #0
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e0f2      	b.n	8004428 <UART_SetConfig+0x348>
 8004242:	2302      	movs	r3, #2
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e0ef      	b.n	8004428 <UART_SetConfig+0x348>
 8004248:	2304      	movs	r3, #4
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e0ec      	b.n	8004428 <UART_SetConfig+0x348>
 800424e:	2308      	movs	r3, #8
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e0e9      	b.n	8004428 <UART_SetConfig+0x348>
 8004254:	2310      	movs	r3, #16
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e0e6      	b.n	8004428 <UART_SetConfig+0x348>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a56      	ldr	r2, [pc, #344]	@ (80043b8 <UART_SetConfig+0x2d8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d120      	bne.n	80042a6 <UART_SetConfig+0x1c6>
 8004264:	4b51      	ldr	r3, [pc, #324]	@ (80043ac <UART_SetConfig+0x2cc>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800426e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004270:	d013      	beq.n	800429a <UART_SetConfig+0x1ba>
 8004272:	2bc0      	cmp	r3, #192	@ 0xc0
 8004274:	d814      	bhi.n	80042a0 <UART_SetConfig+0x1c0>
 8004276:	2b80      	cmp	r3, #128	@ 0x80
 8004278:	d009      	beq.n	800428e <UART_SetConfig+0x1ae>
 800427a:	2b80      	cmp	r3, #128	@ 0x80
 800427c:	d810      	bhi.n	80042a0 <UART_SetConfig+0x1c0>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <UART_SetConfig+0x1a8>
 8004282:	2b40      	cmp	r3, #64	@ 0x40
 8004284:	d006      	beq.n	8004294 <UART_SetConfig+0x1b4>
 8004286:	e00b      	b.n	80042a0 <UART_SetConfig+0x1c0>
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e0cc      	b.n	8004428 <UART_SetConfig+0x348>
 800428e:	2302      	movs	r3, #2
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e0c9      	b.n	8004428 <UART_SetConfig+0x348>
 8004294:	2304      	movs	r3, #4
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e0c6      	b.n	8004428 <UART_SetConfig+0x348>
 800429a:	2308      	movs	r3, #8
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e0c3      	b.n	8004428 <UART_SetConfig+0x348>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e0c0      	b.n	8004428 <UART_SetConfig+0x348>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a44      	ldr	r2, [pc, #272]	@ (80043bc <UART_SetConfig+0x2dc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d125      	bne.n	80042fc <UART_SetConfig+0x21c>
 80042b0:	4b3e      	ldr	r3, [pc, #248]	@ (80043ac <UART_SetConfig+0x2cc>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042be:	d017      	beq.n	80042f0 <UART_SetConfig+0x210>
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c4:	d817      	bhi.n	80042f6 <UART_SetConfig+0x216>
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ca:	d00b      	beq.n	80042e4 <UART_SetConfig+0x204>
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d0:	d811      	bhi.n	80042f6 <UART_SetConfig+0x216>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <UART_SetConfig+0x1fe>
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	d006      	beq.n	80042ea <UART_SetConfig+0x20a>
 80042dc:	e00b      	b.n	80042f6 <UART_SetConfig+0x216>
 80042de:	2300      	movs	r3, #0
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e0a1      	b.n	8004428 <UART_SetConfig+0x348>
 80042e4:	2302      	movs	r3, #2
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e09e      	b.n	8004428 <UART_SetConfig+0x348>
 80042ea:	2304      	movs	r3, #4
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e09b      	b.n	8004428 <UART_SetConfig+0x348>
 80042f0:	2308      	movs	r3, #8
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e098      	b.n	8004428 <UART_SetConfig+0x348>
 80042f6:	2310      	movs	r3, #16
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e095      	b.n	8004428 <UART_SetConfig+0x348>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2f      	ldr	r2, [pc, #188]	@ (80043c0 <UART_SetConfig+0x2e0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d125      	bne.n	8004352 <UART_SetConfig+0x272>
 8004306:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <UART_SetConfig+0x2cc>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004314:	d017      	beq.n	8004346 <UART_SetConfig+0x266>
 8004316:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800431a:	d817      	bhi.n	800434c <UART_SetConfig+0x26c>
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004320:	d00b      	beq.n	800433a <UART_SetConfig+0x25a>
 8004322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004326:	d811      	bhi.n	800434c <UART_SetConfig+0x26c>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <UART_SetConfig+0x254>
 800432c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004330:	d006      	beq.n	8004340 <UART_SetConfig+0x260>
 8004332:	e00b      	b.n	800434c <UART_SetConfig+0x26c>
 8004334:	2301      	movs	r3, #1
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e076      	b.n	8004428 <UART_SetConfig+0x348>
 800433a:	2302      	movs	r3, #2
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e073      	b.n	8004428 <UART_SetConfig+0x348>
 8004340:	2304      	movs	r3, #4
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e070      	b.n	8004428 <UART_SetConfig+0x348>
 8004346:	2308      	movs	r3, #8
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e06d      	b.n	8004428 <UART_SetConfig+0x348>
 800434c:	2310      	movs	r3, #16
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e06a      	b.n	8004428 <UART_SetConfig+0x348>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	@ (80043c4 <UART_SetConfig+0x2e4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d138      	bne.n	80043ce <UART_SetConfig+0x2ee>
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <UART_SetConfig+0x2cc>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004362:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004366:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800436a:	d017      	beq.n	800439c <UART_SetConfig+0x2bc>
 800436c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004370:	d82a      	bhi.n	80043c8 <UART_SetConfig+0x2e8>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004376:	d00b      	beq.n	8004390 <UART_SetConfig+0x2b0>
 8004378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437c:	d824      	bhi.n	80043c8 <UART_SetConfig+0x2e8>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <UART_SetConfig+0x2aa>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004386:	d006      	beq.n	8004396 <UART_SetConfig+0x2b6>
 8004388:	e01e      	b.n	80043c8 <UART_SetConfig+0x2e8>
 800438a:	2300      	movs	r3, #0
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e04b      	b.n	8004428 <UART_SetConfig+0x348>
 8004390:	2302      	movs	r3, #2
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e048      	b.n	8004428 <UART_SetConfig+0x348>
 8004396:	2304      	movs	r3, #4
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e045      	b.n	8004428 <UART_SetConfig+0x348>
 800439c:	2308      	movs	r3, #8
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e042      	b.n	8004428 <UART_SetConfig+0x348>
 80043a2:	bf00      	nop
 80043a4:	efff69f3 	.word	0xefff69f3
 80043a8:	40011000 	.word	0x40011000
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40004400 	.word	0x40004400
 80043b4:	40004800 	.word	0x40004800
 80043b8:	40004c00 	.word	0x40004c00
 80043bc:	40005000 	.word	0x40005000
 80043c0:	40011400 	.word	0x40011400
 80043c4:	40007800 	.word	0x40007800
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e02c      	b.n	8004428 <UART_SetConfig+0x348>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a72      	ldr	r2, [pc, #456]	@ (800459c <UART_SetConfig+0x4bc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d125      	bne.n	8004424 <UART_SetConfig+0x344>
 80043d8:	4b71      	ldr	r3, [pc, #452]	@ (80045a0 <UART_SetConfig+0x4c0>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043e6:	d017      	beq.n	8004418 <UART_SetConfig+0x338>
 80043e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043ec:	d817      	bhi.n	800441e <UART_SetConfig+0x33e>
 80043ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f2:	d00b      	beq.n	800440c <UART_SetConfig+0x32c>
 80043f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f8:	d811      	bhi.n	800441e <UART_SetConfig+0x33e>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <UART_SetConfig+0x326>
 80043fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004402:	d006      	beq.n	8004412 <UART_SetConfig+0x332>
 8004404:	e00b      	b.n	800441e <UART_SetConfig+0x33e>
 8004406:	2300      	movs	r3, #0
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e00d      	b.n	8004428 <UART_SetConfig+0x348>
 800440c:	2302      	movs	r3, #2
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e00a      	b.n	8004428 <UART_SetConfig+0x348>
 8004412:	2304      	movs	r3, #4
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e007      	b.n	8004428 <UART_SetConfig+0x348>
 8004418:	2308      	movs	r3, #8
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e004      	b.n	8004428 <UART_SetConfig+0x348>
 800441e:	2310      	movs	r3, #16
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e001      	b.n	8004428 <UART_SetConfig+0x348>
 8004424:	2310      	movs	r3, #16
 8004426:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004430:	d15b      	bne.n	80044ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d828      	bhi.n	800448a <UART_SetConfig+0x3aa>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <UART_SetConfig+0x360>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004465 	.word	0x08004465
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004475 	.word	0x08004475
 800444c:	0800448b 	.word	0x0800448b
 8004450:	0800447b 	.word	0x0800447b
 8004454:	0800448b 	.word	0x0800448b
 8004458:	0800448b 	.word	0x0800448b
 800445c:	0800448b 	.word	0x0800448b
 8004460:	08004483 	.word	0x08004483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7fe fd78 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004468:	61b8      	str	r0, [r7, #24]
        break;
 800446a:	e013      	b.n	8004494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7fe fd88 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8004470:	61b8      	str	r0, [r7, #24]
        break;
 8004472:	e00f      	b.n	8004494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004474:	4b4b      	ldr	r3, [pc, #300]	@ (80045a4 <UART_SetConfig+0x4c4>)
 8004476:	61bb      	str	r3, [r7, #24]
        break;
 8004478:	e00c      	b.n	8004494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447a:	f7fe fc5b 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 800447e:	61b8      	str	r0, [r7, #24]
        break;
 8004480:	e008      	b.n	8004494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004486:	61bb      	str	r3, [r7, #24]
        break;
 8004488:	e004      	b.n	8004494 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	77bb      	strb	r3, [r7, #30]
        break;
 8004492:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d074      	beq.n	8004584 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	005a      	lsls	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b0f      	cmp	r3, #15
 80044b4:	d916      	bls.n	80044e4 <UART_SetConfig+0x404>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044bc:	d212      	bcs.n	80044e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f023 030f 	bic.w	r3, r3, #15
 80044c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	89fa      	ldrh	r2, [r7, #14]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	e04f      	b.n	8004584 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77bb      	strb	r3, [r7, #30]
 80044e8:	e04c      	b.n	8004584 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ea:	7ffb      	ldrb	r3, [r7, #31]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d828      	bhi.n	8004542 <UART_SetConfig+0x462>
 80044f0:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <UART_SetConfig+0x418>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	08004525 	.word	0x08004525
 8004500:	0800452d 	.word	0x0800452d
 8004504:	08004543 	.word	0x08004543
 8004508:	08004533 	.word	0x08004533
 800450c:	08004543 	.word	0x08004543
 8004510:	08004543 	.word	0x08004543
 8004514:	08004543 	.word	0x08004543
 8004518:	0800453b 	.word	0x0800453b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe fd1c 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004520:	61b8      	str	r0, [r7, #24]
        break;
 8004522:	e013      	b.n	800454c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004524:	f7fe fd2c 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8004528:	61b8      	str	r0, [r7, #24]
        break;
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800452c:	4b1d      	ldr	r3, [pc, #116]	@ (80045a4 <UART_SetConfig+0x4c4>)
 800452e:	61bb      	str	r3, [r7, #24]
        break;
 8004530:	e00c      	b.n	800454c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe fbff 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8004536:	61b8      	str	r0, [r7, #24]
        break;
 8004538:	e008      	b.n	800454c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800453e:	61bb      	str	r3, [r7, #24]
        break;
 8004540:	e004      	b.n	800454c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	77bb      	strb	r3, [r7, #30]
        break;
 800454a:	bf00      	nop
    }

    if (pclk != 0U)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d018      	beq.n	8004584 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	085a      	lsrs	r2, r3, #1
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	441a      	add	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b0f      	cmp	r3, #15
 800456a:	d909      	bls.n	8004580 <UART_SetConfig+0x4a0>
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004572:	d205      	bcs.n	8004580 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e001      	b.n	8004584 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004590:	7fbb      	ldrb	r3, [r7, #30]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40007c00 	.word	0x40007c00
 80045a0:	40023800 	.word	0x40023800
 80045a4:	00f42400 	.word	0x00f42400

080045a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01a      	beq.n	80046be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a6:	d10a      	bne.n	80046be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08c      	sub	sp, #48	@ 0x30
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046fc:	f7fc fdd4 	bl	80012a8 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d12e      	bne.n	800476e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	2200      	movs	r2, #0
 800471a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f83b 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d021      	beq.n	800476e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	60fb      	str	r3, [r7, #12]
   return(result);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	617b      	str	r3, [r7, #20]
   return(result);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e6      	bne.n	800472a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e011      	b.n	8004792 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3728      	adds	r7, #40	@ 0x28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	e04f      	b.n	800484c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d04b      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fc fd78 	bl	80012a8 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <UART_WaitOnFlagUntilTimeout+0x30>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e04e      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d037      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xb2>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b80      	cmp	r3, #128	@ 0x80
 80047e0:	d034      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d031      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d110      	bne.n	8004818 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2208      	movs	r2, #8
 80047fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f838 	bl	8004874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2208      	movs	r2, #8
 8004808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e029      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004826:	d111      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004830:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f81e 	bl	8004874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e00f      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	429a      	cmp	r2, r3
 8004868:	d0a0      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b095      	sub	sp, #84	@ 0x54
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489a:	643b      	str	r3, [r7, #64]	@ 0x40
 800489c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e6      	bne.n	800487c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d118      	bne.n	800491c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f023 0310 	bic.w	r3, r3, #16
 80048fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6979      	ldr	r1, [r7, #20]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	613b      	str	r3, [r7, #16]
   return(result);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e6      	bne.n	80048ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004930:	bf00      	nop
 8004932:	3754      	adds	r7, #84	@ 0x54
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff fbae 	bl	80040b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	60bb      	str	r3, [r7, #8]
   return(result);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	613b      	str	r3, [r7, #16]
   return(result);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e6      	bne.n	8004968 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fb7a 	bl	80040a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ac:	bf00      	nop
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049b4:	b084      	sub	sp, #16
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	f107 001c 	add.w	r0, r7, #28
 80049c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d121      	bne.n	8004a12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	4b21      	ldr	r3, [pc, #132]	@ (8004a64 <USB_CoreInit+0xb0>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d105      	bne.n	8004a06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa92 	bl	8004f30 <USB_CoreReset>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	e010      	b.n	8004a34 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa86 	bl	8004f30 <USB_CoreReset>
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a34:	7fbb      	ldrb	r3, [r7, #30]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d10b      	bne.n	8004a52 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f043 0206 	orr.w	r2, r3, #6
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5e:	b004      	add	sp, #16
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	ffbdffbf 	.word	0xffbdffbf

08004a68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 0201 	bic.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d115      	bne.n	8004ad8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ab8:	200a      	movs	r0, #10
 8004aba:	f7fc fc01 	bl	80012c0 <HAL_Delay>
      ms += 10U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	330a      	adds	r3, #10
 8004ac2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa25 	bl	8004f14 <USB_GetMode>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d01e      	beq.n	8004b0e <USB_SetCurrentMode+0x84>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ad4:	d9f0      	bls.n	8004ab8 <USB_SetCurrentMode+0x2e>
 8004ad6:	e01a      	b.n	8004b0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d115      	bne.n	8004b0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004aea:	200a      	movs	r0, #10
 8004aec:	f7fc fbe8 	bl	80012c0 <HAL_Delay>
      ms += 10U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	330a      	adds	r3, #10
 8004af4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa0c 	bl	8004f14 <USB_GetMode>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <USB_SetCurrentMode+0x84>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b06:	d9f0      	bls.n	8004aea <USB_SetCurrentMode+0x60>
 8004b08:	e001      	b.n	8004b0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e005      	b.n	8004b1a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b12:	d101      	bne.n	8004b18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b24:	b084      	sub	sp, #16
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	e009      	b.n	8004b58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3340      	adds	r3, #64	@ 0x40
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	2200      	movs	r2, #0
 8004b50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3301      	adds	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b0e      	cmp	r3, #14
 8004b5c:	d9f2      	bls.n	8004b44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11c      	bne.n	8004ba0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b74:	f043 0302 	orr.w	r3, r3, #2
 8004b78:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e005      	b.n	8004bac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10d      	bne.n	8004bdc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f968 	bl	8004ea0 <USB_SetDevSpeed>
 8004bd0:	e008      	b.n	8004be4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f963 	bl	8004ea0 <USB_SetDevSpeed>
 8004bda:	e003      	b.n	8004be4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bdc:	2103      	movs	r1, #3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f95e 	bl	8004ea0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004be4:	2110      	movs	r1, #16
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8fa 	bl	8004de0 <USB_FlushTxFifo>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f924 	bl	8004e44 <USB_FlushRxFifo>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c24:	461a      	mov	r2, r3
 8004c26:	2300      	movs	r3, #0
 8004c28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e043      	b.n	8004cb8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c46:	d118      	bne.n	8004c7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e013      	b.n	8004c8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c70:	461a      	mov	r2, r3
 8004c72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e008      	b.n	8004c8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004caa:	461a      	mov	r2, r3
 8004cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d3b5      	bcc.n	8004c30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	e043      	b.n	8004d52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ce0:	d118      	bne.n	8004d14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e013      	b.n	8004d26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e008      	b.n	8004d26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d32:	461a      	mov	r2, r3
 8004d34:	2300      	movs	r3, #0
 8004d36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d44:	461a      	mov	r2, r3
 8004d46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d56:	461a      	mov	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d3b5      	bcc.n	8004cca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f043 0210 	orr.w	r2, r3, #16
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <USB_DevInit+0x2b4>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004da0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f043 0208 	orr.w	r2, r3, #8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004db4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <USB_DevInit+0x2b8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd4:	b004      	add	sp, #16
 8004dd6:	4770      	bx	lr
 8004dd8:	803c3800 	.word	0x803c3800
 8004ddc:	40000004 	.word	0x40000004

08004de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dfa:	d901      	bls.n	8004e00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e01b      	b.n	8004e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	daf2      	bge.n	8004dee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	019b      	lsls	r3, r3, #6
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e24:	d901      	bls.n	8004e2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e006      	b.n	8004e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d0f0      	beq.n	8004e18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e5c:	d901      	bls.n	8004e62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e018      	b.n	8004e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	daf2      	bge.n	8004e50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2210      	movs	r2, #16
 8004e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e80:	d901      	bls.n	8004e86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e006      	b.n	8004e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d0f0      	beq.n	8004e74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	68f9      	ldr	r1, [r7, #12]
 8004ebc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004eec:	f023 0303 	bic.w	r3, r3, #3
 8004ef0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f00:	f043 0302 	orr.w	r3, r3, #2
 8004f04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f003 0301 	and.w	r3, r3, #1
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f48:	d901      	bls.n	8004f4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e022      	b.n	8004f94 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	daf2      	bge.n	8004f3c <USB_CoreReset+0xc>

  count = 10U;
 8004f56:	230a      	movs	r3, #10
 8004f58:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004f5a:	e002      	b.n	8004f62 <USB_CoreReset+0x32>
  {
    count--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f9      	bne.n	8004f5c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f043 0201 	orr.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f80:	d901      	bls.n	8004f86 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e006      	b.n	8004f94 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d0f0      	beq.n	8004f74 <USB_CoreReset+0x44>

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <memset>:
 8004fa0:	4402      	add	r2, r0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d100      	bne.n	8004faa <memset+0xa>
 8004fa8:	4770      	bx	lr
 8004faa:	f803 1b01 	strb.w	r1, [r3], #1
 8004fae:	e7f9      	b.n	8004fa4 <memset+0x4>

08004fb0 <__libc_init_array>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8004fe8 <__libc_init_array+0x38>)
 8004fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8004fec <__libc_init_array+0x3c>)
 8004fb6:	1b64      	subs	r4, r4, r5
 8004fb8:	10a4      	asrs	r4, r4, #2
 8004fba:	2600      	movs	r6, #0
 8004fbc:	42a6      	cmp	r6, r4
 8004fbe:	d109      	bne.n	8004fd4 <__libc_init_array+0x24>
 8004fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8004ff0 <__libc_init_array+0x40>)
 8004fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff4 <__libc_init_array+0x44>)
 8004fc4:	f000 f818 	bl	8004ff8 <_init>
 8004fc8:	1b64      	subs	r4, r4, r5
 8004fca:	10a4      	asrs	r4, r4, #2
 8004fcc:	2600      	movs	r6, #0
 8004fce:	42a6      	cmp	r6, r4
 8004fd0:	d105      	bne.n	8004fde <__libc_init_array+0x2e>
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd8:	4798      	blx	r3
 8004fda:	3601      	adds	r6, #1
 8004fdc:	e7ee      	b.n	8004fbc <__libc_init_array+0xc>
 8004fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe2:	4798      	blx	r3
 8004fe4:	3601      	adds	r6, #1
 8004fe6:	e7f2      	b.n	8004fce <__libc_init_array+0x1e>
 8004fe8:	08005158 	.word	0x08005158
 8004fec:	08005158 	.word	0x08005158
 8004ff0:	08005158 	.word	0x08005158
 8004ff4:	0800515c 	.word	0x0800515c

08004ff8 <_init>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	bf00      	nop
 8004ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffe:	bc08      	pop	{r3}
 8005000:	469e      	mov	lr, r3
 8005002:	4770      	bx	lr

08005004 <_fini>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	bf00      	nop
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr
