
ESP32-SAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a0  080046a0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046a8  080046a8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a8  080046a8  000056a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  2000005c  0800470c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  0800470c  000067f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e072  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fe  00000000  00000000  000140fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00016400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000856  00000000  00000000  00016f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026074  00000000  00000000  00017756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f392  00000000  00000000  0003d7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8513  00000000  00000000  0004cb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013506f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003160  00000000  00000000  001350b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00138214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004588 	.word	0x08004588

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004588 	.word	0x08004588

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b68      	ldr	r3, [pc, #416]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a67      	ldr	r2, [pc, #412]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b65      	ldr	r3, [pc, #404]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	61bb      	str	r3, [r7, #24]
 8000618:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	4b62      	ldr	r3, [pc, #392]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a61      	ldr	r2, [pc, #388]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b5f      	ldr	r3, [pc, #380]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b5c      	ldr	r3, [pc, #368]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a5b      	ldr	r2, [pc, #364]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b59      	ldr	r3, [pc, #356]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b56      	ldr	r3, [pc, #344]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a55      	ldr	r2, [pc, #340]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b53      	ldr	r3, [pc, #332]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	4b50      	ldr	r3, [pc, #320]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a4f      	ldr	r2, [pc, #316]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b4d      	ldr	r3, [pc, #308]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067a:	4b4a      	ldr	r3, [pc, #296]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a49      	ldr	r2, [pc, #292]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b47      	ldr	r3, [pc, #284]	@ (80007a4 <MX_GPIO_Init+0x1b8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000698:	4843      	ldr	r0, [pc, #268]	@ (80007a8 <MX_GPIO_Init+0x1bc>)
 800069a:	f000 ffdd 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	4842      	ldr	r0, [pc, #264]	@ (80007ac <MX_GPIO_Init+0x1c0>)
 80006a4:	f000 ffd8 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	483c      	ldr	r0, [pc, #240]	@ (80007b0 <MX_GPIO_Init+0x1c4>)
 80006c0:	f000 fe1e 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006c4:	2332      	movs	r3, #50	@ 0x32
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4834      	ldr	r0, [pc, #208]	@ (80007b0 <MX_GPIO_Init+0x1c4>)
 80006e0:	f000 fe0e 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006e4:	2386      	movs	r3, #134	@ 0x86
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f4:	230b      	movs	r3, #11
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	482d      	ldr	r0, [pc, #180]	@ (80007b4 <MX_GPIO_Init+0x1c8>)
 8000700:	f000 fdfe 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000704:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4822      	ldr	r0, [pc, #136]	@ (80007a8 <MX_GPIO_Init+0x1bc>)
 800071e:	f000 fdef 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000734:	230b      	movs	r3, #11
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	481a      	ldr	r0, [pc, #104]	@ (80007a8 <MX_GPIO_Init+0x1bc>)
 8000740:	f000 fdde 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000744:	2340      	movs	r3, #64	@ 0x40
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4814      	ldr	r0, [pc, #80]	@ (80007ac <MX_GPIO_Init+0x1c0>)
 800075c:	f000 fdd0 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	480e      	ldr	r0, [pc, #56]	@ (80007ac <MX_GPIO_Init+0x1c0>)
 8000774:	f000 fdc4 	bl	8001300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000778:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078a:	230b      	movs	r3, #11
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_GPIO_Init+0x1c0>)
 8000796:	f000 fdb3 	bl	8001300 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3730      	adds	r7, #48	@ 0x30
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40021800 	.word	0x40021800
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020000 	.word	0x40020000

080007b8 <ESP_SendCmd>:
/*----------- AT-command helper --------------*/
#define AT_RX_TIMEOUT 1000
char cmdBuf[64];

HAL_StatusTypeDef ESP_SendCmd(const char *cmd, uint32_t timeout)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0c6      	sub	sp, #280	@ 0x118
 80007bc:	af00      	add	r7, sp, #0
 80007be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007c6:	6018      	str	r0, [r3, #0]
 80007c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007d0:	6019      	str	r1, [r3, #0]
	   // 1) Flush any old data out of the ESP32 Rx FIFO
	    __HAL_UART_FLUSH_DRREGISTER(&huart6);
 80007d2:	4b44      	ldr	r3, [pc, #272]	@ (80008e4 <ESP_SendCmd+0x12c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	699a      	ldr	r2, [r3, #24]
 80007d8:	4b42      	ldr	r3, [pc, #264]	@ (80008e4 <ESP_SendCmd+0x12c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f042 0208 	orr.w	r2, r2, #8
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	4b40      	ldr	r3, [pc, #256]	@ (80008e4 <ESP_SendCmd+0x12c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	699a      	ldr	r2, [r3, #24]
 80007e8:	4b3e      	ldr	r3, [pc, #248]	@ (80008e4 <ESP_SendCmd+0x12c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f042 0210 	orr.w	r2, r2, #16
 80007f0:	619a      	str	r2, [r3, #24]

	    // 2) Echo the exact command we’re about to send to the PC (so you can see it)
	    HAL_UART_Transmit(&huart3, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80007f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	f7ff fd08 	bl	8000210 <strlen>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000808:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	6809      	ldr	r1, [r1, #0]
 8000812:	4835      	ldr	r0, [pc, #212]	@ (80008e8 <ESP_SendCmd+0x130>)
 8000814:	f002 f98c 	bl	8002b30 <HAL_UART_Transmit>

	    // 3) Send the AT command over UART6 to the ESP32
	    HAL_UART_Transmit(&huart6, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000818:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800081c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	f7ff fcf5 	bl	8000210 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800082e:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	6809      	ldr	r1, [r1, #0]
 8000838:	482a      	ldr	r0, [pc, #168]	@ (80008e4 <ESP_SendCmd+0x12c>)
 800083a:	f002 f979 	bl	8002b30 <HAL_UART_Transmit>

	    // 4) Now collect *all* bytes the ESP32 replies with (up to `timeout`) into a buffer
	    uint32_t start = HAL_GetTick();
 800083e:	f000 fc49 	bl	80010d4 <HAL_GetTick>
 8000842:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	    uint8_t  respBuf[256];
	    size_t   rlen = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	    while ((HAL_GetTick() - start) < timeout && rlen < sizeof(respBuf)-1) {
 800084c:	e01c      	b.n	8000888 <ESP_SendCmd+0xd0>
	        uint8_t c;
	        // give each byte up to 20 ms to arrive
	        if (HAL_UART_Receive(&huart6, &c, 1, 20) == HAL_OK) {
 800084e:	f107 010f 	add.w	r1, r7, #15
 8000852:	2314      	movs	r3, #20
 8000854:	2201      	movs	r2, #1
 8000856:	4823      	ldr	r0, [pc, #140]	@ (80008e4 <ESP_SendCmd+0x12c>)
 8000858:	f002 f9f3 	bl	8002c42 <HAL_UART_Receive>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d112      	bne.n	8000888 <ESP_SendCmd+0xd0>
	            respBuf[rlen++] = c;
 8000862:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 800086c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000870:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8000874:	7811      	ldrb	r1, [r2, #0]
 8000876:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800087a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800087e:	54d1      	strb	r1, [r2, r3]
	            start = HAL_GetTick();  // reset our timeout on each new byte
 8000880:	f000 fc28 	bl	80010d4 <HAL_GetTick>
 8000884:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	    while ((HAL_GetTick() - start) < timeout && rlen < sizeof(respBuf)-1) {
 8000888:	f000 fc24 	bl	80010d4 <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000898:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d903      	bls.n	80008aa <ESP_SendCmd+0xf2>
 80008a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80008a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80008a8:	d9d1      	bls.n	800084e <ESP_SendCmd+0x96>
	        }
	    }
	    respBuf[rlen] = '\0';
 80008aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ae:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80008b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80008b6:	4413      	add	r3, r2
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]

	    // 5) Dump the *entire* response back to the PC in one go
	    if (rlen) {
 80008bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d009      	beq.n	80008d8 <ESP_SendCmd+0x120>
	        HAL_UART_Transmit(&huart3, respBuf, rlen, HAL_MAX_DELAY);
 80008c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f107 0110 	add.w	r1, r7, #16
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <ESP_SendCmd+0x130>)
 80008d4:	f002 f92c 	bl	8002b30 <HAL_UART_Transmit>
	    }
	    return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000144 	.word	0x20000144
 80008e8:	200000bc 	.word	0x200000bc

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0a4      	sub	sp, #144	@ 0x90
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fb9e 	bl	8001032 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f8bb 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff fe77 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008fe:	f000 f9c1 	bl	8000c84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000902:	f000 fac5 	bl	8000e90 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000906:	f000 f9ed 	bl	8000ce4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Give ESP32 time to boot */

  /* Give ESP32 time to boot ------------------------------------------------*/
     HAL_Delay(1500);
 800090a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800090e:	f000 fbed 	bl	80010ec <HAL_Delay>

     /* 1) Basic AT test --------------------------------------------------------*/
     ESP_SendCmd("AT\r\n", AT_RX_TIMEOUT);
 8000912:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000916:	4849      	ldr	r0, [pc, #292]	@ (8000a3c <main+0x150>)
 8000918:	f7ff ff4e 	bl	80007b8 <ESP_SendCmd>

     /* 2) Reset module to clear previous state --------------------------------*/
     ESP_SendCmd("AT+RST\r\n", 2000);
 800091c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000920:	4847      	ldr	r0, [pc, #284]	@ (8000a40 <main+0x154>)
 8000922:	f7ff ff49 	bl	80007b8 <ESP_SendCmd>
     HAL_Delay(2000);
 8000926:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800092a:	f000 fbdf 	bl	80010ec <HAL_Delay>

     //NE OLDUGUNU BILMIYOM 1 OLUNCA CALISMIYOR DATA SHEETDE YAZIYO
     ESP_SendCmd("AT+CIPMODE=0\r\n",500);
 800092e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000932:	4844      	ldr	r0, [pc, #272]	@ (8000a44 <main+0x158>)
 8000934:	f7ff ff40 	bl	80007b8 <ESP_SendCmd>
     /* 3) Set Wi-Fi to AP+STA mode (3) -----------------------------------------*/
     ESP_SendCmd("AT+CWMODE=3\r\n", AT_RX_TIMEOUT);
 8000938:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800093c:	4842      	ldr	r0, [pc, #264]	@ (8000a48 <main+0x15c>)
 800093e:	f7ff ff3b 	bl	80007b8 <ESP_SendCmd>
     ESP_SendCmd("AT+CWSAP=\"Ozgun\",\"123456789\",6,3,4,0\r\n", AT_RX_TIMEOUT);
 8000942:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000946:	4841      	ldr	r0, [pc, #260]	@ (8000a4c <main+0x160>)
 8000948:	f7ff ff36 	bl	80007b8 <ESP_SendCmd>

     /* 5) Enable multiple connections -----------------------------------------*/
     ESP_SendCmd("AT+CIPMUX=1\r\n", AT_RX_TIMEOUT);
 800094c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000950:	483f      	ldr	r0, [pc, #252]	@ (8000a50 <main+0x164>)
 8000952:	f7ff ff31 	bl	80007b8 <ESP_SendCmd>

     /* 6) Start TCP server on port 5000 ---------------------------------------*/
     ESP_SendCmd("AT+CIPSERVER=1,5000\r\n", AT_RX_TIMEOUT);
 8000956:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800095a:	483e      	ldr	r0, [pc, #248]	@ (8000a54 <main+0x168>)
 800095c:	f7ff ff2c 	bl	80007b8 <ESP_SendCmd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // b) Receive inbound TCP data from ESP32 and parse
	          char recvBuf[128] = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f003 f97a 	bl	8003c60 <memset>
	          size_t rcvLen = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	          uint32_t t0 = HAL_GetTick();
 8000972:	f000 fbaf 	bl	80010d4 <HAL_GetTick>
 8000976:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	          while ((HAL_GetTick() - t0) < 1000 && rcvLen < sizeof(recvBuf)-1) {
 800097a:	e020      	b.n	80009be <main+0xd2>
	              uint8_t ch;
	              if (HAL_UART_Receive(&huart6, &ch, 1, 50) == HAL_OK) {
 800097c:	f107 0183 	add.w	r1, r7, #131	@ 0x83
 8000980:	2332      	movs	r3, #50	@ 0x32
 8000982:	2201      	movs	r2, #1
 8000984:	4834      	ldr	r0, [pc, #208]	@ (8000a58 <main+0x16c>)
 8000986:	f002 f95c 	bl	8002c42 <HAL_UART_Receive>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d116      	bne.n	80009be <main+0xd2>
	                  HAL_UART_Transmit(&huart3, &ch, 1, HAL_MAX_DELAY);
 8000990:	f107 0183 	add.w	r1, r7, #131	@ 0x83
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
 8000998:	2201      	movs	r2, #1
 800099a:	4830      	ldr	r0, [pc, #192]	@ (8000a5c <main+0x170>)
 800099c:	f002 f8c8 	bl	8002b30 <HAL_UART_Transmit>
	                  recvBuf[rcvLen++] = ch;
 80009a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80009aa:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80009ae:	3390      	adds	r3, #144	@ 0x90
 80009b0:	443b      	add	r3, r7
 80009b2:	f803 2c90 	strb.w	r2, [r3, #-144]
	                  t0 = HAL_GetTick();
 80009b6:	f000 fb8d 	bl	80010d4 <HAL_GetTick>
 80009ba:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	          while ((HAL_GetTick() - t0) < 1000 && rcvLen < sizeof(recvBuf)-1) {
 80009be:	f000 fb89 	bl	80010d4 <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009ce:	d203      	bcs.n	80009d8 <main+0xec>
 80009d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80009d6:	d9d1      	bls.n	800097c <main+0x90>
	              }
	          }
	          recvBuf[rcvLen] = '\0';
 80009d8:	463a      	mov	r2, r7
 80009da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80009de:	4413      	add	r3, r2
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]

	          // c) If specific letter or keyword found, send a response
	          if (strstr(recvBuf, "PING") != NULL) {
 80009e4:	463b      	mov	r3, r7
 80009e6:	491e      	ldr	r1, [pc, #120]	@ (8000a60 <main+0x174>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 f941 	bl	8003c70 <strstr>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d01e      	beq.n	8000a32 <main+0x146>
	              const char *resp = "PONG from STM32!\r\n";
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <main+0x178>)
 80009f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	              sprintf(cmdBuf, "AT+CIPSEND=0,%u\r\n", (unsigned)strlen(resp));
 80009fa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80009fe:	f7ff fc07 	bl	8000210 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	4918      	ldr	r1, [pc, #96]	@ (8000a68 <main+0x17c>)
 8000a08:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <main+0x180>)
 8000a0a:	f003 f907 	bl	8003c1c <siprintf>
	              ESP_SendCmd(cmdBuf, AT_RX_TIMEOUT);
 8000a0e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a12:	4816      	ldr	r0, [pc, #88]	@ (8000a6c <main+0x180>)
 8000a14:	f7ff fed0 	bl	80007b8 <ESP_SendCmd>
	              HAL_UART_Transmit(&huart6, (uint8_t*)resp, strlen(resp), HAL_MAX_DELAY);
 8000a18:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8000a1c:	f7ff fbf8 	bl	8000210 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000a2c:	480a      	ldr	r0, [pc, #40]	@ (8000a58 <main+0x16c>)
 8000a2e:	f002 f87f 	bl	8002b30 <HAL_UART_Transmit>
	          }

	          HAL_Delay(500);
 8000a32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a36:	f000 fb59 	bl	80010ec <HAL_Delay>
  {
 8000a3a:	e791      	b.n	8000960 <main+0x74>
 8000a3c:	080045a0 	.word	0x080045a0
 8000a40:	080045a8 	.word	0x080045a8
 8000a44:	080045b4 	.word	0x080045b4
 8000a48:	080045c4 	.word	0x080045c4
 8000a4c:	080045d4 	.word	0x080045d4
 8000a50:	080045fc 	.word	0x080045fc
 8000a54:	0800460c 	.word	0x0800460c
 8000a58:	20000144 	.word	0x20000144
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	08004624 	.word	0x08004624
 8000a64:	0800462c 	.word	0x0800462c
 8000a68:	08004640 	.word	0x08004640
 8000a6c:	20000078 	.word	0x20000078

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f8ee 	bl	8003c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a94:	f000 ff34 	bl	8001900 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <SystemClock_Config+0xc8>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a26      	ldr	r2, [pc, #152]	@ (8000b38 <SystemClock_Config+0xc8>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <SystemClock_Config+0xc8>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab0:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab8:	4a20      	ldr	r2, [pc, #128]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ae4:	2348      	movs	r3, #72	@ 0x48
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000aec:	2303      	movs	r3, #3
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 ff13 	bl	8001920 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f81e 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 f9a1 	bl	8001e68 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b2c:	f000 f808 	bl	8000b40 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3750      	adds	r7, #80	@ 0x50
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <NMI_Handler+0x4>

08000b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <MemManage_Handler+0x4>

08000bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 fa5f 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	@ (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f003 f83a 	bl	8003c9c <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20050000 	.word	0x20050000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	200000b8 	.word	0x200000b8
 8000c5c:	200007f8 	.word	0x200007f8

08000c60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <MX_USART3_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_USART3_UART_Init+0x58>)
 8000cc8:	f001 fee4 	bl	8002a94 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f7ff ff35 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000bc 	.word	0x200000bc
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <MX_USART6_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_USART6_UART_Init+0x58>)
 8000d28:	f001 feb4 	bl	8002a94 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d32:	f7ff ff05 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000144 	.word	0x20000144
 8000d40:	40011400 	.word	0x40011400

08000d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ac      	sub	sp, #176	@ 0xb0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	2284      	movs	r2, #132	@ 0x84
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 ff7b 	bl	8003c60 <memset>
  if(uartHandle->Instance==USART3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a43      	ldr	r2, [pc, #268]	@ (8000e7c <HAL_UART_MspInit+0x138>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d13d      	bne.n	8000df0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fa96 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8e:	f7ff fed7 	bl	8000b40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d92:	4b3b      	ldr	r3, [pc, #236]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a3a      	ldr	r2, [pc, #232]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b38      	ldr	r3, [pc, #224]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a34      	ldr	r2, [pc, #208]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b32      	ldr	r3, [pc, #200]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4826      	ldr	r0, [pc, #152]	@ (8000e84 <HAL_UART_MspInit+0x140>)
 8000dea:	f000 fa89 	bl	8001300 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000dee:	e040      	b.n	8000e72 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART6)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a24      	ldr	r2, [pc, #144]	@ (8000e88 <HAL_UART_MspInit+0x144>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13b      	bne.n	8000e72 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000dfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e00:	2300      	movs	r3, #0
 8000e02:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fa53 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e14:	f7ff fe94 	bl	8000b40 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1c:	4a18      	ldr	r2, [pc, #96]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <HAL_UART_MspInit+0x13c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e48:	23c0      	movs	r3, #192	@ 0xc0
 8000e4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e60:	2308      	movs	r3, #8
 8000e62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <HAL_UART_MspInit+0x148>)
 8000e6e:	f000 fa47 	bl	8001300 <HAL_GPIO_Init>
}
 8000e72:	bf00      	nop
 8000e74:	37b0      	adds	r7, #176	@ 0xb0
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40011400 	.word	0x40011400
 8000e8c:	40020800 	.word	0x40020800

08000e90 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed4:	f000 fbd9 	bl	800168a <HAL_PCD_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ede:	f7ff fe2f 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001cc 	.word	0x200001cc

08000eec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0ac      	sub	sp, #176	@ 0xb0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	2284      	movs	r2, #132	@ 0x84
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fea7 	bl	8003c60 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f1a:	d159      	bne.n	8000fd0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 f9c1 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f38:	f7ff fe02 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f40:	4a25      	ldr	r2, [pc, #148]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f54:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <HAL_PCD_MspInit+0xf0>)
 8000f7c:	f000 f9c0 	bl	8001300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <HAL_PCD_MspInit+0xf0>)
 8000f9c:	f000 f9b0 	bl	8001300 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbc:	4a06      	ldr	r2, [pc, #24]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <HAL_PCD_MspInit+0xec>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	37b0      	adds	r7, #176	@ 0xb0
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe4:	f7ff fe3c 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800100e:	f002 fe4b 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fc6b 	bl	80008ec <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001024:	080046b0 	.word	0x080046b0
  ldr r2, =_sbss
 8001028:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800102c:	200007f8 	.word	0x200007f8

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>

08001032 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 f92e 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103c:	2000      	movs	r0, #0
 800103e:	f000 f805 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001042:	f7ff fd83 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f93b 	bl	80012e6 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f911 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	200006ac 	.word	0x200006ac

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200006ac 	.word	0x200006ac

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	@ (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	@ 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	@ 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff47 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff5c 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffb0 	bl	8001254 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	@ 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	e175      	b.n	800160c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	429a      	cmp	r2, r3
 800133a:	f040 8164 	bne.w	8001606 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d005      	beq.n	8001356 <HAL_GPIO_Init+0x56>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d130      	bne.n	80013b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f003 0201 	and.w	r2, r3, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d017      	beq.n	80013f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d123      	bne.n	8001448 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0203 	and.w	r2, r3, #3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80be 	beq.w	8001606 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b66      	ldr	r3, [pc, #408]	@ (8001624 <HAL_GPIO_Init+0x324>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a65      	ldr	r2, [pc, #404]	@ (8001624 <HAL_GPIO_Init+0x324>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b63      	ldr	r3, [pc, #396]	@ (8001624 <HAL_GPIO_Init+0x324>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014a2:	4a61      	ldr	r2, [pc, #388]	@ (8001628 <HAL_GPIO_Init+0x328>)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a58      	ldr	r2, [pc, #352]	@ (800162c <HAL_GPIO_Init+0x32c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d037      	beq.n	800153e <HAL_GPIO_Init+0x23e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a57      	ldr	r2, [pc, #348]	@ (8001630 <HAL_GPIO_Init+0x330>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d031      	beq.n	800153a <HAL_GPIO_Init+0x23a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a56      	ldr	r2, [pc, #344]	@ (8001634 <HAL_GPIO_Init+0x334>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d02b      	beq.n	8001536 <HAL_GPIO_Init+0x236>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a55      	ldr	r2, [pc, #340]	@ (8001638 <HAL_GPIO_Init+0x338>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d025      	beq.n	8001532 <HAL_GPIO_Init+0x232>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a54      	ldr	r2, [pc, #336]	@ (800163c <HAL_GPIO_Init+0x33c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d01f      	beq.n	800152e <HAL_GPIO_Init+0x22e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a53      	ldr	r2, [pc, #332]	@ (8001640 <HAL_GPIO_Init+0x340>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x22a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_GPIO_Init+0x344>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x226>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	@ (8001648 <HAL_GPIO_Init+0x348>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x222>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	@ (800164c <HAL_GPIO_Init+0x34c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x21e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	@ (8001650 <HAL_GPIO_Init+0x350>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x21a>
 8001516:	2309      	movs	r3, #9
 8001518:	e012      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800151a:	230a      	movs	r3, #10
 800151c:	e010      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800151e:	2308      	movs	r3, #8
 8001520:	e00e      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001522:	2307      	movs	r3, #7
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001526:	2306      	movs	r3, #6
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x240>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x240>
 800153e:	2300      	movs	r3, #0
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	@ (8001628 <HAL_GPIO_Init+0x328>)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <HAL_GPIO_Init+0x354>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001582:	4a34      	ldr	r2, [pc, #208]	@ (8001654 <HAL_GPIO_Init+0x354>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	4b32      	ldr	r3, [pc, #200]	@ (8001654 <HAL_GPIO_Init+0x354>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ac:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <HAL_GPIO_Init+0x354>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015b2:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <HAL_GPIO_Init+0x354>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001654 <HAL_GPIO_Init+0x354>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_GPIO_Init+0x354>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001600:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <HAL_GPIO_Init+0x354>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3301      	adds	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	2b0f      	cmp	r3, #15
 8001610:	f67f ae86 	bls.w	8001320 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3724      	adds	r7, #36	@ 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40013800 	.word	0x40013800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40021400 	.word	0x40021400
 8001644:	40021800 	.word	0x40021800
 8001648:	40021c00 	.word	0x40021c00
 800164c:	40022000 	.word	0x40022000
 8001650:	40022400 	.word	0x40022400
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af02      	add	r7, sp, #8
 8001690:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e108      	b.n	80018ae <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fc18 	bl	8000eec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ca:	d102      	bne.n	80016d2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 f804 	bl	80036e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7c1a      	ldrb	r2, [r3, #16]
 80016e4:	f88d 2000 	strb.w	r2, [sp]
 80016e8:	3304      	adds	r3, #4
 80016ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ec:	f001 ffa0 	bl	8003630 <USB_CoreInit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0d5      	b.n	80018ae <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fffc 	bl	8003706 <USB_SetCurrentMode>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0c6      	b.n	80018ae <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e04a      	b.n	80017bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	3315      	adds	r3, #21
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	3314      	adds	r3, #20
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	b298      	uxth	r0, r3
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	332e      	adds	r3, #46	@ 0x2e
 8001762:	4602      	mov	r2, r0
 8001764:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3318      	adds	r3, #24
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	331c      	adds	r3, #28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3320      	adds	r3, #32
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	3324      	adds	r3, #36	@ 0x24
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3301      	adds	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3af      	bcc.n	8001726 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e044      	b.n	8001856 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	3301      	adds	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3b5      	bcc.n	80017cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7c1a      	ldrb	r2, [r3, #16]
 8001868:	f88d 2000 	strb.w	r2, [sp]
 800186c:	3304      	adds	r3, #4
 800186e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001870:	f001 ff96 	bl	80037a0 <USB_DevInit>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2202      	movs	r2, #2
 800187e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e013      	b.n	80018ae <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7b1b      	ldrb	r3, [r3, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f80b 	bl	80018b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 f951 	bl	8003b4e <USB_DevDisconnect>

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_PCDEx_ActivateLPM+0x44>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	10000003 	.word	0x10000003

08001900 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40007000 	.word	0x40007000

08001920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e291      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8087 	beq.w	8001a52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001944:	4b96      	ldr	r3, [pc, #600]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b04      	cmp	r3, #4
 800194e:	d00c      	beq.n	800196a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001950:	4b93      	ldr	r3, [pc, #588]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d112      	bne.n	8001982 <HAL_RCC_OscConfig+0x62>
 800195c:	4b90      	ldr	r3, [pc, #576]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001968:	d10b      	bne.n	8001982 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196a:	4b8d      	ldr	r3, [pc, #564]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x130>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d168      	bne.n	8001a50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e26b      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x7a>
 800198c:	4b84      	ldr	r3, [pc, #528]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a83      	ldr	r2, [pc, #524]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e02e      	b.n	80019f8 <HAL_RCC_OscConfig+0xd8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x9c>
 80019a2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e01d      	b.n	80019f8 <HAL_RCC_OscConfig+0xd8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0xc0>
 80019c6:	4b76      	ldr	r3, [pc, #472]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b73      	ldr	r3, [pc, #460]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a72      	ldr	r2, [pc, #456]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0xd8>
 80019e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 80019f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb68 	bl	80010d4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fb64 	bl	80010d4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e21f      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b61      	ldr	r3, [pc, #388]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0xe8>
 8001a26:	e014      	b.n	8001a52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fb54 	bl	80010d4 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fb50 	bl	80010d4 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	@ 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e20b      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	4b57      	ldr	r3, [pc, #348]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x110>
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d069      	beq.n	8001b32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5e:	4b50      	ldr	r3, [pc, #320]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d11c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x190>
 8001a76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d116      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	4b47      	ldr	r3, [pc, #284]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e1df      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	493d      	ldr	r1, [pc, #244]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	e040      	b.n	8001b32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d023      	beq.n	8001b00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab8:	4b39      	ldr	r3, [pc, #228]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a38      	ldr	r2, [pc, #224]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb06 	bl	80010d4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff fb02 	bl	80010d4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1bd      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4929      	ldr	r1, [pc, #164]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
 8001afe:	e018      	b.n	8001b32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b00:	4b27      	ldr	r3, [pc, #156]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a26      	ldr	r2, [pc, #152]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fae2 	bl	80010d4 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fade 	bl	80010d4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e199      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d038      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d019      	beq.n	8001b7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff fabf 	bl	80010d4 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fabb 	bl	80010d4 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e176      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x23a>
 8001b78:	e01a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff faa5 	bl	80010d4 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff faa1 	bl	80010d4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d903      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e15c      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
 8001ba0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	4b91      	ldr	r3, [pc, #580]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ee      	bne.n	8001b8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a4 	beq.w	8001d06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b88      	ldr	r3, [pc, #544]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a87      	ldr	r2, [pc, #540]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b85      	ldr	r3, [pc, #532]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	4b82      	ldr	r3, [pc, #520]	@ (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa69 	bl	80010d4 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff fa65 	bl	80010d4 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	@ 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e120      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b75      	ldr	r3, [pc, #468]	@ (8001df0 <HAL_RCC_OscConfig+0x4d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x31a>
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c30:	4a6e      	ldr	r2, [pc, #440]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_OscConfig+0x376>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x33c>
 8001c42:	4b6a      	ldr	r3, [pc, #424]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	4a69      	ldr	r2, [pc, #420]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4e:	4b67      	ldr	r3, [pc, #412]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	4a66      	ldr	r2, [pc, #408]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x376>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x35e>
 8001c64:	4b61      	ldr	r3, [pc, #388]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c68:	4a60      	ldr	r2, [pc, #384]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c70:	4b5e      	ldr	r3, [pc, #376]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c74:	4a5d      	ldr	r2, [pc, #372]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x376>
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	4a5a      	ldr	r2, [pc, #360]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8a:	4b58      	ldr	r3, [pc, #352]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a57      	ldr	r2, [pc, #348]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fa19 	bl	80010d4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff fa15 	bl	80010d4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0ce      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x386>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff fa03 	bl	80010d4 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff f9ff 	bl	80010d4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80a4 	beq.w	8001e58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d06b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d149      	bne.n	8001db8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a30      	ldr	r2, [pc, #192]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f9d0 	bl	80010d4 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f9cc 	bl	80010d4 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e087      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	019b      	lsls	r3, r3, #6
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a18      	ldr	r2, [pc, #96]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff f9a0 	bl	80010d4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff f99c 	bl	80010d4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e057      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x478>
 8001db6:	e04f      	b.n	8001e58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f986 	bl	80010d4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f982 	bl	80010d4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e03d      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_RCC_OscConfig+0x4cc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4ac>
 8001dea:	e035      	b.n	8001e58 <HAL_RCC_OscConfig+0x538>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_RCC_OscConfig+0x544>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d028      	beq.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d121      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0d0      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b6a      	ldr	r3, [pc, #424]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b67      	ldr	r3, [pc, #412]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 020f 	bic.w	r2, r3, #15
 8001e96:	4965      	ldr	r1, [pc, #404]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0b8      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec8:	4b59      	ldr	r3, [pc, #356]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ece:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee0:	4b53      	ldr	r3, [pc, #332]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001eea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b50      	ldr	r3, [pc, #320]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	494d      	ldr	r1, [pc, #308]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d040      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b47      	ldr	r3, [pc, #284]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d115      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07f      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e073      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06b      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b39      	ldr	r3, [pc, #228]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4936      	ldr	r1, [pc, #216]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f5c:	f7ff f8ba 	bl	80010d4 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7ff f8b6 	bl	80010d4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e053      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b27      	ldr	r3, [pc, #156]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d210      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 020f 	bic.w	r2, r3, #15
 8001fa2:	4922      	ldr	r1, [pc, #136]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e032      	b.n	8002022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4916      	ldr	r1, [pc, #88]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490e      	ldr	r1, [pc, #56]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f821 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490a      	ldr	r1, [pc, #40]	@ (8002034 <HAL_RCC_ClockConfig+0x1cc>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <HAL_RCC_ClockConfig+0x1d0>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_RCC_ClockConfig+0x1d4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f816 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00
 8002030:	40023800 	.word	0x40023800
 8002034:	08004654 	.word	0x08004654
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002044:	b094      	sub	sp, #80	@ 0x50
 8002046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	647b      	str	r3, [r7, #68]	@ 0x44
 800204c:	2300      	movs	r3, #0
 800204e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002050:	2300      	movs	r3, #0
 8002052:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002058:	4b79      	ldr	r3, [pc, #484]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d00d      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x40>
 8002064:	2b08      	cmp	r3, #8
 8002066:	f200 80e1 	bhi.w	800222c <HAL_RCC_GetSysClockFreq+0x1ec>
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x34>
 800206e:	2b04      	cmp	r3, #4
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x3a>
 8002072:	e0db      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4b73      	ldr	r3, [pc, #460]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x204>)
 8002076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002078:	e0db      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207a:	4b73      	ldr	r3, [pc, #460]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x208>)
 800207c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800207e:	e0d8      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002088:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800208a:	4b6d      	ldr	r3, [pc, #436]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d063      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002096:	4b6a      	ldr	r3, [pc, #424]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	2200      	movs	r2, #0
 800209e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80020a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020aa:	2300      	movs	r3, #0
 80020ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020b2:	4622      	mov	r2, r4
 80020b4:	462b      	mov	r3, r5
 80020b6:	f04f 0000 	mov.w	r0, #0
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	0159      	lsls	r1, r3, #5
 80020c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c4:	0150      	lsls	r0, r2, #5
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4621      	mov	r1, r4
 80020cc:	1a51      	subs	r1, r2, r1
 80020ce:	6139      	str	r1, [r7, #16]
 80020d0:	4629      	mov	r1, r5
 80020d2:	eb63 0301 	sbc.w	r3, r3, r1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e4:	4659      	mov	r1, fp
 80020e6:	018b      	lsls	r3, r1, #6
 80020e8:	4651      	mov	r1, sl
 80020ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ee:	4651      	mov	r1, sl
 80020f0:	018a      	lsls	r2, r1, #6
 80020f2:	4651      	mov	r1, sl
 80020f4:	ebb2 0801 	subs.w	r8, r2, r1
 80020f8:	4659      	mov	r1, fp
 80020fa:	eb63 0901 	sbc.w	r9, r3, r1
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002112:	4690      	mov	r8, r2
 8002114:	4699      	mov	r9, r3
 8002116:	4623      	mov	r3, r4
 8002118:	eb18 0303 	adds.w	r3, r8, r3
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	462b      	mov	r3, r5
 8002120:	eb49 0303 	adc.w	r3, r9, r3
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002132:	4629      	mov	r1, r5
 8002134:	024b      	lsls	r3, r1, #9
 8002136:	4621      	mov	r1, r4
 8002138:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800213c:	4621      	mov	r1, r4
 800213e:	024a      	lsls	r2, r1, #9
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002146:	2200      	movs	r2, #0
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800214a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800214c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002150:	f7fe f8b6 	bl	80002c0 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800215c:	e058      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	2200      	movs	r2, #0
 8002166:	4618      	mov	r0, r3
 8002168:	4611      	mov	r1, r2
 800216a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
 8002174:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	0159      	lsls	r1, r3, #5
 8002186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800218a:	0150      	lsls	r0, r2, #5
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4641      	mov	r1, r8
 8002192:	ebb2 0a01 	subs.w	sl, r2, r1
 8002196:	4649      	mov	r1, r9
 8002198:	eb63 0b01 	sbc.w	fp, r3, r1
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021b0:	ebb2 040a 	subs.w	r4, r2, sl
 80021b4:	eb63 050b 	sbc.w	r5, r3, fp
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	00eb      	lsls	r3, r5, #3
 80021c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c6:	00e2      	lsls	r2, r4, #3
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	4643      	mov	r3, r8
 80021ce:	18e3      	adds	r3, r4, r3
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	464b      	mov	r3, r9
 80021d4:	eb45 0303 	adc.w	r3, r5, r3
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021e6:	4629      	mov	r1, r5
 80021e8:	028b      	lsls	r3, r1, #10
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f0:	4621      	mov	r1, r4
 80021f2:	028a      	lsls	r2, r1, #10
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fa:	2200      	movs	r2, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	61fa      	str	r2, [r7, #28]
 8002200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002204:	f7fe f85c 	bl	80002c0 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x200>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002220:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x204>)
 800222e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002234:	4618      	mov	r0, r3
 8002236:	3750      	adds	r7, #80	@ 0x50
 8002238:	46bd      	mov	sp, r7
 800223a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	@ (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	08004664 	.word	0x08004664

0800228c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002290:	f7ff ffdc 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0b5b      	lsrs	r3, r3, #13
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	@ (80022b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08004664 	.word	0x08004664

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d012      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022dc:	4b69      	ldr	r3, [pc, #420]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a68      	ldr	r2, [pc, #416]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022e6:	6093      	str	r3, [r2, #8]
 80022e8:	4b66      	ldr	r3, [pc, #408]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f0:	4964      	ldr	r1, [pc, #400]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022fe:	2301      	movs	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d017      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800230e:	4b5d      	ldr	r3, [pc, #372]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002314:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231c:	4959      	ldr	r1, [pc, #356]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800232c:	d101      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800232e:	2301      	movs	r3, #1
 8002330:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d017      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002350:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	494a      	ldr	r1, [pc, #296]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002368:	d101      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 808b 	beq.w	80024ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4a39      	ldr	r2, [pc, #228]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a4:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023b0:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a34      	ldr	r2, [pc, #208]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023bc:	f7fe fe8a 	bl	80010d4 <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c4:	f7fe fe86 	bl	80010d4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e357      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e2:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d035      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d02e      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002400:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002408:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	4a1d      	ldr	r2, [pc, #116]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002414:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002416:	4b1b      	ldr	r3, [pc, #108]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241a:	4a1a      	ldr	r2, [pc, #104]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002420:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002428:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d114      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fe4e 	bl	80010d4 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fe4a 	bl	80010d4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e319      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800246a:	d111      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800247a:	400b      	ands	r3, r1
 800247c:	4901      	ldr	r1, [pc, #4]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
 8002482:	e00b      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002484:	40023800 	.word	0x40023800
 8002488:	40007000 	.word	0x40007000
 800248c:	0ffffcff 	.word	0x0ffffcff
 8002490:	4baa      	ldr	r3, [pc, #680]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4aa9      	ldr	r2, [pc, #676]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002496:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800249a:	6093      	str	r3, [r2, #8]
 800249c:	4ba7      	ldr	r3, [pc, #668]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a8:	49a4      	ldr	r1, [pc, #656]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ba:	4ba0      	ldr	r3, [pc, #640]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c0:	4a9e      	ldr	r2, [pc, #632]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ca:	4b9c      	ldr	r3, [pc, #624]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d4:	4999      	ldr	r1, [pc, #612]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e8:	4b94      	ldr	r3, [pc, #592]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024f6:	4991      	ldr	r1, [pc, #580]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250a:	4b8c      	ldr	r3, [pc, #560]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002510:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002518:	4988      	ldr	r1, [pc, #544]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800252c:	4b83      	ldr	r3, [pc, #524]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800253a:	4980      	ldr	r1, [pc, #512]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800254e:	4b7b      	ldr	r3, [pc, #492]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255c:	4977      	ldr	r1, [pc, #476]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002570:	4b72      	ldr	r3, [pc, #456]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	496f      	ldr	r1, [pc, #444]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002592:	4b6a      	ldr	r3, [pc, #424]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	f023 020c 	bic.w	r2, r3, #12
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a0:	4966      	ldr	r1, [pc, #408]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b4:	4b61      	ldr	r3, [pc, #388]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c2:	495e      	ldr	r1, [pc, #376]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d6:	4b59      	ldr	r3, [pc, #356]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e4:	4955      	ldr	r1, [pc, #340]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f8:	4b50      	ldr	r3, [pc, #320]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	494d      	ldr	r1, [pc, #308]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800261a:	4b48      	ldr	r3, [pc, #288]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002620:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	4944      	ldr	r1, [pc, #272]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800263c:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	493c      	ldr	r1, [pc, #240]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800265e:	4b37      	ldr	r3, [pc, #220]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266c:	4933      	ldr	r1, [pc, #204]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002680:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002686:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800268e:	492b      	ldr	r1, [pc, #172]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d011      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026a2:	4b26      	ldr	r3, [pc, #152]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026b0:	4922      	ldr	r1, [pc, #136]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026c0:	d101      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e2:	4b16      	ldr	r3, [pc, #88]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f0:	4912      	ldr	r1, [pc, #72]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002704:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002714:	4909      	ldr	r1, [pc, #36]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d006      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80d9 	beq.w	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002730:	4b02      	ldr	r3, [pc, #8]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a01      	ldr	r2, [pc, #4]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800273c:	40023800 	.word	0x40023800
 8002740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002742:	f7fe fcc7 	bl	80010d4 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274a:	f7fe fcc3 	bl	80010d4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	@ 0x64
 8002756:	d901      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e194      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800275c:	4b6c      	ldr	r3, [pc, #432]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d021      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11d      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800277c:	4b64      	ldr	r3, [pc, #400]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800277e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800278a:	4b61      	ldr	r3, [pc, #388]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002790:	0e1b      	lsrs	r3, r3, #24
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	019a      	lsls	r2, r3, #6
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	071b      	lsls	r3, r3, #28
 80027b0:	4957      	ldr	r1, [pc, #348]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02e      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027e2:	d129      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027f2:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f8:	0f1b      	lsrs	r3, r3, #28
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	019a      	lsls	r2, r3, #6
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	431a      	orrs	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	071b      	lsls	r3, r3, #28
 8002818:	493d      	ldr	r1, [pc, #244]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002820:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002826:	f023 021f 	bic.w	r2, r3, #31
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	3b01      	subs	r3, #1
 8002830:	4937      	ldr	r1, [pc, #220]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01d      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002844:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800284a:	0e1b      	lsrs	r3, r3, #24
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002852:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002858:	0f1b      	lsrs	r3, r3, #28
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	019a      	lsls	r2, r3, #6
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	431a      	orrs	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	431a      	orrs	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	071b      	lsls	r3, r3, #28
 8002878:	4925      	ldr	r1, [pc, #148]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d011      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	019a      	lsls	r2, r3, #6
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	071b      	lsls	r3, r3, #28
 80028a8:	4919      	ldr	r1, [pc, #100]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028b0:	4b17      	ldr	r3, [pc, #92]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a16      	ldr	r2, [pc, #88]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fe fc0a 	bl	80010d4 <HAL_GetTick>
 80028c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c4:	f7fe fc06 	bl	80010d4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0d7      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f040 80cd 	bne.w	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a08      	ldr	r2, [pc, #32]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f6:	f7fe fbed 	bl	80010d4 <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028fe:	f7fe fbe9 	bl	80010d4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	@ 0x64
 800290a:	d903      	bls.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e0ba      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002910:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002914:	4b5e      	ldr	r3, [pc, #376]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800291c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002920:	d0ed      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02e      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d12a      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800294a:	4b51      	ldr	r3, [pc, #324]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002958:	4b4d      	ldr	r3, [pc, #308]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	0f1b      	lsrs	r3, r3, #28
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	019a      	lsls	r2, r3, #6
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	061b      	lsls	r3, r3, #24
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	4944      	ldr	r1, [pc, #272]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002986:	4b42      	ldr	r3, [pc, #264]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800298c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	3b01      	subs	r3, #1
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	493d      	ldr	r1, [pc, #244]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d022      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029b4:	d11d      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029b6:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029bc:	0e1b      	lsrs	r3, r3, #24
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029c4:	4b32      	ldr	r3, [pc, #200]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	0f1b      	lsrs	r3, r3, #28
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	019a      	lsls	r2, r3, #6
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	071b      	lsls	r3, r3, #28
 80029ea:	4929      	ldr	r1, [pc, #164]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d028      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	0e1b      	lsrs	r3, r3, #24
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a0c:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	019a      	lsls	r2, r3, #6
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	431a      	orrs	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	071b      	lsls	r3, r3, #28
 8002a32:	4917      	ldr	r1, [pc, #92]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	4911      	ldr	r1, [pc, #68]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0e      	ldr	r2, [pc, #56]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fb3a 	bl	80010d4 <HAL_GetTick>
 8002a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a64:	f7fe fb36 	bl	80010d4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e007      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a82:	d1ef      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e040      	b.n	8002b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe f944 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	@ 0x24
 8002ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fbde 	bl	800329c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f977 	bl	8002dd4 <UART_SetConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e01b      	b.n	8002b28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fc5d 	bl	80033e0 <UART_CheckIdleState>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d177      	bne.n	8002c38 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Transmit+0x24>
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e070      	b.n	8002c3a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2221      	movs	r2, #33	@ 0x21
 8002b64:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b66:	f7fe fab5 	bl	80010d4 <HAL_GetTick>
 8002b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b84:	d108      	bne.n	8002b98 <HAL_UART_Transmit+0x68>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e003      	b.n	8002ba0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba0:	e02f      	b.n	8002c02 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fc6e 	bl	800348e <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e03b      	b.n	8002c3a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	3302      	adds	r3, #2
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	e007      	b.n	8002bf0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1c9      	bne.n	8002ba2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2140      	movs	r1, #64	@ 0x40
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fc38 	bl	800348e <UART_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e005      	b.n	8002c3a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b08a      	sub	sp, #40	@ 0x28
 8002c46:	af02      	add	r7, sp, #8
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	f040 80b5 	bne.w	8002dc8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_UART_Receive+0x28>
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0ad      	b.n	8002dca <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2222      	movs	r2, #34	@ 0x22
 8002c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c84:	f7fe fa26 	bl	80010d4 <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_UART_Receive+0x80>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_UART_Receive+0x76>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002cb6:	e02d      	b.n	8002d14 <HAL_UART_Receive+0xd2>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	22ff      	movs	r2, #255	@ 0xff
 8002cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002cc0:	e028      	b.n	8002d14 <HAL_UART_Receive+0xd2>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10d      	bne.n	8002ce6 <HAL_UART_Receive+0xa4>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <HAL_UART_Receive+0x9a>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	@ 0xff
 8002cd6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002cda:	e01b      	b.n	8002d14 <HAL_UART_Receive+0xd2>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	227f      	movs	r2, #127	@ 0x7f
 8002ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ce4:	e016      	b.n	8002d14 <HAL_UART_Receive+0xd2>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cee:	d10d      	bne.n	8002d0c <HAL_UART_Receive+0xca>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_UART_Receive+0xc0>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	227f      	movs	r2, #127	@ 0x7f
 8002cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d00:	e008      	b.n	8002d14 <HAL_UART_Receive+0xd2>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	223f      	movs	r2, #63	@ 0x3f
 8002d06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d0a:	e003      	b.n	8002d14 <HAL_UART_Receive+0xd2>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d1a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Receive+0xf6>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d40:	e036      	b.n	8002db0 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2120      	movs	r1, #32
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fb9e 	bl	800348e <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e032      	b.n	8002dca <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	8a7b      	ldrh	r3, [r7, #18]
 8002d74:	4013      	ands	r3, r2
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	3302      	adds	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	e00c      	b.n	8002d9e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	8a7b      	ldrh	r3, [r7, #18]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1c2      	bne.n	8002d42 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4ba6      	ldr	r3, [pc, #664]	@ (8003098 <UART_SetConfig+0x2c4>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a94      	ldr	r2, [pc, #592]	@ (800309c <UART_SetConfig+0x2c8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d120      	bne.n	8002e92 <UART_SetConfig+0xbe>
 8002e50:	4b93      	ldr	r3, [pc, #588]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d816      	bhi.n	8002e8c <UART_SetConfig+0xb8>
 8002e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e64 <UART_SetConfig+0x90>)
 8002e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002e81 	.word	0x08002e81
 8002e6c:	08002e7b 	.word	0x08002e7b
 8002e70:	08002e87 	.word	0x08002e87
 8002e74:	2301      	movs	r3, #1
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	e150      	b.n	800311c <UART_SetConfig+0x348>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	77fb      	strb	r3, [r7, #31]
 8002e7e:	e14d      	b.n	800311c <UART_SetConfig+0x348>
 8002e80:	2304      	movs	r3, #4
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e14a      	b.n	800311c <UART_SetConfig+0x348>
 8002e86:	2308      	movs	r3, #8
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e147      	b.n	800311c <UART_SetConfig+0x348>
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e144      	b.n	800311c <UART_SetConfig+0x348>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a83      	ldr	r2, [pc, #524]	@ (80030a4 <UART_SetConfig+0x2d0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d132      	bne.n	8002f02 <UART_SetConfig+0x12e>
 8002e9c:	4b80      	ldr	r3, [pc, #512]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d828      	bhi.n	8002efc <UART_SetConfig+0x128>
 8002eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <UART_SetConfig+0xdc>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002efd 	.word	0x08002efd
 8002eb8:	08002efd 	.word	0x08002efd
 8002ebc:	08002efd 	.word	0x08002efd
 8002ec0:	08002ef1 	.word	0x08002ef1
 8002ec4:	08002efd 	.word	0x08002efd
 8002ec8:	08002efd 	.word	0x08002efd
 8002ecc:	08002efd 	.word	0x08002efd
 8002ed0:	08002eeb 	.word	0x08002eeb
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002efd 	.word	0x08002efd
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e118      	b.n	800311c <UART_SetConfig+0x348>
 8002eea:	2302      	movs	r3, #2
 8002eec:	77fb      	strb	r3, [r7, #31]
 8002eee:	e115      	b.n	800311c <UART_SetConfig+0x348>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e112      	b.n	800311c <UART_SetConfig+0x348>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e10f      	b.n	800311c <UART_SetConfig+0x348>
 8002efc:	2310      	movs	r3, #16
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e10c      	b.n	800311c <UART_SetConfig+0x348>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a68      	ldr	r2, [pc, #416]	@ (80030a8 <UART_SetConfig+0x2d4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d120      	bne.n	8002f4e <UART_SetConfig+0x17a>
 8002f0c:	4b64      	ldr	r3, [pc, #400]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f16:	2b30      	cmp	r3, #48	@ 0x30
 8002f18:	d013      	beq.n	8002f42 <UART_SetConfig+0x16e>
 8002f1a:	2b30      	cmp	r3, #48	@ 0x30
 8002f1c:	d814      	bhi.n	8002f48 <UART_SetConfig+0x174>
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d009      	beq.n	8002f36 <UART_SetConfig+0x162>
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d810      	bhi.n	8002f48 <UART_SetConfig+0x174>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <UART_SetConfig+0x15c>
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d006      	beq.n	8002f3c <UART_SetConfig+0x168>
 8002f2e:	e00b      	b.n	8002f48 <UART_SetConfig+0x174>
 8002f30:	2300      	movs	r3, #0
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e0f2      	b.n	800311c <UART_SetConfig+0x348>
 8002f36:	2302      	movs	r3, #2
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e0ef      	b.n	800311c <UART_SetConfig+0x348>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e0ec      	b.n	800311c <UART_SetConfig+0x348>
 8002f42:	2308      	movs	r3, #8
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e0e9      	b.n	800311c <UART_SetConfig+0x348>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e0e6      	b.n	800311c <UART_SetConfig+0x348>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a56      	ldr	r2, [pc, #344]	@ (80030ac <UART_SetConfig+0x2d8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d120      	bne.n	8002f9a <UART_SetConfig+0x1c6>
 8002f58:	4b51      	ldr	r3, [pc, #324]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f64:	d013      	beq.n	8002f8e <UART_SetConfig+0x1ba>
 8002f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f68:	d814      	bhi.n	8002f94 <UART_SetConfig+0x1c0>
 8002f6a:	2b80      	cmp	r3, #128	@ 0x80
 8002f6c:	d009      	beq.n	8002f82 <UART_SetConfig+0x1ae>
 8002f6e:	2b80      	cmp	r3, #128	@ 0x80
 8002f70:	d810      	bhi.n	8002f94 <UART_SetConfig+0x1c0>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <UART_SetConfig+0x1a8>
 8002f76:	2b40      	cmp	r3, #64	@ 0x40
 8002f78:	d006      	beq.n	8002f88 <UART_SetConfig+0x1b4>
 8002f7a:	e00b      	b.n	8002f94 <UART_SetConfig+0x1c0>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e0cc      	b.n	800311c <UART_SetConfig+0x348>
 8002f82:	2302      	movs	r3, #2
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e0c9      	b.n	800311c <UART_SetConfig+0x348>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e0c6      	b.n	800311c <UART_SetConfig+0x348>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e0c3      	b.n	800311c <UART_SetConfig+0x348>
 8002f94:	2310      	movs	r3, #16
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e0c0      	b.n	800311c <UART_SetConfig+0x348>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a44      	ldr	r2, [pc, #272]	@ (80030b0 <UART_SetConfig+0x2dc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d125      	bne.n	8002ff0 <UART_SetConfig+0x21c>
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fb2:	d017      	beq.n	8002fe4 <UART_SetConfig+0x210>
 8002fb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fb8:	d817      	bhi.n	8002fea <UART_SetConfig+0x216>
 8002fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fbe:	d00b      	beq.n	8002fd8 <UART_SetConfig+0x204>
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc4:	d811      	bhi.n	8002fea <UART_SetConfig+0x216>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <UART_SetConfig+0x1fe>
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fce:	d006      	beq.n	8002fde <UART_SetConfig+0x20a>
 8002fd0:	e00b      	b.n	8002fea <UART_SetConfig+0x216>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e0a1      	b.n	800311c <UART_SetConfig+0x348>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e09e      	b.n	800311c <UART_SetConfig+0x348>
 8002fde:	2304      	movs	r3, #4
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e09b      	b.n	800311c <UART_SetConfig+0x348>
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e098      	b.n	800311c <UART_SetConfig+0x348>
 8002fea:	2310      	movs	r3, #16
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e095      	b.n	800311c <UART_SetConfig+0x348>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80030b4 <UART_SetConfig+0x2e0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d125      	bne.n	8003046 <UART_SetConfig+0x272>
 8002ffa:	4b29      	ldr	r3, [pc, #164]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003000:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003004:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003008:	d017      	beq.n	800303a <UART_SetConfig+0x266>
 800300a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800300e:	d817      	bhi.n	8003040 <UART_SetConfig+0x26c>
 8003010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003014:	d00b      	beq.n	800302e <UART_SetConfig+0x25a>
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800301a:	d811      	bhi.n	8003040 <UART_SetConfig+0x26c>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <UART_SetConfig+0x254>
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	d006      	beq.n	8003034 <UART_SetConfig+0x260>
 8003026:	e00b      	b.n	8003040 <UART_SetConfig+0x26c>
 8003028:	2301      	movs	r3, #1
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e076      	b.n	800311c <UART_SetConfig+0x348>
 800302e:	2302      	movs	r3, #2
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	e073      	b.n	800311c <UART_SetConfig+0x348>
 8003034:	2304      	movs	r3, #4
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e070      	b.n	800311c <UART_SetConfig+0x348>
 800303a:	2308      	movs	r3, #8
 800303c:	77fb      	strb	r3, [r7, #31]
 800303e:	e06d      	b.n	800311c <UART_SetConfig+0x348>
 8003040:	2310      	movs	r3, #16
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e06a      	b.n	800311c <UART_SetConfig+0x348>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1b      	ldr	r2, [pc, #108]	@ (80030b8 <UART_SetConfig+0x2e4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d138      	bne.n	80030c2 <UART_SetConfig+0x2ee>
 8003050:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <UART_SetConfig+0x2cc>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003056:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800305a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800305e:	d017      	beq.n	8003090 <UART_SetConfig+0x2bc>
 8003060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003064:	d82a      	bhi.n	80030bc <UART_SetConfig+0x2e8>
 8003066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800306a:	d00b      	beq.n	8003084 <UART_SetConfig+0x2b0>
 800306c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003070:	d824      	bhi.n	80030bc <UART_SetConfig+0x2e8>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <UART_SetConfig+0x2aa>
 8003076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307a:	d006      	beq.n	800308a <UART_SetConfig+0x2b6>
 800307c:	e01e      	b.n	80030bc <UART_SetConfig+0x2e8>
 800307e:	2300      	movs	r3, #0
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e04b      	b.n	800311c <UART_SetConfig+0x348>
 8003084:	2302      	movs	r3, #2
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e048      	b.n	800311c <UART_SetConfig+0x348>
 800308a:	2304      	movs	r3, #4
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e045      	b.n	800311c <UART_SetConfig+0x348>
 8003090:	2308      	movs	r3, #8
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e042      	b.n	800311c <UART_SetConfig+0x348>
 8003096:	bf00      	nop
 8003098:	efff69f3 	.word	0xefff69f3
 800309c:	40011000 	.word	0x40011000
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40004400 	.word	0x40004400
 80030a8:	40004800 	.word	0x40004800
 80030ac:	40004c00 	.word	0x40004c00
 80030b0:	40005000 	.word	0x40005000
 80030b4:	40011400 	.word	0x40011400
 80030b8:	40007800 	.word	0x40007800
 80030bc:	2310      	movs	r3, #16
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e02c      	b.n	800311c <UART_SetConfig+0x348>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a72      	ldr	r2, [pc, #456]	@ (8003290 <UART_SetConfig+0x4bc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d125      	bne.n	8003118 <UART_SetConfig+0x344>
 80030cc:	4b71      	ldr	r3, [pc, #452]	@ (8003294 <UART_SetConfig+0x4c0>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030da:	d017      	beq.n	800310c <UART_SetConfig+0x338>
 80030dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030e0:	d817      	bhi.n	8003112 <UART_SetConfig+0x33e>
 80030e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030e6:	d00b      	beq.n	8003100 <UART_SetConfig+0x32c>
 80030e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ec:	d811      	bhi.n	8003112 <UART_SetConfig+0x33e>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <UART_SetConfig+0x326>
 80030f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030f6:	d006      	beq.n	8003106 <UART_SetConfig+0x332>
 80030f8:	e00b      	b.n	8003112 <UART_SetConfig+0x33e>
 80030fa:	2300      	movs	r3, #0
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e00d      	b.n	800311c <UART_SetConfig+0x348>
 8003100:	2302      	movs	r3, #2
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e00a      	b.n	800311c <UART_SetConfig+0x348>
 8003106:	2304      	movs	r3, #4
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e007      	b.n	800311c <UART_SetConfig+0x348>
 800310c:	2308      	movs	r3, #8
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e004      	b.n	800311c <UART_SetConfig+0x348>
 8003112:	2310      	movs	r3, #16
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e001      	b.n	800311c <UART_SetConfig+0x348>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003124:	d15b      	bne.n	80031de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d828      	bhi.n	800317e <UART_SetConfig+0x3aa>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <UART_SetConfig+0x360>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003159 	.word	0x08003159
 8003138:	08003161 	.word	0x08003161
 800313c:	08003169 	.word	0x08003169
 8003140:	0800317f 	.word	0x0800317f
 8003144:	0800316f 	.word	0x0800316f
 8003148:	0800317f 	.word	0x0800317f
 800314c:	0800317f 	.word	0x0800317f
 8003150:	0800317f 	.word	0x0800317f
 8003154:	08003177 	.word	0x08003177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7ff f884 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 800315c:	61b8      	str	r0, [r7, #24]
        break;
 800315e:	e013      	b.n	8003188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003160:	f7ff f894 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 8003164:	61b8      	str	r0, [r7, #24]
        break;
 8003166:	e00f      	b.n	8003188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003168:	4b4b      	ldr	r3, [pc, #300]	@ (8003298 <UART_SetConfig+0x4c4>)
 800316a:	61bb      	str	r3, [r7, #24]
        break;
 800316c:	e00c      	b.n	8003188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316e:	f7fe ff67 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8003172:	61b8      	str	r0, [r7, #24]
        break;
 8003174:	e008      	b.n	8003188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800317a:	61bb      	str	r3, [r7, #24]
        break;
 800317c:	e004      	b.n	8003188 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	77bb      	strb	r3, [r7, #30]
        break;
 8003186:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d074      	beq.n	8003278 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	d916      	bls.n	80031d8 <UART_SetConfig+0x404>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d212      	bcs.n	80031d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	89fa      	ldrh	r2, [r7, #14]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	e04f      	b.n	8003278 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	77bb      	strb	r3, [r7, #30]
 80031dc:	e04c      	b.n	8003278 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d828      	bhi.n	8003236 <UART_SetConfig+0x462>
 80031e4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <UART_SetConfig+0x418>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff f828 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e013      	b.n	8003240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff f838 	bl	800228c <HAL_RCC_GetPCLK2Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <UART_SetConfig+0x4c4>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e00c      	b.n	8003240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe ff0b 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 800322a:	61b8      	str	r0, [r7, #24]
        break;
 800322c:	e008      	b.n	8003240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e004      	b.n	8003240 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77bb      	strb	r3, [r7, #30]
        break;
 800323e:	bf00      	nop
    }

    if (pclk != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	085a      	lsrs	r2, r3, #1
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	441a      	add	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d909      	bls.n	8003274 <UART_SetConfig+0x4a0>
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003266:	d205      	bcs.n	8003274 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	e001      	b.n	8003278 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003284:	7fbb      	ldrb	r3, [r7, #30]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40007c00 	.word	0x40007c00
 8003294:	40023800 	.word	0x40023800
 8003298:	00f42400 	.word	0x00f42400

0800329c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01a      	beq.n	80033b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339a:	d10a      	bne.n	80033b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	@ 0x30
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033f0:	f7fd fe70 	bl	80010d4 <HAL_GetTick>
 80033f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d12e      	bne.n	8003462 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f83b 	bl	800348e <UART_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d021      	beq.n	8003462 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	60fb      	str	r3, [r7, #12]
   return(result);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	617b      	str	r3, [r7, #20]
   return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e6      	bne.n	800341e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e011      	b.n	8003486 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3728      	adds	r7, #40	@ 0x28
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349e:	e04f      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d04b      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a8:	f7fd fe14 	bl	80010d4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <UART_WaitOnFlagUntilTimeout+0x30>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e04e      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d037      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b80      	cmp	r3, #128	@ 0x80
 80034d4:	d034      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b40      	cmp	r3, #64	@ 0x40
 80034da:	d031      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d110      	bne.n	800350c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2208      	movs	r2, #8
 80034f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f838 	bl	8003568 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2208      	movs	r2, #8
 80034fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e029      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351a:	d111      	bne.n	8003540 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003524:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f81e 	bl	8003568 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e00f      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	429a      	cmp	r2, r3
 800355c:	d0a0      	beq.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b095      	sub	sp, #84	@ 0x54
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800358e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003590:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800359c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e6      	bne.n	8003570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3308      	adds	r3, #8
 80035c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d118      	bne.n	8003610 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f023 0310 	bic.w	r3, r3, #16
 80035f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6979      	ldr	r1, [r7, #20]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	613b      	str	r3, [r7, #16]
   return(result);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e6      	bne.n	80035de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003624:	bf00      	nop
 8003626:	3754      	adds	r7, #84	@ 0x54
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003630:	b084      	sub	sp, #16
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	f107 001c 	add.w	r0, r7, #28
 800363e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003642:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003646:	2b01      	cmp	r3, #1
 8003648:	d121      	bne.n	800368e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <USB_CoreInit+0xb0>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800366e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa92 	bl	8003bac <USB_CoreReset>
 8003688:	4603      	mov	r3, r0
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e010      	b.n	80036b0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa86 	bl	8003bac <USB_CoreReset>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80036b0:	7fbb      	ldrb	r3, [r7, #30]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10b      	bne.n	80036ce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f043 0206 	orr.w	r2, r3, #6
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036da:	b004      	add	sp, #16
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	ffbdffbf 	.word	0xffbdffbf

080036e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 0201 	bic.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d115      	bne.n	8003754 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003734:	200a      	movs	r0, #10
 8003736:	f7fd fcd9 	bl	80010ec <HAL_Delay>
      ms += 10U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	330a      	adds	r3, #10
 800373e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa25 	bl	8003b90 <USB_GetMode>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d01e      	beq.n	800378a <USB_SetCurrentMode+0x84>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003750:	d9f0      	bls.n	8003734 <USB_SetCurrentMode+0x2e>
 8003752:	e01a      	b.n	800378a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d115      	bne.n	8003786 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003766:	200a      	movs	r0, #10
 8003768:	f7fd fcc0 	bl	80010ec <HAL_Delay>
      ms += 10U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	330a      	adds	r3, #10
 8003770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa0c 	bl	8003b90 <USB_GetMode>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <USB_SetCurrentMode+0x84>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2bc7      	cmp	r3, #199	@ 0xc7
 8003782:	d9f0      	bls.n	8003766 <USB_SetCurrentMode+0x60>
 8003784:	e001      	b.n	800378a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e005      	b.n	8003796 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2bc8      	cmp	r3, #200	@ 0xc8
 800378e:	d101      	bne.n	8003794 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a0:	b084      	sub	sp, #16
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e009      	b.n	80037d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	3340      	adds	r3, #64	@ 0x40
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3301      	adds	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b0e      	cmp	r3, #14
 80037d8:	d9f2      	bls.n	80037c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11c      	bne.n	800381c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e005      	b.n	8003828 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003820:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800382e:	461a      	mov	r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003834:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10d      	bne.n	8003858 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800383c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003844:	2100      	movs	r1, #0
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f968 	bl	8003b1c <USB_SetDevSpeed>
 800384c:	e008      	b.n	8003860 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800384e:	2101      	movs	r1, #1
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f963 	bl	8003b1c <USB_SetDevSpeed>
 8003856:	e003      	b.n	8003860 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003858:	2103      	movs	r1, #3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f95e 	bl	8003b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003860:	2110      	movs	r1, #16
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8fa 	bl	8003a5c <USB_FlushTxFifo>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f924 	bl	8003ac0 <USB_FlushRxFifo>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003888:	461a      	mov	r2, r3
 800388a:	2300      	movs	r3, #0
 800388c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003894:	461a      	mov	r2, r3
 8003896:	2300      	movs	r3, #0
 8003898:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a0:	461a      	mov	r2, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	e043      	b.n	8003934 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038c2:	d118      	bne.n	80038f6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d6:	461a      	mov	r2, r3
 80038d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e013      	b.n	8003908 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ec:	461a      	mov	r2, r3
 80038ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e008      	b.n	8003908 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003902:	461a      	mov	r2, r3
 8003904:	2300      	movs	r3, #0
 8003906:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	2300      	movs	r3, #0
 8003918:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003926:	461a      	mov	r2, r3
 8003928:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800392c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	3301      	adds	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003938:	461a      	mov	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4293      	cmp	r3, r2
 800393e:	d3b5      	bcc.n	80038ac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e043      	b.n	80039ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800395c:	d118      	bne.n	8003990 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003970:	461a      	mov	r2, r3
 8003972:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e013      	b.n	80039a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003986:	461a      	mov	r2, r3
 8003988:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e008      	b.n	80039a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399c:	461a      	mov	r2, r3
 800399e:	2300      	movs	r3, #0
 80039a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	2300      	movs	r3, #0
 80039b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	3301      	adds	r3, #1
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039d2:	461a      	mov	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d3b5      	bcc.n	8003946 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80039fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f043 0210 	orr.w	r2, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	4b0f      	ldr	r3, [pc, #60]	@ (8003a54 <USB_DevInit+0x2b4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f043 0208 	orr.w	r2, r3, #8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <USB_DevInit+0x2b8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a50:	b004      	add	sp, #16
 8003a52:	4770      	bx	lr
 8003a54:	803c3800 	.word	0x803c3800
 8003a58:	40000004 	.word	0x40000004

08003a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a76:	d901      	bls.n	8003a7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e01b      	b.n	8003ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	daf2      	bge.n	8003a6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	019b      	lsls	r3, r3, #6
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003aa0:	d901      	bls.n	8003aa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e006      	b.n	8003ab4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d0f0      	beq.n	8003a94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ad8:	d901      	bls.n	8003ade <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e018      	b.n	8003b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	daf2      	bge.n	8003acc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2210      	movs	r2, #16
 8003aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003afc:	d901      	bls.n	8003b02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e006      	b.n	8003b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d0f0      	beq.n	8003af0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b68:	f023 0303 	bic.w	r3, r3, #3
 8003b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bc4:	d901      	bls.n	8003bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e022      	b.n	8003c10 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	daf2      	bge.n	8003bb8 <USB_CoreReset+0xc>

  count = 10U;
 8003bd2:	230a      	movs	r3, #10
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003bd6:	e002      	b.n	8003bde <USB_CoreReset+0x32>
  {
    count--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f9      	bne.n	8003bd8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f043 0201 	orr.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bfc:	d901      	bls.n	8003c02 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e006      	b.n	8003c10 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d0f0      	beq.n	8003bf0 <USB_CoreReset+0x44>

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <siprintf>:
 8003c1c:	b40e      	push	{r1, r2, r3}
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	b09d      	sub	sp, #116	@ 0x74
 8003c22:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003c24:	9002      	str	r0, [sp, #8]
 8003c26:	9006      	str	r0, [sp, #24]
 8003c28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c2c:	480a      	ldr	r0, [pc, #40]	@ (8003c58 <siprintf+0x3c>)
 8003c2e:	9107      	str	r1, [sp, #28]
 8003c30:	9104      	str	r1, [sp, #16]
 8003c32:	490a      	ldr	r1, [pc, #40]	@ (8003c5c <siprintf+0x40>)
 8003c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c38:	9105      	str	r1, [sp, #20]
 8003c3a:	2400      	movs	r4, #0
 8003c3c:	a902      	add	r1, sp, #8
 8003c3e:	6800      	ldr	r0, [r0, #0]
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003c44:	f000 f9aa 	bl	8003f9c <_svfiprintf_r>
 8003c48:	9b02      	ldr	r3, [sp, #8]
 8003c4a:	701c      	strb	r4, [r3, #0]
 8003c4c:	b01d      	add	sp, #116	@ 0x74
 8003c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c52:	b003      	add	sp, #12
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000000c 	.word	0x2000000c
 8003c5c:	ffff0208 	.word	0xffff0208

08003c60 <memset>:
 8003c60:	4402      	add	r2, r0
 8003c62:	4603      	mov	r3, r0
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d100      	bne.n	8003c6a <memset+0xa>
 8003c68:	4770      	bx	lr
 8003c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6e:	e7f9      	b.n	8003c64 <memset+0x4>

08003c70 <strstr>:
 8003c70:	780a      	ldrb	r2, [r1, #0]
 8003c72:	b570      	push	{r4, r5, r6, lr}
 8003c74:	b96a      	cbnz	r2, 8003c92 <strstr+0x22>
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d109      	bne.n	8003c90 <strstr+0x20>
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	4605      	mov	r5, r0
 8003c80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f6      	beq.n	8003c76 <strstr+0x6>
 8003c88:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003c8c:	429e      	cmp	r6, r3
 8003c8e:	d0f7      	beq.n	8003c80 <strstr+0x10>
 8003c90:	3001      	adds	r0, #1
 8003c92:	7803      	ldrb	r3, [r0, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ef      	bne.n	8003c78 <strstr+0x8>
 8003c98:	4618      	mov	r0, r3
 8003c9a:	e7ec      	b.n	8003c76 <strstr+0x6>

08003c9c <__errno>:
 8003c9c:	4b01      	ldr	r3, [pc, #4]	@ (8003ca4 <__errno+0x8>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	2000000c 	.word	0x2000000c

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4d0d      	ldr	r5, [pc, #52]	@ (8003ce0 <__libc_init_array+0x38>)
 8003cac:	4c0d      	ldr	r4, [pc, #52]	@ (8003ce4 <__libc_init_array+0x3c>)
 8003cae:	1b64      	subs	r4, r4, r5
 8003cb0:	10a4      	asrs	r4, r4, #2
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ce8 <__libc_init_array+0x40>)
 8003cba:	4c0c      	ldr	r4, [pc, #48]	@ (8003cec <__libc_init_array+0x44>)
 8003cbc:	f000 fc64 	bl	8004588 <_init>
 8003cc0:	1b64      	subs	r4, r4, r5
 8003cc2:	10a4      	asrs	r4, r4, #2
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	080046a8 	.word	0x080046a8
 8003ce4:	080046a8 	.word	0x080046a8
 8003ce8:	080046a8 	.word	0x080046a8
 8003cec:	080046ac 	.word	0x080046ac

08003cf0 <__retarget_lock_acquire_recursive>:
 8003cf0:	4770      	bx	lr

08003cf2 <__retarget_lock_release_recursive>:
 8003cf2:	4770      	bx	lr

08003cf4 <_free_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	d041      	beq.n	8003d80 <_free_r+0x8c>
 8003cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d00:	1f0c      	subs	r4, r1, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfb8      	it	lt
 8003d06:	18e4      	addlt	r4, r4, r3
 8003d08:	f000 f8e0 	bl	8003ecc <__malloc_lock>
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003d84 <_free_r+0x90>)
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	b933      	cbnz	r3, 8003d20 <_free_r+0x2c>
 8003d12:	6063      	str	r3, [r4, #4]
 8003d14:	6014      	str	r4, [r2, #0]
 8003d16:	4628      	mov	r0, r5
 8003d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d1c:	f000 b8dc 	b.w	8003ed8 <__malloc_unlock>
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d908      	bls.n	8003d36 <_free_r+0x42>
 8003d24:	6820      	ldr	r0, [r4, #0]
 8003d26:	1821      	adds	r1, r4, r0
 8003d28:	428b      	cmp	r3, r1
 8003d2a:	bf01      	itttt	eq
 8003d2c:	6819      	ldreq	r1, [r3, #0]
 8003d2e:	685b      	ldreq	r3, [r3, #4]
 8003d30:	1809      	addeq	r1, r1, r0
 8003d32:	6021      	streq	r1, [r4, #0]
 8003d34:	e7ed      	b.n	8003d12 <_free_r+0x1e>
 8003d36:	461a      	mov	r2, r3
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	b10b      	cbz	r3, 8003d40 <_free_r+0x4c>
 8003d3c:	42a3      	cmp	r3, r4
 8003d3e:	d9fa      	bls.n	8003d36 <_free_r+0x42>
 8003d40:	6811      	ldr	r1, [r2, #0]
 8003d42:	1850      	adds	r0, r2, r1
 8003d44:	42a0      	cmp	r0, r4
 8003d46:	d10b      	bne.n	8003d60 <_free_r+0x6c>
 8003d48:	6820      	ldr	r0, [r4, #0]
 8003d4a:	4401      	add	r1, r0
 8003d4c:	1850      	adds	r0, r2, r1
 8003d4e:	4283      	cmp	r3, r0
 8003d50:	6011      	str	r1, [r2, #0]
 8003d52:	d1e0      	bne.n	8003d16 <_free_r+0x22>
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	6053      	str	r3, [r2, #4]
 8003d5a:	4408      	add	r0, r1
 8003d5c:	6010      	str	r0, [r2, #0]
 8003d5e:	e7da      	b.n	8003d16 <_free_r+0x22>
 8003d60:	d902      	bls.n	8003d68 <_free_r+0x74>
 8003d62:	230c      	movs	r3, #12
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	e7d6      	b.n	8003d16 <_free_r+0x22>
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	1821      	adds	r1, r4, r0
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	bf04      	itt	eq
 8003d70:	6819      	ldreq	r1, [r3, #0]
 8003d72:	685b      	ldreq	r3, [r3, #4]
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	bf04      	itt	eq
 8003d78:	1809      	addeq	r1, r1, r0
 8003d7a:	6021      	streq	r1, [r4, #0]
 8003d7c:	6054      	str	r4, [r2, #4]
 8003d7e:	e7ca      	b.n	8003d16 <_free_r+0x22>
 8003d80:	bd38      	pop	{r3, r4, r5, pc}
 8003d82:	bf00      	nop
 8003d84:	200007f4 	.word	0x200007f4

08003d88 <sbrk_aligned>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8003dc8 <sbrk_aligned+0x40>)
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	6831      	ldr	r1, [r6, #0]
 8003d90:	4605      	mov	r5, r0
 8003d92:	b911      	cbnz	r1, 8003d9a <sbrk_aligned+0x12>
 8003d94:	f000 fba4 	bl	80044e0 <_sbrk_r>
 8003d98:	6030      	str	r0, [r6, #0]
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f000 fb9f 	bl	80044e0 <_sbrk_r>
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	d103      	bne.n	8003dae <sbrk_aligned+0x26>
 8003da6:	f04f 34ff 	mov.w	r4, #4294967295
 8003daa:	4620      	mov	r0, r4
 8003dac:	bd70      	pop	{r4, r5, r6, pc}
 8003dae:	1cc4      	adds	r4, r0, #3
 8003db0:	f024 0403 	bic.w	r4, r4, #3
 8003db4:	42a0      	cmp	r0, r4
 8003db6:	d0f8      	beq.n	8003daa <sbrk_aligned+0x22>
 8003db8:	1a21      	subs	r1, r4, r0
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 fb90 	bl	80044e0 <_sbrk_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d1f2      	bne.n	8003daa <sbrk_aligned+0x22>
 8003dc4:	e7ef      	b.n	8003da6 <sbrk_aligned+0x1e>
 8003dc6:	bf00      	nop
 8003dc8:	200007f0 	.word	0x200007f0

08003dcc <_malloc_r>:
 8003dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd0:	1ccd      	adds	r5, r1, #3
 8003dd2:	f025 0503 	bic.w	r5, r5, #3
 8003dd6:	3508      	adds	r5, #8
 8003dd8:	2d0c      	cmp	r5, #12
 8003dda:	bf38      	it	cc
 8003ddc:	250c      	movcc	r5, #12
 8003dde:	2d00      	cmp	r5, #0
 8003de0:	4606      	mov	r6, r0
 8003de2:	db01      	blt.n	8003de8 <_malloc_r+0x1c>
 8003de4:	42a9      	cmp	r1, r5
 8003de6:	d904      	bls.n	8003df2 <_malloc_r+0x26>
 8003de8:	230c      	movs	r3, #12
 8003dea:	6033      	str	r3, [r6, #0]
 8003dec:	2000      	movs	r0, #0
 8003dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ec8 <_malloc_r+0xfc>
 8003df6:	f000 f869 	bl	8003ecc <__malloc_lock>
 8003dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8003dfe:	461c      	mov	r4, r3
 8003e00:	bb44      	cbnz	r4, 8003e54 <_malloc_r+0x88>
 8003e02:	4629      	mov	r1, r5
 8003e04:	4630      	mov	r0, r6
 8003e06:	f7ff ffbf 	bl	8003d88 <sbrk_aligned>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	d158      	bne.n	8003ec2 <_malloc_r+0xf6>
 8003e10:	f8d8 4000 	ldr.w	r4, [r8]
 8003e14:	4627      	mov	r7, r4
 8003e16:	2f00      	cmp	r7, #0
 8003e18:	d143      	bne.n	8003ea2 <_malloc_r+0xd6>
 8003e1a:	2c00      	cmp	r4, #0
 8003e1c:	d04b      	beq.n	8003eb6 <_malloc_r+0xea>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	4639      	mov	r1, r7
 8003e22:	4630      	mov	r0, r6
 8003e24:	eb04 0903 	add.w	r9, r4, r3
 8003e28:	f000 fb5a 	bl	80044e0 <_sbrk_r>
 8003e2c:	4581      	cmp	r9, r0
 8003e2e:	d142      	bne.n	8003eb6 <_malloc_r+0xea>
 8003e30:	6821      	ldr	r1, [r4, #0]
 8003e32:	1a6d      	subs	r5, r5, r1
 8003e34:	4629      	mov	r1, r5
 8003e36:	4630      	mov	r0, r6
 8003e38:	f7ff ffa6 	bl	8003d88 <sbrk_aligned>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d03a      	beq.n	8003eb6 <_malloc_r+0xea>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	442b      	add	r3, r5
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	f8d8 3000 	ldr.w	r3, [r8]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	bb62      	cbnz	r2, 8003ea8 <_malloc_r+0xdc>
 8003e4e:	f8c8 7000 	str.w	r7, [r8]
 8003e52:	e00f      	b.n	8003e74 <_malloc_r+0xa8>
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	1b52      	subs	r2, r2, r5
 8003e58:	d420      	bmi.n	8003e9c <_malloc_r+0xd0>
 8003e5a:	2a0b      	cmp	r2, #11
 8003e5c:	d917      	bls.n	8003e8e <_malloc_r+0xc2>
 8003e5e:	1961      	adds	r1, r4, r5
 8003e60:	42a3      	cmp	r3, r4
 8003e62:	6025      	str	r5, [r4, #0]
 8003e64:	bf18      	it	ne
 8003e66:	6059      	strne	r1, [r3, #4]
 8003e68:	6863      	ldr	r3, [r4, #4]
 8003e6a:	bf08      	it	eq
 8003e6c:	f8c8 1000 	streq.w	r1, [r8]
 8003e70:	5162      	str	r2, [r4, r5]
 8003e72:	604b      	str	r3, [r1, #4]
 8003e74:	4630      	mov	r0, r6
 8003e76:	f000 f82f 	bl	8003ed8 <__malloc_unlock>
 8003e7a:	f104 000b 	add.w	r0, r4, #11
 8003e7e:	1d23      	adds	r3, r4, #4
 8003e80:	f020 0007 	bic.w	r0, r0, #7
 8003e84:	1ac2      	subs	r2, r0, r3
 8003e86:	bf1c      	itt	ne
 8003e88:	1a1b      	subne	r3, r3, r0
 8003e8a:	50a3      	strne	r3, [r4, r2]
 8003e8c:	e7af      	b.n	8003dee <_malloc_r+0x22>
 8003e8e:	6862      	ldr	r2, [r4, #4]
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	bf0c      	ite	eq
 8003e94:	f8c8 2000 	streq.w	r2, [r8]
 8003e98:	605a      	strne	r2, [r3, #4]
 8003e9a:	e7eb      	b.n	8003e74 <_malloc_r+0xa8>
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	6864      	ldr	r4, [r4, #4]
 8003ea0:	e7ae      	b.n	8003e00 <_malloc_r+0x34>
 8003ea2:	463c      	mov	r4, r7
 8003ea4:	687f      	ldr	r7, [r7, #4]
 8003ea6:	e7b6      	b.n	8003e16 <_malloc_r+0x4a>
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d1fb      	bne.n	8003ea8 <_malloc_r+0xdc>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6053      	str	r3, [r2, #4]
 8003eb4:	e7de      	b.n	8003e74 <_malloc_r+0xa8>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	6033      	str	r3, [r6, #0]
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f000 f80c 	bl	8003ed8 <__malloc_unlock>
 8003ec0:	e794      	b.n	8003dec <_malloc_r+0x20>
 8003ec2:	6005      	str	r5, [r0, #0]
 8003ec4:	e7d6      	b.n	8003e74 <_malloc_r+0xa8>
 8003ec6:	bf00      	nop
 8003ec8:	200007f4 	.word	0x200007f4

08003ecc <__malloc_lock>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	@ (8003ed4 <__malloc_lock+0x8>)
 8003ece:	f7ff bf0f 	b.w	8003cf0 <__retarget_lock_acquire_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	200007ec 	.word	0x200007ec

08003ed8 <__malloc_unlock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	@ (8003ee0 <__malloc_unlock+0x8>)
 8003eda:	f7ff bf0a 	b.w	8003cf2 <__retarget_lock_release_recursive>
 8003ede:	bf00      	nop
 8003ee0:	200007ec 	.word	0x200007ec

08003ee4 <__ssputs_r>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	688e      	ldr	r6, [r1, #8]
 8003eea:	461f      	mov	r7, r3
 8003eec:	42be      	cmp	r6, r7
 8003eee:	680b      	ldr	r3, [r1, #0]
 8003ef0:	4682      	mov	sl, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	4690      	mov	r8, r2
 8003ef6:	d82d      	bhi.n	8003f54 <__ssputs_r+0x70>
 8003ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003efc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f00:	d026      	beq.n	8003f50 <__ssputs_r+0x6c>
 8003f02:	6965      	ldr	r5, [r4, #20]
 8003f04:	6909      	ldr	r1, [r1, #16]
 8003f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f0a:	eba3 0901 	sub.w	r9, r3, r1
 8003f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f12:	1c7b      	adds	r3, r7, #1
 8003f14:	444b      	add	r3, r9
 8003f16:	106d      	asrs	r5, r5, #1
 8003f18:	429d      	cmp	r5, r3
 8003f1a:	bf38      	it	cc
 8003f1c:	461d      	movcc	r5, r3
 8003f1e:	0553      	lsls	r3, r2, #21
 8003f20:	d527      	bpl.n	8003f72 <__ssputs_r+0x8e>
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7ff ff52 	bl	8003dcc <_malloc_r>
 8003f28:	4606      	mov	r6, r0
 8003f2a:	b360      	cbz	r0, 8003f86 <__ssputs_r+0xa2>
 8003f2c:	6921      	ldr	r1, [r4, #16]
 8003f2e:	464a      	mov	r2, r9
 8003f30:	f000 fae6 	bl	8004500 <memcpy>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	6126      	str	r6, [r4, #16]
 8003f42:	6165      	str	r5, [r4, #20]
 8003f44:	444e      	add	r6, r9
 8003f46:	eba5 0509 	sub.w	r5, r5, r9
 8003f4a:	6026      	str	r6, [r4, #0]
 8003f4c:	60a5      	str	r5, [r4, #8]
 8003f4e:	463e      	mov	r6, r7
 8003f50:	42be      	cmp	r6, r7
 8003f52:	d900      	bls.n	8003f56 <__ssputs_r+0x72>
 8003f54:	463e      	mov	r6, r7
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	4632      	mov	r2, r6
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	f000 faa6 	bl	80044ac <memmove>
 8003f60:	68a3      	ldr	r3, [r4, #8]
 8003f62:	1b9b      	subs	r3, r3, r6
 8003f64:	60a3      	str	r3, [r4, #8]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	4433      	add	r3, r6
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f72:	462a      	mov	r2, r5
 8003f74:	f000 fad2 	bl	800451c <_realloc_r>
 8003f78:	4606      	mov	r6, r0
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d1e0      	bne.n	8003f40 <__ssputs_r+0x5c>
 8003f7e:	6921      	ldr	r1, [r4, #16]
 8003f80:	4650      	mov	r0, sl
 8003f82:	f7ff feb7 	bl	8003cf4 <_free_r>
 8003f86:	230c      	movs	r3, #12
 8003f88:	f8ca 3000 	str.w	r3, [sl]
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e7e9      	b.n	8003f6e <__ssputs_r+0x8a>
	...

08003f9c <_svfiprintf_r>:
 8003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa0:	4698      	mov	r8, r3
 8003fa2:	898b      	ldrh	r3, [r1, #12]
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	b09d      	sub	sp, #116	@ 0x74
 8003fa8:	4607      	mov	r7, r0
 8003faa:	460d      	mov	r5, r1
 8003fac:	4614      	mov	r4, r2
 8003fae:	d510      	bpl.n	8003fd2 <_svfiprintf_r+0x36>
 8003fb0:	690b      	ldr	r3, [r1, #16]
 8003fb2:	b973      	cbnz	r3, 8003fd2 <_svfiprintf_r+0x36>
 8003fb4:	2140      	movs	r1, #64	@ 0x40
 8003fb6:	f7ff ff09 	bl	8003dcc <_malloc_r>
 8003fba:	6028      	str	r0, [r5, #0]
 8003fbc:	6128      	str	r0, [r5, #16]
 8003fbe:	b930      	cbnz	r0, 8003fce <_svfiprintf_r+0x32>
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	b01d      	add	sp, #116	@ 0x74
 8003fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fce:	2340      	movs	r3, #64	@ 0x40
 8003fd0:	616b      	str	r3, [r5, #20]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fd6:	2320      	movs	r3, #32
 8003fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fe0:	2330      	movs	r3, #48	@ 0x30
 8003fe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004180 <_svfiprintf_r+0x1e4>
 8003fe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fea:	f04f 0901 	mov.w	r9, #1
 8003fee:	4623      	mov	r3, r4
 8003ff0:	469a      	mov	sl, r3
 8003ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ff6:	b10a      	cbz	r2, 8003ffc <_svfiprintf_r+0x60>
 8003ff8:	2a25      	cmp	r2, #37	@ 0x25
 8003ffa:	d1f9      	bne.n	8003ff0 <_svfiprintf_r+0x54>
 8003ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8004000:	d00b      	beq.n	800401a <_svfiprintf_r+0x7e>
 8004002:	465b      	mov	r3, fp
 8004004:	4622      	mov	r2, r4
 8004006:	4629      	mov	r1, r5
 8004008:	4638      	mov	r0, r7
 800400a:	f7ff ff6b 	bl	8003ee4 <__ssputs_r>
 800400e:	3001      	adds	r0, #1
 8004010:	f000 80a7 	beq.w	8004162 <_svfiprintf_r+0x1c6>
 8004014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004016:	445a      	add	r2, fp
 8004018:	9209      	str	r2, [sp, #36]	@ 0x24
 800401a:	f89a 3000 	ldrb.w	r3, [sl]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 809f 	beq.w	8004162 <_svfiprintf_r+0x1c6>
 8004024:	2300      	movs	r3, #0
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800402e:	f10a 0a01 	add.w	sl, sl, #1
 8004032:	9304      	str	r3, [sp, #16]
 8004034:	9307      	str	r3, [sp, #28]
 8004036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800403a:	931a      	str	r3, [sp, #104]	@ 0x68
 800403c:	4654      	mov	r4, sl
 800403e:	2205      	movs	r2, #5
 8004040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004044:	484e      	ldr	r0, [pc, #312]	@ (8004180 <_svfiprintf_r+0x1e4>)
 8004046:	f7fc f8eb 	bl	8000220 <memchr>
 800404a:	9a04      	ldr	r2, [sp, #16]
 800404c:	b9d8      	cbnz	r0, 8004086 <_svfiprintf_r+0xea>
 800404e:	06d0      	lsls	r0, r2, #27
 8004050:	bf44      	itt	mi
 8004052:	2320      	movmi	r3, #32
 8004054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004058:	0711      	lsls	r1, r2, #28
 800405a:	bf44      	itt	mi
 800405c:	232b      	movmi	r3, #43	@ 0x2b
 800405e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004062:	f89a 3000 	ldrb.w	r3, [sl]
 8004066:	2b2a      	cmp	r3, #42	@ 0x2a
 8004068:	d015      	beq.n	8004096 <_svfiprintf_r+0xfa>
 800406a:	9a07      	ldr	r2, [sp, #28]
 800406c:	4654      	mov	r4, sl
 800406e:	2000      	movs	r0, #0
 8004070:	f04f 0c0a 	mov.w	ip, #10
 8004074:	4621      	mov	r1, r4
 8004076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800407a:	3b30      	subs	r3, #48	@ 0x30
 800407c:	2b09      	cmp	r3, #9
 800407e:	d94b      	bls.n	8004118 <_svfiprintf_r+0x17c>
 8004080:	b1b0      	cbz	r0, 80040b0 <_svfiprintf_r+0x114>
 8004082:	9207      	str	r2, [sp, #28]
 8004084:	e014      	b.n	80040b0 <_svfiprintf_r+0x114>
 8004086:	eba0 0308 	sub.w	r3, r0, r8
 800408a:	fa09 f303 	lsl.w	r3, r9, r3
 800408e:	4313      	orrs	r3, r2
 8004090:	9304      	str	r3, [sp, #16]
 8004092:	46a2      	mov	sl, r4
 8004094:	e7d2      	b.n	800403c <_svfiprintf_r+0xa0>
 8004096:	9b03      	ldr	r3, [sp, #12]
 8004098:	1d19      	adds	r1, r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	9103      	str	r1, [sp, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bfbb      	ittet	lt
 80040a2:	425b      	neglt	r3, r3
 80040a4:	f042 0202 	orrlt.w	r2, r2, #2
 80040a8:	9307      	strge	r3, [sp, #28]
 80040aa:	9307      	strlt	r3, [sp, #28]
 80040ac:	bfb8      	it	lt
 80040ae:	9204      	strlt	r2, [sp, #16]
 80040b0:	7823      	ldrb	r3, [r4, #0]
 80040b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80040b4:	d10a      	bne.n	80040cc <_svfiprintf_r+0x130>
 80040b6:	7863      	ldrb	r3, [r4, #1]
 80040b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ba:	d132      	bne.n	8004122 <_svfiprintf_r+0x186>
 80040bc:	9b03      	ldr	r3, [sp, #12]
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	9203      	str	r2, [sp, #12]
 80040c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040c8:	3402      	adds	r4, #2
 80040ca:	9305      	str	r3, [sp, #20]
 80040cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004190 <_svfiprintf_r+0x1f4>
 80040d0:	7821      	ldrb	r1, [r4, #0]
 80040d2:	2203      	movs	r2, #3
 80040d4:	4650      	mov	r0, sl
 80040d6:	f7fc f8a3 	bl	8000220 <memchr>
 80040da:	b138      	cbz	r0, 80040ec <_svfiprintf_r+0x150>
 80040dc:	9b04      	ldr	r3, [sp, #16]
 80040de:	eba0 000a 	sub.w	r0, r0, sl
 80040e2:	2240      	movs	r2, #64	@ 0x40
 80040e4:	4082      	lsls	r2, r0
 80040e6:	4313      	orrs	r3, r2
 80040e8:	3401      	adds	r4, #1
 80040ea:	9304      	str	r3, [sp, #16]
 80040ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f0:	4824      	ldr	r0, [pc, #144]	@ (8004184 <_svfiprintf_r+0x1e8>)
 80040f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040f6:	2206      	movs	r2, #6
 80040f8:	f7fc f892 	bl	8000220 <memchr>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d036      	beq.n	800416e <_svfiprintf_r+0x1d2>
 8004100:	4b21      	ldr	r3, [pc, #132]	@ (8004188 <_svfiprintf_r+0x1ec>)
 8004102:	bb1b      	cbnz	r3, 800414c <_svfiprintf_r+0x1b0>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	3307      	adds	r3, #7
 8004108:	f023 0307 	bic.w	r3, r3, #7
 800410c:	3308      	adds	r3, #8
 800410e:	9303      	str	r3, [sp, #12]
 8004110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004112:	4433      	add	r3, r6
 8004114:	9309      	str	r3, [sp, #36]	@ 0x24
 8004116:	e76a      	b.n	8003fee <_svfiprintf_r+0x52>
 8004118:	fb0c 3202 	mla	r2, ip, r2, r3
 800411c:	460c      	mov	r4, r1
 800411e:	2001      	movs	r0, #1
 8004120:	e7a8      	b.n	8004074 <_svfiprintf_r+0xd8>
 8004122:	2300      	movs	r3, #0
 8004124:	3401      	adds	r4, #1
 8004126:	9305      	str	r3, [sp, #20]
 8004128:	4619      	mov	r1, r3
 800412a:	f04f 0c0a 	mov.w	ip, #10
 800412e:	4620      	mov	r0, r4
 8004130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004134:	3a30      	subs	r2, #48	@ 0x30
 8004136:	2a09      	cmp	r2, #9
 8004138:	d903      	bls.n	8004142 <_svfiprintf_r+0x1a6>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0c6      	beq.n	80040cc <_svfiprintf_r+0x130>
 800413e:	9105      	str	r1, [sp, #20]
 8004140:	e7c4      	b.n	80040cc <_svfiprintf_r+0x130>
 8004142:	fb0c 2101 	mla	r1, ip, r1, r2
 8004146:	4604      	mov	r4, r0
 8004148:	2301      	movs	r3, #1
 800414a:	e7f0      	b.n	800412e <_svfiprintf_r+0x192>
 800414c:	ab03      	add	r3, sp, #12
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	462a      	mov	r2, r5
 8004152:	4b0e      	ldr	r3, [pc, #56]	@ (800418c <_svfiprintf_r+0x1f0>)
 8004154:	a904      	add	r1, sp, #16
 8004156:	4638      	mov	r0, r7
 8004158:	f3af 8000 	nop.w
 800415c:	1c42      	adds	r2, r0, #1
 800415e:	4606      	mov	r6, r0
 8004160:	d1d6      	bne.n	8004110 <_svfiprintf_r+0x174>
 8004162:	89ab      	ldrh	r3, [r5, #12]
 8004164:	065b      	lsls	r3, r3, #25
 8004166:	f53f af2d 	bmi.w	8003fc4 <_svfiprintf_r+0x28>
 800416a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800416c:	e72c      	b.n	8003fc8 <_svfiprintf_r+0x2c>
 800416e:	ab03      	add	r3, sp, #12
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	462a      	mov	r2, r5
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <_svfiprintf_r+0x1f0>)
 8004176:	a904      	add	r1, sp, #16
 8004178:	4638      	mov	r0, r7
 800417a:	f000 f879 	bl	8004270 <_printf_i>
 800417e:	e7ed      	b.n	800415c <_svfiprintf_r+0x1c0>
 8004180:	0800466c 	.word	0x0800466c
 8004184:	08004676 	.word	0x08004676
 8004188:	00000000 	.word	0x00000000
 800418c:	08003ee5 	.word	0x08003ee5
 8004190:	08004672 	.word	0x08004672

08004194 <_printf_common>:
 8004194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	4616      	mov	r6, r2
 800419a:	4698      	mov	r8, r3
 800419c:	688a      	ldr	r2, [r1, #8]
 800419e:	690b      	ldr	r3, [r1, #16]
 80041a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041a4:	4293      	cmp	r3, r2
 80041a6:	bfb8      	it	lt
 80041a8:	4613      	movlt	r3, r2
 80041aa:	6033      	str	r3, [r6, #0]
 80041ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041b0:	4607      	mov	r7, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	b10a      	cbz	r2, 80041ba <_printf_common+0x26>
 80041b6:	3301      	adds	r3, #1
 80041b8:	6033      	str	r3, [r6, #0]
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	0699      	lsls	r1, r3, #26
 80041be:	bf42      	ittt	mi
 80041c0:	6833      	ldrmi	r3, [r6, #0]
 80041c2:	3302      	addmi	r3, #2
 80041c4:	6033      	strmi	r3, [r6, #0]
 80041c6:	6825      	ldr	r5, [r4, #0]
 80041c8:	f015 0506 	ands.w	r5, r5, #6
 80041cc:	d106      	bne.n	80041dc <_printf_common+0x48>
 80041ce:	f104 0a19 	add.w	sl, r4, #25
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	6832      	ldr	r2, [r6, #0]
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	42ab      	cmp	r3, r5
 80041da:	dc26      	bgt.n	800422a <_printf_common+0x96>
 80041dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	3b00      	subs	r3, #0
 80041e4:	bf18      	it	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	0692      	lsls	r2, r2, #26
 80041ea:	d42b      	bmi.n	8004244 <_printf_common+0xb0>
 80041ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041f0:	4641      	mov	r1, r8
 80041f2:	4638      	mov	r0, r7
 80041f4:	47c8      	blx	r9
 80041f6:	3001      	adds	r0, #1
 80041f8:	d01e      	beq.n	8004238 <_printf_common+0xa4>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	6922      	ldr	r2, [r4, #16]
 80041fe:	f003 0306 	and.w	r3, r3, #6
 8004202:	2b04      	cmp	r3, #4
 8004204:	bf02      	ittt	eq
 8004206:	68e5      	ldreq	r5, [r4, #12]
 8004208:	6833      	ldreq	r3, [r6, #0]
 800420a:	1aed      	subeq	r5, r5, r3
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	bf0c      	ite	eq
 8004210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004214:	2500      	movne	r5, #0
 8004216:	4293      	cmp	r3, r2
 8004218:	bfc4      	itt	gt
 800421a:	1a9b      	subgt	r3, r3, r2
 800421c:	18ed      	addgt	r5, r5, r3
 800421e:	2600      	movs	r6, #0
 8004220:	341a      	adds	r4, #26
 8004222:	42b5      	cmp	r5, r6
 8004224:	d11a      	bne.n	800425c <_printf_common+0xc8>
 8004226:	2000      	movs	r0, #0
 8004228:	e008      	b.n	800423c <_printf_common+0xa8>
 800422a:	2301      	movs	r3, #1
 800422c:	4652      	mov	r2, sl
 800422e:	4641      	mov	r1, r8
 8004230:	4638      	mov	r0, r7
 8004232:	47c8      	blx	r9
 8004234:	3001      	adds	r0, #1
 8004236:	d103      	bne.n	8004240 <_printf_common+0xac>
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004240:	3501      	adds	r5, #1
 8004242:	e7c6      	b.n	80041d2 <_printf_common+0x3e>
 8004244:	18e1      	adds	r1, r4, r3
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	2030      	movs	r0, #48	@ 0x30
 800424a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800424e:	4422      	add	r2, r4
 8004250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004258:	3302      	adds	r3, #2
 800425a:	e7c7      	b.n	80041ec <_printf_common+0x58>
 800425c:	2301      	movs	r3, #1
 800425e:	4622      	mov	r2, r4
 8004260:	4641      	mov	r1, r8
 8004262:	4638      	mov	r0, r7
 8004264:	47c8      	blx	r9
 8004266:	3001      	adds	r0, #1
 8004268:	d0e6      	beq.n	8004238 <_printf_common+0xa4>
 800426a:	3601      	adds	r6, #1
 800426c:	e7d9      	b.n	8004222 <_printf_common+0x8e>
	...

08004270 <_printf_i>:
 8004270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004274:	7e0f      	ldrb	r7, [r1, #24]
 8004276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004278:	2f78      	cmp	r7, #120	@ 0x78
 800427a:	4691      	mov	r9, r2
 800427c:	4680      	mov	r8, r0
 800427e:	460c      	mov	r4, r1
 8004280:	469a      	mov	sl, r3
 8004282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004286:	d807      	bhi.n	8004298 <_printf_i+0x28>
 8004288:	2f62      	cmp	r7, #98	@ 0x62
 800428a:	d80a      	bhi.n	80042a2 <_printf_i+0x32>
 800428c:	2f00      	cmp	r7, #0
 800428e:	f000 80d1 	beq.w	8004434 <_printf_i+0x1c4>
 8004292:	2f58      	cmp	r7, #88	@ 0x58
 8004294:	f000 80b8 	beq.w	8004408 <_printf_i+0x198>
 8004298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800429c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042a0:	e03a      	b.n	8004318 <_printf_i+0xa8>
 80042a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042a6:	2b15      	cmp	r3, #21
 80042a8:	d8f6      	bhi.n	8004298 <_printf_i+0x28>
 80042aa:	a101      	add	r1, pc, #4	@ (adr r1, 80042b0 <_printf_i+0x40>)
 80042ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042b0:	08004309 	.word	0x08004309
 80042b4:	0800431d 	.word	0x0800431d
 80042b8:	08004299 	.word	0x08004299
 80042bc:	08004299 	.word	0x08004299
 80042c0:	08004299 	.word	0x08004299
 80042c4:	08004299 	.word	0x08004299
 80042c8:	0800431d 	.word	0x0800431d
 80042cc:	08004299 	.word	0x08004299
 80042d0:	08004299 	.word	0x08004299
 80042d4:	08004299 	.word	0x08004299
 80042d8:	08004299 	.word	0x08004299
 80042dc:	0800441b 	.word	0x0800441b
 80042e0:	08004347 	.word	0x08004347
 80042e4:	080043d5 	.word	0x080043d5
 80042e8:	08004299 	.word	0x08004299
 80042ec:	08004299 	.word	0x08004299
 80042f0:	0800443d 	.word	0x0800443d
 80042f4:	08004299 	.word	0x08004299
 80042f8:	08004347 	.word	0x08004347
 80042fc:	08004299 	.word	0x08004299
 8004300:	08004299 	.word	0x08004299
 8004304:	080043dd 	.word	0x080043dd
 8004308:	6833      	ldr	r3, [r6, #0]
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6032      	str	r2, [r6, #0]
 8004310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004318:	2301      	movs	r3, #1
 800431a:	e09c      	b.n	8004456 <_printf_i+0x1e6>
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	6820      	ldr	r0, [r4, #0]
 8004320:	1d19      	adds	r1, r3, #4
 8004322:	6031      	str	r1, [r6, #0]
 8004324:	0606      	lsls	r6, r0, #24
 8004326:	d501      	bpl.n	800432c <_printf_i+0xbc>
 8004328:	681d      	ldr	r5, [r3, #0]
 800432a:	e003      	b.n	8004334 <_printf_i+0xc4>
 800432c:	0645      	lsls	r5, r0, #25
 800432e:	d5fb      	bpl.n	8004328 <_printf_i+0xb8>
 8004330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004334:	2d00      	cmp	r5, #0
 8004336:	da03      	bge.n	8004340 <_printf_i+0xd0>
 8004338:	232d      	movs	r3, #45	@ 0x2d
 800433a:	426d      	negs	r5, r5
 800433c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004340:	4858      	ldr	r0, [pc, #352]	@ (80044a4 <_printf_i+0x234>)
 8004342:	230a      	movs	r3, #10
 8004344:	e011      	b.n	800436a <_printf_i+0xfa>
 8004346:	6821      	ldr	r1, [r4, #0]
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	0608      	lsls	r0, r1, #24
 800434c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004350:	d402      	bmi.n	8004358 <_printf_i+0xe8>
 8004352:	0649      	lsls	r1, r1, #25
 8004354:	bf48      	it	mi
 8004356:	b2ad      	uxthmi	r5, r5
 8004358:	2f6f      	cmp	r7, #111	@ 0x6f
 800435a:	4852      	ldr	r0, [pc, #328]	@ (80044a4 <_printf_i+0x234>)
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	bf14      	ite	ne
 8004360:	230a      	movne	r3, #10
 8004362:	2308      	moveq	r3, #8
 8004364:	2100      	movs	r1, #0
 8004366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800436a:	6866      	ldr	r6, [r4, #4]
 800436c:	60a6      	str	r6, [r4, #8]
 800436e:	2e00      	cmp	r6, #0
 8004370:	db05      	blt.n	800437e <_printf_i+0x10e>
 8004372:	6821      	ldr	r1, [r4, #0]
 8004374:	432e      	orrs	r6, r5
 8004376:	f021 0104 	bic.w	r1, r1, #4
 800437a:	6021      	str	r1, [r4, #0]
 800437c:	d04b      	beq.n	8004416 <_printf_i+0x1a6>
 800437e:	4616      	mov	r6, r2
 8004380:	fbb5 f1f3 	udiv	r1, r5, r3
 8004384:	fb03 5711 	mls	r7, r3, r1, r5
 8004388:	5dc7      	ldrb	r7, [r0, r7]
 800438a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800438e:	462f      	mov	r7, r5
 8004390:	42bb      	cmp	r3, r7
 8004392:	460d      	mov	r5, r1
 8004394:	d9f4      	bls.n	8004380 <_printf_i+0x110>
 8004396:	2b08      	cmp	r3, #8
 8004398:	d10b      	bne.n	80043b2 <_printf_i+0x142>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	07df      	lsls	r7, r3, #31
 800439e:	d508      	bpl.n	80043b2 <_printf_i+0x142>
 80043a0:	6923      	ldr	r3, [r4, #16]
 80043a2:	6861      	ldr	r1, [r4, #4]
 80043a4:	4299      	cmp	r1, r3
 80043a6:	bfde      	ittt	le
 80043a8:	2330      	movle	r3, #48	@ 0x30
 80043aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043b2:	1b92      	subs	r2, r2, r6
 80043b4:	6122      	str	r2, [r4, #16]
 80043b6:	f8cd a000 	str.w	sl, [sp]
 80043ba:	464b      	mov	r3, r9
 80043bc:	aa03      	add	r2, sp, #12
 80043be:	4621      	mov	r1, r4
 80043c0:	4640      	mov	r0, r8
 80043c2:	f7ff fee7 	bl	8004194 <_printf_common>
 80043c6:	3001      	adds	r0, #1
 80043c8:	d14a      	bne.n	8004460 <_printf_i+0x1f0>
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295
 80043ce:	b004      	add	sp, #16
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	f043 0320 	orr.w	r3, r3, #32
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	4832      	ldr	r0, [pc, #200]	@ (80044a8 <_printf_i+0x238>)
 80043de:	2778      	movs	r7, #120	@ 0x78
 80043e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	6831      	ldr	r1, [r6, #0]
 80043e8:	061f      	lsls	r7, r3, #24
 80043ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80043ee:	d402      	bmi.n	80043f6 <_printf_i+0x186>
 80043f0:	065f      	lsls	r7, r3, #25
 80043f2:	bf48      	it	mi
 80043f4:	b2ad      	uxthmi	r5, r5
 80043f6:	6031      	str	r1, [r6, #0]
 80043f8:	07d9      	lsls	r1, r3, #31
 80043fa:	bf44      	itt	mi
 80043fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004400:	6023      	strmi	r3, [r4, #0]
 8004402:	b11d      	cbz	r5, 800440c <_printf_i+0x19c>
 8004404:	2310      	movs	r3, #16
 8004406:	e7ad      	b.n	8004364 <_printf_i+0xf4>
 8004408:	4826      	ldr	r0, [pc, #152]	@ (80044a4 <_printf_i+0x234>)
 800440a:	e7e9      	b.n	80043e0 <_printf_i+0x170>
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	f023 0320 	bic.w	r3, r3, #32
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	e7f6      	b.n	8004404 <_printf_i+0x194>
 8004416:	4616      	mov	r6, r2
 8004418:	e7bd      	b.n	8004396 <_printf_i+0x126>
 800441a:	6833      	ldr	r3, [r6, #0]
 800441c:	6825      	ldr	r5, [r4, #0]
 800441e:	6961      	ldr	r1, [r4, #20]
 8004420:	1d18      	adds	r0, r3, #4
 8004422:	6030      	str	r0, [r6, #0]
 8004424:	062e      	lsls	r6, r5, #24
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	d501      	bpl.n	800442e <_printf_i+0x1be>
 800442a:	6019      	str	r1, [r3, #0]
 800442c:	e002      	b.n	8004434 <_printf_i+0x1c4>
 800442e:	0668      	lsls	r0, r5, #25
 8004430:	d5fb      	bpl.n	800442a <_printf_i+0x1ba>
 8004432:	8019      	strh	r1, [r3, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	6123      	str	r3, [r4, #16]
 8004438:	4616      	mov	r6, r2
 800443a:	e7bc      	b.n	80043b6 <_printf_i+0x146>
 800443c:	6833      	ldr	r3, [r6, #0]
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	6032      	str	r2, [r6, #0]
 8004442:	681e      	ldr	r6, [r3, #0]
 8004444:	6862      	ldr	r2, [r4, #4]
 8004446:	2100      	movs	r1, #0
 8004448:	4630      	mov	r0, r6
 800444a:	f7fb fee9 	bl	8000220 <memchr>
 800444e:	b108      	cbz	r0, 8004454 <_printf_i+0x1e4>
 8004450:	1b80      	subs	r0, r0, r6
 8004452:	6060      	str	r0, [r4, #4]
 8004454:	6863      	ldr	r3, [r4, #4]
 8004456:	6123      	str	r3, [r4, #16]
 8004458:	2300      	movs	r3, #0
 800445a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800445e:	e7aa      	b.n	80043b6 <_printf_i+0x146>
 8004460:	6923      	ldr	r3, [r4, #16]
 8004462:	4632      	mov	r2, r6
 8004464:	4649      	mov	r1, r9
 8004466:	4640      	mov	r0, r8
 8004468:	47d0      	blx	sl
 800446a:	3001      	adds	r0, #1
 800446c:	d0ad      	beq.n	80043ca <_printf_i+0x15a>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	079b      	lsls	r3, r3, #30
 8004472:	d413      	bmi.n	800449c <_printf_i+0x22c>
 8004474:	68e0      	ldr	r0, [r4, #12]
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	4298      	cmp	r0, r3
 800447a:	bfb8      	it	lt
 800447c:	4618      	movlt	r0, r3
 800447e:	e7a6      	b.n	80043ce <_printf_i+0x15e>
 8004480:	2301      	movs	r3, #1
 8004482:	4632      	mov	r2, r6
 8004484:	4649      	mov	r1, r9
 8004486:	4640      	mov	r0, r8
 8004488:	47d0      	blx	sl
 800448a:	3001      	adds	r0, #1
 800448c:	d09d      	beq.n	80043ca <_printf_i+0x15a>
 800448e:	3501      	adds	r5, #1
 8004490:	68e3      	ldr	r3, [r4, #12]
 8004492:	9903      	ldr	r1, [sp, #12]
 8004494:	1a5b      	subs	r3, r3, r1
 8004496:	42ab      	cmp	r3, r5
 8004498:	dcf2      	bgt.n	8004480 <_printf_i+0x210>
 800449a:	e7eb      	b.n	8004474 <_printf_i+0x204>
 800449c:	2500      	movs	r5, #0
 800449e:	f104 0619 	add.w	r6, r4, #25
 80044a2:	e7f5      	b.n	8004490 <_printf_i+0x220>
 80044a4:	0800467d 	.word	0x0800467d
 80044a8:	0800468e 	.word	0x0800468e

080044ac <memmove>:
 80044ac:	4288      	cmp	r0, r1
 80044ae:	b510      	push	{r4, lr}
 80044b0:	eb01 0402 	add.w	r4, r1, r2
 80044b4:	d902      	bls.n	80044bc <memmove+0x10>
 80044b6:	4284      	cmp	r4, r0
 80044b8:	4623      	mov	r3, r4
 80044ba:	d807      	bhi.n	80044cc <memmove+0x20>
 80044bc:	1e43      	subs	r3, r0, #1
 80044be:	42a1      	cmp	r1, r4
 80044c0:	d008      	beq.n	80044d4 <memmove+0x28>
 80044c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ca:	e7f8      	b.n	80044be <memmove+0x12>
 80044cc:	4402      	add	r2, r0
 80044ce:	4601      	mov	r1, r0
 80044d0:	428a      	cmp	r2, r1
 80044d2:	d100      	bne.n	80044d6 <memmove+0x2a>
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044de:	e7f7      	b.n	80044d0 <memmove+0x24>

080044e0 <_sbrk_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4d06      	ldr	r5, [pc, #24]	@ (80044fc <_sbrk_r+0x1c>)
 80044e4:	2300      	movs	r3, #0
 80044e6:	4604      	mov	r4, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	602b      	str	r3, [r5, #0]
 80044ec:	f7fc fb82 	bl	8000bf4 <_sbrk>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_sbrk_r+0x1a>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_sbrk_r+0x1a>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	200007e8 	.word	0x200007e8

08004500 <memcpy>:
 8004500:	440a      	add	r2, r1
 8004502:	4291      	cmp	r1, r2
 8004504:	f100 33ff 	add.w	r3, r0, #4294967295
 8004508:	d100      	bne.n	800450c <memcpy+0xc>
 800450a:	4770      	bx	lr
 800450c:	b510      	push	{r4, lr}
 800450e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004516:	4291      	cmp	r1, r2
 8004518:	d1f9      	bne.n	800450e <memcpy+0xe>
 800451a:	bd10      	pop	{r4, pc}

0800451c <_realloc_r>:
 800451c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004520:	4607      	mov	r7, r0
 8004522:	4614      	mov	r4, r2
 8004524:	460d      	mov	r5, r1
 8004526:	b921      	cbnz	r1, 8004532 <_realloc_r+0x16>
 8004528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800452c:	4611      	mov	r1, r2
 800452e:	f7ff bc4d 	b.w	8003dcc <_malloc_r>
 8004532:	b92a      	cbnz	r2, 8004540 <_realloc_r+0x24>
 8004534:	f7ff fbde 	bl	8003cf4 <_free_r>
 8004538:	4625      	mov	r5, r4
 800453a:	4628      	mov	r0, r5
 800453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004540:	f000 f81a 	bl	8004578 <_malloc_usable_size_r>
 8004544:	4284      	cmp	r4, r0
 8004546:	4606      	mov	r6, r0
 8004548:	d802      	bhi.n	8004550 <_realloc_r+0x34>
 800454a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800454e:	d8f4      	bhi.n	800453a <_realloc_r+0x1e>
 8004550:	4621      	mov	r1, r4
 8004552:	4638      	mov	r0, r7
 8004554:	f7ff fc3a 	bl	8003dcc <_malloc_r>
 8004558:	4680      	mov	r8, r0
 800455a:	b908      	cbnz	r0, 8004560 <_realloc_r+0x44>
 800455c:	4645      	mov	r5, r8
 800455e:	e7ec      	b.n	800453a <_realloc_r+0x1e>
 8004560:	42b4      	cmp	r4, r6
 8004562:	4622      	mov	r2, r4
 8004564:	4629      	mov	r1, r5
 8004566:	bf28      	it	cs
 8004568:	4632      	movcs	r2, r6
 800456a:	f7ff ffc9 	bl	8004500 <memcpy>
 800456e:	4629      	mov	r1, r5
 8004570:	4638      	mov	r0, r7
 8004572:	f7ff fbbf 	bl	8003cf4 <_free_r>
 8004576:	e7f1      	b.n	800455c <_realloc_r+0x40>

08004578 <_malloc_usable_size_r>:
 8004578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800457c:	1f18      	subs	r0, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	bfbc      	itt	lt
 8004582:	580b      	ldrlt	r3, [r1, r0]
 8004584:	18c0      	addlt	r0, r0, r3
 8004586:	4770      	bx	lr

08004588 <_init>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr

08004594 <_fini>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr
