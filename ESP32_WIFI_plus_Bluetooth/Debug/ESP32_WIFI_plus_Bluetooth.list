
ESP32_WIFI_plus_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  0000719c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005638  08005638  0000719c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005638  08005638  00006638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005640  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  0800569c  0000705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  0800573c  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a0  2000019c  080057dc  0000719c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a3c  080057dc  00007a3c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000719c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014b4b  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002938  00000000  00000000  0001bd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001050  00000000  00000000  0001e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ca7  00000000  00000000  0001f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000271e2  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001467b  00000000  00000000  00047529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef995  00000000  00000000  0005bba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014b539  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004a28  00000000  00000000  0014b57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  0014ffa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005410 	.word	0x08005410

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	08005410 	.word	0x08005410

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <ESP_SendCmd>:

uint8_t b;

// Function to send AT command to ESP32 via UART6
HAL_StatusTypeDef ESP_SendCmd(const char *cmd, uint32_t timeout)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0c6      	sub	sp, #280	@ 0x118
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005fa:	6018      	str	r0, [r3, #0]
 80005fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000600:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000604:	6019      	str	r1, [r3, #0]

	    // 2) Echo the exact command we’re about to send to the PC (so you can see it)
	    HAL_UART_Transmit(&huart3, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000606:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800060a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	f7ff fdfe 	bl	8000210 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800061c:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	6809      	ldr	r1, [r1, #0]
 8000626:	4834      	ldr	r0, [pc, #208]	@ (80006f8 <ESP_SendCmd+0x10c>)
 8000628:	f003 f9b8 	bl	800399c <HAL_UART_Transmit>

	    // 3) Send the AT command over UART6 to the ESP32
	    HAL_UART_Transmit(&huart6, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 800062c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000630:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29a      	uxth	r2, r3
 800063e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000642:	f5a3 718a 	sub.w	r1, r3, #276	@ 0x114
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	6809      	ldr	r1, [r1, #0]
 800064c:	482b      	ldr	r0, [pc, #172]	@ (80006fc <ESP_SendCmd+0x110>)
 800064e:	f003 f9a5 	bl	800399c <HAL_UART_Transmit>

	    // 4) Now collect *all* bytes the ESP32 replies with (up to `timeout`) into a buffer
	    uint32_t start = HAL_GetTick();
 8000652:	f000 ffa3 	bl	800159c <HAL_GetTick>
 8000656:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	    uint8_t  respBuf[256];
	    size_t   rlen = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	    while ((HAL_GetTick() - start) < timeout && rlen < sizeof(respBuf)-1) {
 8000660:	e01c      	b.n	800069c <ESP_SendCmd+0xb0>
	        uint8_t c;
	        // give each byte up to 20 ms to arrive
	        if (HAL_UART_Receive(&huart6, &c, 1, 20) == HAL_OK) {
 8000662:	f107 010f 	add.w	r1, r7, #15
 8000666:	2314      	movs	r3, #20
 8000668:	2201      	movs	r2, #1
 800066a:	4824      	ldr	r0, [pc, #144]	@ (80006fc <ESP_SendCmd+0x110>)
 800066c:	f003 fa1f 	bl	8003aae <HAL_UART_Receive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d112      	bne.n	800069c <ESP_SendCmd+0xb0>
	            respBuf[rlen++] = c;
 8000676:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8000680:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000684:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8000688:	7811      	ldrb	r1, [r2, #0]
 800068a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800068e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000692:	54d1      	strb	r1, [r2, r3]
	            start = HAL_GetTick();  // reset our timeout on each new byte
 8000694:	f000 ff82 	bl	800159c <HAL_GetTick>
 8000698:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	    while ((HAL_GetTick() - start) < timeout && rlen < sizeof(respBuf)-1) {
 800069c:	f000 ff7e 	bl	800159c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80006ac:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d903      	bls.n	80006be <ESP_SendCmd+0xd2>
 80006b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80006ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80006bc:	d9d1      	bls.n	8000662 <ESP_SendCmd+0x76>
	        }
	    }
	    respBuf[rlen] = '\0';
 80006be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006c2:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80006c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80006ca:	4413      	add	r3, r2
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]

	    // 5) Dump the *entire* response back to the PC in one go
	    if (rlen) {
 80006d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d009      	beq.n	80006ec <ESP_SendCmd+0x100>
	        HAL_UART_Transmit(&huart3, respBuf, rlen, HAL_MAX_DELAY);
 80006d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f107 0110 	add.w	r1, r7, #16
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <ESP_SendCmd+0x10c>)
 80006e8:	f003 f958 	bl	800399c <HAL_UART_Transmit>
	    }
	    return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200002f4 	.word	0x200002f4
 80006fc:	2000037c 	.word	0x2000037c

08000700 <ESP_ReadResponse>:

// Function to read response from ESP32
void ESP_ReadResponse(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0c0      	sub	sp, #256	@ 0x100
 8000704:	af00      	add	r7, sp, #0
    uint8_t rx_buf[256] = {0};
 8000706:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800070a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800070e:	4618      	mov	r0, r3
 8000710:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000714:	461a      	mov	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f004 f9d8 	bl	8004acc <memset>
    HAL_UART_Receive(&huart6, rx_buf, sizeof(rx_buf), 1000);
 800071c:	4639      	mov	r1, r7
 800071e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000726:	480a      	ldr	r0, [pc, #40]	@ (8000750 <ESP_ReadResponse+0x50>)
 8000728:	f003 f9c1 	bl	8003aae <HAL_UART_Receive>
    HAL_UART_Transmit(&huart3, rx_buf, strlen((char *)rx_buf), 1000);
 800072c:	463b      	mov	r3, r7
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fd6e 	bl	8000210 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	4639      	mov	r1, r7
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <ESP_ReadResponse+0x54>)
 8000740:	f003 f92c 	bl	800399c <HAL_UART_Transmit>
}
 8000744:	bf00      	nop
 8000746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000037c 	.word	0x2000037c
 8000754:	200002f4 	.word	0x200002f4

08000758 <ESP_BT_StartScan>:
    ESP_ReadResponse();
}

// ESP32 Bluetooth scan başlatma
void ESP_BT_StartScan(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    ESP_SendCmd("AT+BTSCAN=1,5\r\n", 3000);  // 1 = Inquiry scan, 1 = enable
 800075c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <ESP_BT_StartScan+0x18>)
 8000762:	f7ff ff43 	bl	80005ec <ESP_SendCmd>
    ESP_ReadResponse(); // tarama sonucu gelen cihazlar burada listelenir
 8000766:	f7ff ffcb 	bl	8000700 <ESP_ReadResponse>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	0800543c 	.word	0x0800543c

08000774 <ESP32_Bluetooth_Init>:


// Initializes Bluetooth module through ESP32 AT commands
void ESP32_Bluetooth_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

	// 1) Basic AT check
	    ESP_SendCmd("AT\r\n",  500);
 8000778:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800077c:	4826      	ldr	r0, [pc, #152]	@ (8000818 <ESP32_Bluetooth_Init+0xa4>)
 800077e:	f7ff ff35 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 8000782:	f7ff ffbd 	bl	8000700 <ESP_ReadResponse>


	    // <---------- If you configure first time run this part otherwise NOT NEEDED------>
	    // 2) Init BT

    	ESP_SendCmd("AT+BTINIT=1\r\n", 500);
 8000786:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800078a:	4824      	ldr	r0, [pc, #144]	@ (800081c <ESP32_Bluetooth_Init+0xa8>)
 800078c:	f7ff ff2e 	bl	80005ec <ESP_SendCmd>
    	ESP_ReadResponse();
 8000790:	f7ff ffb6 	bl	8000700 <ESP_ReadResponse>

	    ESP_SendCmd("AT+BTINIT?\r\n", 500);
 8000794:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000798:	4821      	ldr	r0, [pc, #132]	@ (8000820 <ESP32_Bluetooth_Init+0xac>)
 800079a:	f7ff ff27 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 800079e:	f7ff ffaf 	bl	8000700 <ESP_ReadResponse>


	    // 3) Give it a friendly name
	    ESP_SendCmd("AT+BTNAME=\"ESP32_Bluetooth\"\r\n", 500);
 80007a2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007a6:	481f      	ldr	r0, [pc, #124]	@ (8000824 <ESP32_Bluetooth_Init+0xb0>)
 80007a8:	f7ff ff20 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 80007ac:	f7ff ffa8 	bl	8000700 <ESP_ReadResponse>

	    // 3) AT+BTSCANMODE: Set Classic Bluetooth Scan Mode
	   	ESP_SendCmd("AT+BTSCANMODE=2\r\n", 500);
 80007b0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007b4:	481c      	ldr	r0, [pc, #112]	@ (8000828 <ESP32_Bluetooth_Init+0xb4>)
 80007b6:	f7ff ff19 	bl	80005ec <ESP_SendCmd>
	   	ESP_ReadResponse();
 80007ba:	f7ff ffa1 	bl	8000700 <ESP_ReadResponse>

	    //Spp Config SPP CONFIG ICIN ONCE 0 SORNA 1 YA DA 2 YAP KAPATMADAN CONFIG OLMUYOR
	    ESP_SendCmd("AT+BTSPPINIT?\r\n", 500);
 80007be:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007c2:	481a      	ldr	r0, [pc, #104]	@ (800082c <ESP32_Bluetooth_Init+0xb8>)
 80007c4:	f7ff ff12 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 80007c8:	f7ff ff9a 	bl	8000700 <ESP_ReadResponse>

	    ESP_SendCmd("AT+BTSPPINIT=0\r\n", 500);
 80007cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007d0:	4817      	ldr	r0, [pc, #92]	@ (8000830 <ESP32_Bluetooth_Init+0xbc>)
 80007d2:	f7ff ff0b 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 80007d6:	f7ff ff93 	bl	8000700 <ESP_ReadResponse>
	    //4) Configure a classic-SPP service
	    ESP_SendCmd("AT+BTSPPINIT=2\r\n", 500);
 80007da:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007de:	4815      	ldr	r0, [pc, #84]	@ (8000834 <ESP32_Bluetooth_Init+0xc0>)
 80007e0:	f7ff ff04 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 80007e4:	f7ff ff8c 	bl	8000700 <ESP_ReadResponse>
		ESP_SendCmd("AT+BTSTARTDISC=0,10,5\r\n", 1000);
		ESP_ReadResponse();
		*/

	    //Start SPP
	    ESP_SendCmd("AT+BTSPPSTART\r\n", 2000);
 80007e8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80007ec:	4812      	ldr	r0, [pc, #72]	@ (8000838 <ESP32_Bluetooth_Init+0xc4>)
 80007ee:	f7ff fefd 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 80007f2:	f7ff ff85 	bl	8000700 <ESP_ReadResponse>

	    ESP_SendCmd("AT+BTSPPCONN=0,0,\"00:00:00:00:00:00\"\r\n",3000);
 80007f6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80007fa:	4810      	ldr	r0, [pc, #64]	@ (800083c <ESP32_Bluetooth_Init+0xc8>)
 80007fc:	f7ff fef6 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 8000800:	f7ff ff7e 	bl	8000700 <ESP_ReadResponse>


		ESP_SendCmd("AT+BTSPPCONN?\r\n", 2000);
 8000804:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000808:	480d      	ldr	r0, [pc, #52]	@ (8000840 <ESP32_Bluetooth_Init+0xcc>)
 800080a:	f7ff feef 	bl	80005ec <ESP_SendCmd>
	    ESP_ReadResponse();
 800080e:	f7ff ff77 	bl	8000700 <ESP_ReadResponse>



	    // Now the module is advertising as “ESP32_Bluetooth”*/

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	0800544c 	.word	0x0800544c
 800081c:	08005454 	.word	0x08005454
 8000820:	08005464 	.word	0x08005464
 8000824:	08005474 	.word	0x08005474
 8000828:	08005494 	.word	0x08005494
 800082c:	080054a8 	.word	0x080054a8
 8000830:	080054b8 	.word	0x080054b8
 8000834:	080054cc 	.word	0x080054cc
 8000838:	080054e0 	.word	0x080054e0
 800083c:	080054f0 	.word	0x080054f0
 8000840:	08005518 	.word	0x08005518

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0d8      	sub	sp, #352	@ 0x160
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fe56 	bl	80014fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f925 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 faad 	bl	8000db0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000856:	f000 f98f 	bl	8000b78 <MX_ETH_Init>
  MX_I2C1_Init();
 800085a:	f000 f9db 	bl	8000c14 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800085e:	f000 fa19 	bl	8000c94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000862:	f000 fa77 	bl	8000d54 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000866:	f000 fa45 	bl	8000cf4 <MX_USART6_UART_Init>
  //ESP_SetBaudRate_115200();

  //<---FOR Bluetooth--->

    // Initialize Bluetooth over UART6 (ESP32 AT commands)
    ESP32_Bluetooth_Init();
 800086a:	f7ff ff83 	bl	8000774 <ESP32_Bluetooth_Init>

    // Cihazları tara
    ESP_BT_StartScan();
 800086e:	f7ff ff73 	bl	8000758 <ESP_BT_StartScan>
    //<---FOR WIFI--->

    /* Give ESP32 time to boot */

      /* Give ESP32 time to boot ------------------------------------------------*/
         HAL_Delay(1500);
 8000872:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000876:	f000 fe9d 	bl	80015b4 <HAL_Delay>
         /* 2) Reset module to clear previous state --------------------------------*/
         //ESP_SendCmd("AT+RST\r\n", 2000);
         //HAL_Delay(2000);

         /* 3) Set Wi-Fi to AP+STA mode (3) -----------------------------------------*/
         ESP_SendCmd("AT+CWMODE=3\r\n", AT_RX_TIMEOUT);
 800087a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800087e:	487e      	ldr	r0, [pc, #504]	@ (8000a78 <main+0x234>)
 8000880:	f7ff feb4 	bl	80005ec <ESP_SendCmd>
         ESP_SendCmd("AT+CWSAP=\"Ozgun\",\"123456789\",6,3,4,0\r\n", AT_RX_TIMEOUT);
 8000884:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000888:	487c      	ldr	r0, [pc, #496]	@ (8000a7c <main+0x238>)
 800088a:	f7ff feaf 	bl	80005ec <ESP_SendCmd>

         /* 5) Enable multiple connections -----------------------------------------*/
         ESP_SendCmd("AT+CIPMUX=1\r\n", AT_RX_TIMEOUT);
 800088e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000892:	487b      	ldr	r0, [pc, #492]	@ (8000a80 <main+0x23c>)
 8000894:	f7ff feaa 	bl	80005ec <ESP_SendCmd>

         /* 6) Start TCP server on port 5000 ---------------------------------------*/
         ESP_SendCmd("AT+CIPSERVER=1,5000\r\n", AT_RX_TIMEOUT);
 8000898:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800089c:	4879      	ldr	r0, [pc, #484]	@ (8000a84 <main+0x240>)
 800089e:	f7ff fea5 	bl	80005ec <ESP_SendCmd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
         while (1)
         {
             char uartBuf[256] = {0};
 80008a2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80008a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80008aa:	4618      	mov	r0, r3
 80008ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b0:	461a      	mov	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f004 f90a 	bl	8004acc <memset>
             size_t uartLen = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
             uint32_t startTime = HAL_GetTick();
 80008be:	f000 fe6d 	bl	800159c <HAL_GetTick>
 80008c2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158

             while ((HAL_GetTick() - startTime) < 100 && uartLen < sizeof(uartBuf) - 1) {
 80008c6:	e019      	b.n	80008fc <main+0xb8>
                 uint8_t ch;
                 if (HAL_UART_Receive(&huart6, &ch, 1, 10) == HAL_OK) {
 80008c8:	f207 1143 	addw	r1, r7, #323	@ 0x143
 80008cc:	230a      	movs	r3, #10
 80008ce:	2201      	movs	r2, #1
 80008d0:	486d      	ldr	r0, [pc, #436]	@ (8000a88 <main+0x244>)
 80008d2:	f003 f8ec 	bl	8003aae <HAL_UART_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10f      	bne.n	80008fc <main+0xb8>
                     uartBuf[uartLen++] = ch;
 80008dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80008e6:	f897 1143 	ldrb.w	r1, [r7, #323]	@ 0x143
 80008ea:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80008ee:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80008f2:	54d1      	strb	r1, [r2, r3]
                     startTime = HAL_GetTick();  // reset timeout
 80008f4:	f000 fe52 	bl	800159c <HAL_GetTick>
 80008f8:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
             while ((HAL_GetTick() - startTime) < 100 && uartLen < sizeof(uartBuf) - 1) {
 80008fc:	f000 fe4e 	bl	800159c <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	2b63      	cmp	r3, #99	@ 0x63
 800090a:	d803      	bhi.n	8000914 <main+0xd0>
 800090c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000910:	2bfe      	cmp	r3, #254	@ 0xfe
 8000912:	d9d9      	bls.n	80008c8 <main+0x84>
                 }
             }
             uartBuf[uartLen] = '\0';
 8000914:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000918:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800091c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000920:	4413      	add	r3, r2
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]

             if (uartLen > 0) {
 8000926:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 809f 	beq.w	8000a6e <main+0x22a>

                 // Bluetooth verisi: +BTDATA:<len>,<data>
                 if (strstr(uartBuf, "+BTDATA:") != NULL) {
 8000930:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000934:	4955      	ldr	r1, [pc, #340]	@ (8000a8c <main+0x248>)
 8000936:	4618      	mov	r0, r3
 8000938:	f004 f8dd 	bl	8004af6 <strstr>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d03a      	beq.n	80009b8 <main+0x174>
                     // Verinin ',' sonrasını al
                     char* dataStart = strchr(uartBuf, ',');
 8000942:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000946:	212c      	movs	r1, #44	@ 0x2c
 8000948:	4618      	mov	r0, r3
 800094a:	f004 f8c7 	bl	8004adc <strchr>
 800094e:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
                     if (dataStart) {
 8000952:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 8089 	beq.w	8000a6e <main+0x22a>
                         dataStart++; // ',' sonrası verinin başlangıcı
 800095c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8000960:	3301      	adds	r3, #1
 8000962:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                         size_t len = strlen(dataStart);
 8000966:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 800096a:	f7ff fc51 	bl	8000210 <strlen>
 800096e:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144

                         // Echo Bluetooth verisi
                         char cmd[64];
                         sprintf(cmd, "AT+BTSPPSEND=0,%u\r\n", (unsigned)len);
 8000972:	463b      	mov	r3, r7
 8000974:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000978:	4945      	ldr	r1, [pc, #276]	@ (8000a90 <main+0x24c>)
 800097a:	4618      	mov	r0, r3
 800097c:	f004 f884 	bl	8004a88 <siprintf>
                         HAL_UART_Transmit(&huart6, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000980:	463b      	mov	r3, r7
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc44 	bl	8000210 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	4639      	mov	r1, r7
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	483d      	ldr	r0, [pc, #244]	@ (8000a88 <main+0x244>)
 8000994:	f003 f802 	bl	800399c <HAL_UART_Transmit>
                         HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f000 fe0b 	bl	80015b4 <HAL_Delay>
                         HAL_UART_Transmit(&huart6, (uint8_t*)dataStart, len, HAL_MAX_DELAY);
 800099e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 80009ac:	4836      	ldr	r0, [pc, #216]	@ (8000a88 <main+0x244>)
 80009ae:	f002 fff5 	bl	800399c <HAL_UART_Transmit>
                         ESP_ReadResponse();
 80009b2:	f7ff fea5 	bl	8000700 <ESP_ReadResponse>
 80009b6:	e05a      	b.n	8000a6e <main+0x22a>
                     }
                 }

                 // Wi-Fi TCP verisi: +IPD,<id>,<len>:<data>
                 else if (strstr(uartBuf, "+IPD") != NULL) {
 80009b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009bc:	4935      	ldr	r1, [pc, #212]	@ (8000a94 <main+0x250>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 f899 	bl	8004af6 <strstr>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d051      	beq.n	8000a6e <main+0x22a>
                     char* dataStart = strchr(uartBuf, ':');
 80009ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009ce:	213a      	movs	r1, #58	@ 0x3a
 80009d0:	4618      	mov	r0, r3
 80009d2:	f004 f883 	bl	8004adc <strchr>
 80009d6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
                     if (dataStart != NULL) {
 80009da:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d045      	beq.n	8000a6e <main+0x22a>
                         dataStart++;
 80009e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80009e6:	3301      	adds	r3, #1
 80009e8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
                         size_t dataLen = strlen(dataStart);
 80009ec:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 80009f0:	f7ff fc0e 	bl	8000210 <strlen>
 80009f4:	f8c7 0150 	str.w	r0, [r7, #336]	@ 0x150

                         // Echo Wi-Fi verisi
                         char cmdBuf[64];
                         sprintf(cmdBuf, "AT+CIPSEND=0,%u\r\n", (unsigned)dataLen);
 80009f8:	463b      	mov	r3, r7
 80009fa:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80009fe:	4926      	ldr	r1, [pc, #152]	@ (8000a98 <main+0x254>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 f841 	bl	8004a88 <siprintf>
                         HAL_UART_Transmit(&huart6, (uint8_t*)cmdBuf, strlen(cmdBuf), HAL_MAX_DELAY);
 8000a06:	463b      	mov	r3, r7
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc01 	bl	8000210 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4639      	mov	r1, r7
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <main+0x244>)
 8000a1a:	f002 ffbf 	bl	800399c <HAL_UART_Transmit>

                         // Wait for '>' prompt
                         uint8_t prompt;
                         uint32_t waitStart = HAL_GetTick();
 8000a1e:	f000 fdbd 	bl	800159c <HAL_GetTick>
 8000a22:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
                         while ((HAL_GetTick() - waitStart) < 1000) {
 8000a26:	e00d      	b.n	8000a44 <main+0x200>
                             if (HAL_UART_Receive(&huart6, &prompt, 1, 100) == HAL_OK && prompt == '>') {
 8000a28:	f507 71a1 	add.w	r1, r7, #322	@ 0x142
 8000a2c:	2364      	movs	r3, #100	@ 0x64
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4815      	ldr	r0, [pc, #84]	@ (8000a88 <main+0x244>)
 8000a32:	f003 f83c 	bl	8003aae <HAL_UART_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d103      	bne.n	8000a44 <main+0x200>
 8000a3c:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 8000a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8000a42:	d009      	beq.n	8000a58 <main+0x214>
                         while ((HAL_GetTick() - waitStart) < 1000) {
 8000a44:	f000 fdaa 	bl	800159c <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a54:	d3e8      	bcc.n	8000a28 <main+0x1e4>
 8000a56:	e000      	b.n	8000a5a <main+0x216>
                                 break;
 8000a58:	bf00      	nop
                             }
                         }

                         HAL_UART_Transmit(&huart6, (uint8_t*)dataStart, dataLen, HAL_MAX_DELAY);
 8000a5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <main+0x244>)
 8000a6a:	f002 ff97 	bl	800399c <HAL_UART_Transmit>
                     }
                 }
             }

             HAL_Delay(100);
 8000a6e:	2064      	movs	r0, #100	@ 0x64
 8000a70:	f000 fda0 	bl	80015b4 <HAL_Delay>
         {
 8000a74:	e715      	b.n	80008a2 <main+0x5e>
 8000a76:	bf00      	nop
 8000a78:	08005548 	.word	0x08005548
 8000a7c:	08005558 	.word	0x08005558
 8000a80:	08005580 	.word	0x08005580
 8000a84:	08005590 	.word	0x08005590
 8000a88:	2000037c 	.word	0x2000037c
 8000a8c:	080055a8 	.word	0x080055a8
 8000a90:	080055b4 	.word	0x080055b4
 8000a94:	080055c8 	.word	0x080055c8
 8000a98:	080055d0 	.word	0x080055d0

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	@ 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 f80e 	bl	8004acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ac0:	f001 fe04 	bl	80026cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <SystemClock_Config+0xd4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a29      	ldr	r2, [pc, #164]	@ (8000b70 <SystemClock_Config+0xd4>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad0:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <SystemClock_Config+0xd4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <SystemClock_Config+0xd8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <SystemClock_Config+0xd8>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <SystemClock_Config+0xd8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000af8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b0c:	23d8      	movs	r3, #216	@ 0xd8
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b14:	2309      	movs	r3, #9
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fe35 	bl	800278c <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b28:	f000 f9e4 	bl	8000ef4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b2c:	f001 fdde 	bl	80026ec <HAL_PWREx_EnableOverDrive>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b36:	f000 f9dd 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2107      	movs	r1, #7
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 f8bb 	bl	8002cd4 <HAL_RCC_ClockConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b64:	f000 f9c6 	bl	8000ef4 <Error_Handler>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3750      	adds	r7, #80	@ 0x50
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_ETH_Init+0x84>)
 8000b7e:	4a20      	ldr	r2, [pc, #128]	@ (8000c00 <MX_ETH_Init+0x88>)
 8000b80:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b82:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <MX_ETH_Init+0x8c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b88:	4b1e      	ldr	r3, [pc, #120]	@ (8000c04 <MX_ETH_Init+0x8c>)
 8000b8a:	2280      	movs	r2, #128	@ 0x80
 8000b8c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_ETH_Init+0x8c>)
 8000b90:	22e1      	movs	r2, #225	@ 0xe1
 8000b92:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <MX_ETH_Init+0x8c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_ETH_Init+0x8c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <MX_ETH_Init+0x8c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_ETH_Init+0x84>)
 8000ba8:	4a16      	ldr	r2, [pc, #88]	@ (8000c04 <MX_ETH_Init+0x8c>)
 8000baa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_ETH_Init+0x84>)
 8000bae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bb2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_ETH_Init+0x84>)
 8000bb6:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <MX_ETH_Init+0x90>)
 8000bb8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_ETH_Init+0x84>)
 8000bbc:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <MX_ETH_Init+0x94>)
 8000bbe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_ETH_Init+0x84>)
 8000bc2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000bc6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <MX_ETH_Init+0x84>)
 8000bca:	f000 fdfd 	bl	80017c8 <HAL_ETH_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000bd4:	f000 f98e 	bl	8000ef4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bd8:	2238      	movs	r2, #56	@ 0x38
 8000bda:	2100      	movs	r1, #0
 8000bdc:	480c      	ldr	r0, [pc, #48]	@ (8000c10 <MX_ETH_Init+0x98>)
 8000bde:	f003 ff75 	bl	8004acc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_ETH_Init+0x98>)
 8000be4:	2221      	movs	r2, #33	@ 0x21
 8000be6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_ETH_Init+0x98>)
 8000bea:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000bee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <MX_ETH_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001f0 	.word	0x200001f0
 8000c00:	40028000 	.word	0x40028000
 8000c04:	200008e4 	.word	0x200008e4
 8000c08:	200000fc 	.word	0x200000fc
 8000c0c:	2000005c 	.word	0x2000005c
 8000c10:	200001b8 	.word	0x200001b8

08000c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c8c <MX_I2C1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x7c>)
 8000c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c50:	f001 face 	bl	80021f0 <HAL_I2C_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c5a:	f000 f94b 	bl	8000ef4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c62:	f001 fb61 	bl	8002328 <HAL_I2CEx_ConfigAnalogFilter>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c6c:	f000 f942 	bl	8000ef4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c74:	f001 fba3 	bl	80023be <HAL_I2CEx_ConfigDigitalFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 f939 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200002a0 	.word	0x200002a0
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	20404768 	.word	0x20404768

08000c94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <MX_USART3_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_USART3_UART_Init+0x58>)
 8000cd8:	f002 fe12 	bl	8003900 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f000 f907 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200002f4 	.word	0x200002f4
 8000cf0:	40004800 	.word	0x40004800

08000cf4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <MX_USART6_UART_Init+0x5c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_USART6_UART_Init+0x58>)
 8000d38:	f002 fde2 	bl	8003900 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d42:	f000 f8d7 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000037c 	.word	0x2000037c
 8000d50:	40011400 	.word	0x40011400

08000d54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d62:	2206      	movs	r2, #6
 8000d64:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	f001 fb5d 	bl	8002456 <HAL_PCD_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000da2:	f000 f8a7 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000404 	.word	0x20000404

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b47      	ldr	r3, [pc, #284]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a46      	ldr	r2, [pc, #280]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b44      	ldr	r3, [pc, #272]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	4b41      	ldr	r3, [pc, #260]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a40      	ldr	r2, [pc, #256]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b38      	ldr	r3, [pc, #224]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a34      	ldr	r2, [pc, #208]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a28      	ldr	r2, [pc, #160]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <MX_GPIO_Init+0x134>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e5c:	4822      	ldr	r0, [pc, #136]	@ (8000ee8 <MX_GPIO_Init+0x138>)
 8000e5e:	f001 f9ad 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2140      	movs	r1, #64	@ 0x40
 8000e66:	4821      	ldr	r0, [pc, #132]	@ (8000eec <MX_GPIO_Init+0x13c>)
 8000e68:	f001 f9a8 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	481b      	ldr	r0, [pc, #108]	@ (8000ef0 <MX_GPIO_Init+0x140>)
 8000e84:	f000 ffee 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e88:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <MX_GPIO_Init+0x138>)
 8000ea2:	f000 ffdf 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ea6:	2340      	movs	r3, #64	@ 0x40
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480b      	ldr	r0, [pc, #44]	@ (8000eec <MX_GPIO_Init+0x13c>)
 8000ebe:	f000 ffd1 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ec2:	2380      	movs	r3, #128	@ 0x80
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_GPIO_Init+0x13c>)
 8000ed6:	f000 ffc5 	bl	8001e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000eda:	bf00      	nop
 8000edc:	3730      	adds	r7, #48	@ 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40020800 	.word	0x40020800

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <Error_Handler+0x8>

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_MspInit+0x44>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <HAL_MspInit+0x44>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <HAL_MspInit+0x44>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <HAL_MspInit+0x44>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <HAL_MspInit+0x44>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_MspInit+0x44>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	@ (80010a0 <HAL_ETH_MspInit+0x158>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	f040 8096 	bne.w	8001098 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	4a4c      	ldr	r2, [pc, #304]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f78:	4b4a      	ldr	r3, [pc, #296]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	4b47      	ldr	r3, [pc, #284]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	4a46      	ldr	r2, [pc, #280]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f90:	4b44      	ldr	r3, [pc, #272]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	4b41      	ldr	r3, [pc, #260]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	4a40      	ldr	r2, [pc, #256]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc0:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b35      	ldr	r3, [pc, #212]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	4a34      	ldr	r2, [pc, #208]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd8:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffc:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001000:	4a28      	ldr	r2, [pc, #160]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 8001002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001006:	6313      	str	r3, [r2, #48]	@ 0x30
 8001008:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001014:	2332      	movs	r3, #50	@ 0x32
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001024:	230b      	movs	r3, #11
 8001026:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <HAL_ETH_MspInit+0x160>)
 8001030:	f000 ff18 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001034:	2386      	movs	r3, #134	@ 0x86
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001044:	230b      	movs	r3, #11
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4817      	ldr	r0, [pc, #92]	@ (80010ac <HAL_ETH_MspInit+0x164>)
 8001050:	f000 ff08 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <HAL_ETH_MspInit+0x168>)
 8001072:	f000 fef7 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001076:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <HAL_ETH_MspInit+0x16c>)
 8001094:	f000 fee6 	bl	8001e64 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	@ 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40028000 	.word	0x40028000
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40021800 	.word	0x40021800

080010b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0aa      	sub	sp, #168	@ 0xa8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2284      	movs	r2, #132	@ 0x84
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fcf7 	bl	8004acc <memset>
  if(hi2c->Instance==I2C1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a22      	ldr	r2, [pc, #136]	@ (800116c <HAL_I2C_MspInit+0xb4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d13c      	bne.n	8001162 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 f812 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff fef7 	bl	8000ef4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <HAL_I2C_MspInit+0xb8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_I2C_MspInit+0xb8>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_I2C_MspInit+0xb8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800111e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001126:	2312      	movs	r3, #18
 8001128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001138:	2304      	movs	r3, #4
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001142:	4619      	mov	r1, r3
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <HAL_I2C_MspInit+0xbc>)
 8001146:	f000 fe8d 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_I2C_MspInit+0xb8>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <HAL_I2C_MspInit+0xb8>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001154:	6413      	str	r3, [r2, #64]	@ 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_I2C_MspInit+0xb8>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001162:	bf00      	nop
 8001164:	37a8      	adds	r7, #168	@ 0xa8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ac      	sub	sp, #176	@ 0xb0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	2284      	movs	r2, #132	@ 0x84
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fc97 	bl	8004acc <memset>
  if(huart->Instance==USART3)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a43      	ldr	r2, [pc, #268]	@ (80012b0 <HAL_UART_MspInit+0x138>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d13d      	bne.n	8001224 <HAL_UART_MspInit+0xac>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 ffb2 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f7ff fe97 	bl	8000ef4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011c6:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d2:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b32      	ldr	r3, [pc, #200]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001210:	2307      	movs	r3, #7
 8001212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001216:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800121a:	4619      	mov	r1, r3
 800121c:	4826      	ldr	r0, [pc, #152]	@ (80012b8 <HAL_UART_MspInit+0x140>)
 800121e:	f000 fe21 	bl	8001e64 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001222:	e040      	b.n	80012a6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART6)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a24      	ldr	r2, [pc, #144]	@ (80012bc <HAL_UART_MspInit+0x144>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d13b      	bne.n	80012a6 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800122e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001232:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001234:	2300      	movs	r3, #0
 8001236:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	4618      	mov	r0, r3
 800123e:	f001 ff6f 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001248:	f7ff fe54 	bl	8000ef4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6453      	str	r3, [r2, #68]	@ 0x44
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001270:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_UART_MspInit+0x13c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127c:	23c0      	movs	r3, #192	@ 0xc0
 800127e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001294:	2308      	movs	r3, #8
 8001296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <HAL_UART_MspInit+0x148>)
 80012a2:	f000 fddf 	bl	8001e64 <HAL_GPIO_Init>
}
 80012a6:	bf00      	nop
 80012a8:	37b0      	adds	r7, #176	@ 0xb0
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004800 	.word	0x40004800
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40011400 	.word	0x40011400
 80012c0:	40020800 	.word	0x40020800

080012c4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0ac      	sub	sp, #176	@ 0xb0
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	2284      	movs	r2, #132	@ 0x84
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fbf1 	bl	8004acc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012f2:	d159      	bne.n	80013a8 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	4618      	mov	r0, r3
 8001306:	f001 ff0b 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001310:	f7ff fdf0 	bl	8000ef4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	4a25      	ldr	r2, [pc, #148]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001320:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800132c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001346:	230a      	movs	r3, #10
 8001348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001350:	4619      	mov	r1, r3
 8001352:	4818      	ldr	r0, [pc, #96]	@ (80013b4 <HAL_PCD_MspInit+0xf0>)
 8001354:	f000 fd86 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001358:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800135c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001370:	4619      	mov	r1, r3
 8001372:	4810      	ldr	r0, [pc, #64]	@ (80013b4 <HAL_PCD_MspInit+0xf0>)
 8001374:	f000 fd76 	bl	8001e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 800137a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800137c:	4a0c      	ldr	r2, [pc, #48]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 800137e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001382:	6353      	str	r3, [r2, #52]	@ 0x34
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 8001386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001394:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 8001396:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139a:	6453      	str	r3, [r2, #68]	@ 0x44
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_PCD_MspInit+0xec>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013a8:	bf00      	nop
 80013aa:	37b0      	adds	r7, #176	@ 0xb0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 f8b1 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	@ (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f003 fb6c 	bl	8004b24 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20050000 	.word	0x20050000
 8001478:	00000400 	.word	0x00000400
 800147c:	200008ec 	.word	0x200008ec
 8001480:	20000a40 	.word	0x20000a40

08001484 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	@ (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	@ (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f003 fb2b 	bl	8004b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f9b3 	bl	8000844 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014ec:	08005640 	.word	0x08005640
  ldr r2, =_sbss
 80014f0:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80014f4:	20000a3c 	.word	0x20000a3c

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>

080014fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fe:	2003      	movs	r0, #3
 8001500:	f000 f92e 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001504:	2000      	movs	r0, #0
 8001506:	f000 f805 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150a:	f7ff fcf9 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_InitTick+0x54>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_InitTick+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f93b 	bl	80017ae <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f911 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	@ (8001570 <HAL_InitTick+0x5c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000000 	.word	0x20000000
 800156c:	20000008 	.word	0x20000008
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008
 8001598:	200008f0 	.word	0x200008f0

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200008f0 	.word	0x200008f0

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <__NVIC_SetPriorityGrouping+0x40>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	4313      	orrs	r3, r2
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	@ (800163c <__NVIC_SetPriorityGrouping+0x40>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	05fa0000 	.word	0x05fa0000

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	@ (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	@ (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	@ 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	@ (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff47 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff5c 	bl	8001644 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffb0 	bl	800171c <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e086      	b.n	80018e8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d106      	bne.n	80017f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fbab 	bl	8000f48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <HAL_ETH_Init+0x128>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a3e      	ldr	r2, [pc, #248]	@ (80018f0 <HAL_ETH_Init+0x128>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b3c      	ldr	r3, [pc, #240]	@ (80018f0 <HAL_ETH_Init+0x128>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800180a:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <HAL_ETH_Init+0x12c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a39      	ldr	r2, [pc, #228]	@ (80018f4 <HAL_ETH_Init+0x12c>)
 8001810:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001814:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001816:	4b37      	ldr	r3, [pc, #220]	@ (80018f4 <HAL_ETH_Init+0x12c>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4935      	ldr	r1, [pc, #212]	@ (80018f4 <HAL_ETH_Init+0x12c>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001824:	4b33      	ldr	r3, [pc, #204]	@ (80018f4 <HAL_ETH_Init+0x12c>)
 8001826:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800183e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001840:	f7ff feac 	bl	800159c <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001846:	e011      	b.n	800186c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001848:	f7ff fea8 	bl	800159c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001856:	d909      	bls.n	800186c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2204      	movs	r2, #4
 800185c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	22e0      	movs	r2, #224	@ 0xe0
 8001864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e03d      	b.n	80018e8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e4      	bne.n	8001848 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f97a 	bl	8001b78 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa25 	bl	8001cd4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fa7b 	bl	8001d86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	461a      	mov	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9e3 	bl	8001c64 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80018ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <HAL_ETH_Init+0x130>)
 80018bc:	430b      	orrs	r3, r1
 80018be:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80018d2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2210      	movs	r2, #16
 80018e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	00020060 	.word	0x00020060

080018fc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <ETH_SetMACConfig+0x164>)
 8001912:	4013      	ands	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	7b9b      	ldrb	r3, [r3, #14]
 800191a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	7c12      	ldrb	r2, [r2, #16]
 8001920:	2a00      	cmp	r2, #0
 8001922:	d102      	bne.n	800192a <ETH_SetMACConfig+0x2e>
 8001924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001928:	e000      	b.n	800192c <ETH_SetMACConfig+0x30>
 800192a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800192c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	7c52      	ldrb	r2, [r2, #17]
 8001932:	2a00      	cmp	r2, #0
 8001934:	d102      	bne.n	800193c <ETH_SetMACConfig+0x40>
 8001936:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800193a:	e000      	b.n	800193e <ETH_SetMACConfig+0x42>
 800193c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800193e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001944:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	7fdb      	ldrb	r3, [r3, #31]
 800194a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800194c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001952:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	7f92      	ldrb	r2, [r2, #30]
 8001958:	2a00      	cmp	r2, #0
 800195a:	d102      	bne.n	8001962 <ETH_SetMACConfig+0x66>
 800195c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001960:	e000      	b.n	8001964 <ETH_SetMACConfig+0x68>
 8001962:	2200      	movs	r2, #0
                        macconf->Speed |
 8001964:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7f1b      	ldrb	r3, [r3, #28]
 800196a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800196c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001972:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800197a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001982:	2a00      	cmp	r2, #0
 8001984:	d102      	bne.n	800198c <ETH_SetMACConfig+0x90>
 8001986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198a:	e000      	b.n	800198e <ETH_SetMACConfig+0x92>
 800198c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800198e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	7bdb      	ldrb	r3, [r3, #15]
 8001994:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001996:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800199c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019a4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80019a6:	4313      	orrs	r3, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fdf8 	bl	80015b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80019da:	4013      	ands	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	d101      	bne.n	80019f2 <ETH_SetMACConfig+0xf6>
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	e000      	b.n	80019f4 <ETH_SetMACConfig+0xf8>
 80019f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019f4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001a02:	2a01      	cmp	r2, #1
 8001a04:	d101      	bne.n	8001a0a <ETH_SetMACConfig+0x10e>
 8001a06:	2208      	movs	r2, #8
 8001a08:	e000      	b.n	8001a0c <ETH_SetMACConfig+0x110>
 8001a0a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001a14:	2a01      	cmp	r2, #1
 8001a16:	d101      	bne.n	8001a1c <ETH_SetMACConfig+0x120>
 8001a18:	2204      	movs	r2, #4
 8001a1a:	e000      	b.n	8001a1e <ETH_SetMACConfig+0x122>
 8001a1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001a26:	2a01      	cmp	r2, #1
 8001a28:	d101      	bne.n	8001a2e <ETH_SetMACConfig+0x132>
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	e000      	b.n	8001a30 <ETH_SetMACConfig+0x134>
 8001a2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a30:	4313      	orrs	r3, r2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff fdb3 	bl	80015b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	fd20810f 	.word	0xfd20810f

08001a64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <ETH_SetDMAConfig+0x110>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	7b1b      	ldrb	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <ETH_SetDMAConfig+0x2c>
 8001a8a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a8e:	e000      	b.n	8001a92 <ETH_SetDMAConfig+0x2e>
 8001a90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	7b5b      	ldrb	r3, [r3, #13]
 8001a96:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a98:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	7f52      	ldrb	r2, [r2, #29]
 8001a9e:	2a00      	cmp	r2, #0
 8001aa0:	d102      	bne.n	8001aa8 <ETH_SetDMAConfig+0x44>
 8001aa2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aa6:	e000      	b.n	8001aaa <ETH_SetDMAConfig+0x46>
 8001aa8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001aaa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	7b9b      	ldrb	r3, [r3, #14]
 8001ab0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ab2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ab8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7f1b      	ldrb	r3, [r3, #28]
 8001abe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ac0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	7f9b      	ldrb	r3, [r3, #30]
 8001ac6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ac8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ace:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ad6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff fd5a 	bl	80015b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	791b      	ldrb	r3, [r3, #4]
 8001b12:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b18:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b1e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b24:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b2e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b36:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b3c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b4a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff fd2b 	bl	80015b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	f8de3f23 	.word	0xf8de3f23

08001b78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0a6      	sub	sp, #152	@ 0x98
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001be0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001be6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001bf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fe7f 	bl	80018fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c32:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c38:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c3e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff05 	bl	8001a64 <ETH_SetDMAConfig>
}
 8001c5a:	bf00      	nop
 8001c5c:	3798      	adds	r7, #152	@ 0x98
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3305      	adds	r3, #5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	3204      	adds	r2, #4
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <ETH_MACAddressConfig+0x68>)
 8001c86:	4413      	add	r3, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3303      	adds	r3, #3
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	061a      	lsls	r2, r3, #24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <ETH_MACAddressConfig+0x6c>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	6013      	str	r3, [r2, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40028040 	.word	0x40028040
 8001cd0:	40028044 	.word	0x40028044

08001cd4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e03e      	b.n	8001d60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68d9      	ldr	r1, [r3, #12]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	3206      	adds	r2, #6
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d80c      	bhi.n	8001d44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68d9      	ldr	r1, [r3, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	e004      	b.n	8001d4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d9bd      	bls.n	8001ce2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d78:	611a      	str	r2, [r3, #16]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e048      	b.n	8001e26 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6919      	ldr	r1, [r3, #16]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2200      	movs	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	3212      	adds	r2, #18
 8001df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d80c      	bhi.n	8001e16 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6919      	ldr	r1, [r3, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	e004      	b.n	8001e20 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d9b3      	bls.n	8001d94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e56:	60da      	str	r2, [r3, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e175      	b.n	8002170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 8164 	bne.w	800216a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d005      	beq.n	8001eba <HAL_GPIO_Init+0x56>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d130      	bne.n	8001f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d017      	beq.n	8001f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d123      	bne.n	8001fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80be 	beq.w	800216a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffa:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002006:	4a61      	ldr	r2, [pc, #388]	@ (800218c <HAL_GPIO_Init+0x328>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_GPIO_Init+0x32c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d037      	beq.n	80020a2 <HAL_GPIO_Init+0x23e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <HAL_GPIO_Init+0x330>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d031      	beq.n	800209e <HAL_GPIO_Init+0x23a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_GPIO_Init+0x334>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02b      	beq.n	800209a <HAL_GPIO_Init+0x236>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a55      	ldr	r2, [pc, #340]	@ (800219c <HAL_GPIO_Init+0x338>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x232>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a54      	ldr	r2, [pc, #336]	@ (80021a0 <HAL_GPIO_Init+0x33c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x22e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a53      	ldr	r2, [pc, #332]	@ (80021a4 <HAL_GPIO_Init+0x340>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x22a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	@ (80021a8 <HAL_GPIO_Init+0x344>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x226>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	@ (80021ac <HAL_GPIO_Init+0x348>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x222>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <HAL_GPIO_Init+0x34c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x21e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	@ (80021b4 <HAL_GPIO_Init+0x350>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x21a>
 800207a:	2309      	movs	r3, #9
 800207c:	e012      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800207e:	230a      	movs	r3, #10
 8002080:	e010      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002082:	2308      	movs	r3, #8
 8002084:	e00e      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002086:	2307      	movs	r3, #7
 8002088:	e00c      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800208a:	2306      	movs	r3, #6
 800208c:	e00a      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800208e:	2305      	movs	r3, #5
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002092:	2304      	movs	r3, #4
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	@ (800218c <HAL_GPIO_Init+0x328>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b3d      	ldr	r3, [pc, #244]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a29      	ldr	r2, [pc, #164]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f ae86 	bls.w	8001e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021800 	.word	0x40021800
 80021ac:	40021c00 	.word	0x40021c00
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40022400 	.word	0x40022400
 80021b8:	40013c00 	.word	0x40013c00

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e08b      	b.n	800231a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe ff4e 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	@ 0x24
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002240:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002250:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e006      	b.n	8002278 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002276:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d108      	bne.n	8002292 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e007      	b.n	80022a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_I2C_Init+0x134>)
 80022ae:	430b      	orrs	r3, r1
 80022b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69d9      	ldr	r1, [r3, #28]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	02008000 	.word	0x02008000

08002328 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	d138      	bne.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002348:	2302      	movs	r3, #2
 800234a:	e032      	b.n	80023b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	@ 0x24
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800237a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d139      	bne.n	8002448 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023de:	2302      	movs	r3, #2
 80023e0:	e033      	b.n	800244a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2224      	movs	r2, #36	@ 0x24
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002410:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af02      	add	r7, sp, #8
 800245c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e108      	b.n	800267a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe ff1e 	bl	80012c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002496:	d102      	bne.n	800249e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 f854 	bl	8004550 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7c1a      	ldrb	r2, [r3, #16]
 80024b0:	f88d 2000 	strb.w	r2, [sp]
 80024b4:	3304      	adds	r3, #4
 80024b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b8:	f001 fff0 	bl	800449c <USB_CoreInit>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0d5      	b.n	800267a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 f84c 	bl	8004572 <USB_SetCurrentMode>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0c6      	b.n	800267a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e04a      	b.n	8002588 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	3315      	adds	r3, #21
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3314      	adds	r3, #20
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	b298      	uxth	r0, r3
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	332e      	adds	r3, #46	@ 0x2e
 800252e:	4602      	mov	r2, r0
 8002530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3318      	adds	r3, #24
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	331c      	adds	r3, #28
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3320      	adds	r3, #32
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3324      	adds	r3, #36	@ 0x24
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	3301      	adds	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	791b      	ldrb	r3, [r3, #4]
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	429a      	cmp	r2, r3
 8002590:	d3af      	bcc.n	80024f2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e044      	b.n	8002622 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	3301      	adds	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	429a      	cmp	r2, r3
 800262a:	d3b5      	bcc.n	8002598 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7c1a      	ldrb	r2, [r3, #16]
 8002634:	f88d 2000 	strb.w	r2, [sp]
 8002638:	3304      	adds	r3, #4
 800263a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263c:	f001 ffe6 	bl	800460c <USB_DevInit>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2202      	movs	r2, #2
 800264a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e013      	b.n	800267a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f80b 	bl	8002684 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f002 f9a1 	bl	80049ba <USB_DevDisconnect>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	10000003 	.word	0x10000003

080026cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40007000 	.word	0x40007000

080026ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b23      	ldr	r3, [pc, #140]	@ (8002784 <HAL_PWREx_EnableOverDrive+0x98>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	4a22      	ldr	r2, [pc, #136]	@ (8002784 <HAL_PWREx_EnableOverDrive+0x98>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	@ 0x40
 8002702:	4b20      	ldr	r3, [pc, #128]	@ (8002784 <HAL_PWREx_EnableOverDrive+0x98>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800270e:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800271a:	f7fe ff3f 	bl	800159c <HAL_GetTick>
 800271e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002720:	e009      	b.n	8002736 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002722:	f7fe ff3b 	bl	800159c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002730:	d901      	bls.n	8002736 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e022      	b.n	800277c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002742:	d1ee      	bne.n	8002722 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002744:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0f      	ldr	r2, [pc, #60]	@ (8002788 <HAL_PWREx_EnableOverDrive+0x9c>)
 800274a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002750:	f7fe ff24 	bl	800159c <HAL_GetTick>
 8002754:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002756:	e009      	b.n	800276c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002758:	f7fe ff20 	bl	800159c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002766:	d901      	bls.n	800276c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e007      	b.n	800277c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_PWREx_EnableOverDrive+0x9c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002778:	d1ee      	bne.n	8002758 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	40007000 	.word	0x40007000

0800278c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e291      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b0:	4b96      	ldr	r3, [pc, #600]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d00c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027bc:	4b93      	ldr	r3, [pc, #588]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d112      	bne.n	80027ee <HAL_RCC_OscConfig+0x62>
 80027c8:	4b90      	ldr	r3, [pc, #576]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d4:	d10b      	bne.n	80027ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d6:	4b8d      	ldr	r3, [pc, #564]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d06c      	beq.n	80028bc <HAL_RCC_OscConfig+0x130>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d168      	bne.n	80028bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e26b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x7a>
 80027f8:	4b84      	ldr	r3, [pc, #528]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a83      	ldr	r2, [pc, #524]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e02e      	b.n	8002864 <HAL_RCC_OscConfig+0xd8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x9c>
 800280e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7e      	ldr	r2, [pc, #504]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xd8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0xc0>
 8002832:	4b76      	ldr	r3, [pc, #472]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a75      	ldr	r2, [pc, #468]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b73      	ldr	r3, [pc, #460]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a72      	ldr	r2, [pc, #456]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xd8>
 800284c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b6c      	ldr	r3, [pc, #432]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a6b      	ldr	r2, [pc, #428]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fe96 	bl	800159c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fe92 	bl	800159c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e21f      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b61      	ldr	r3, [pc, #388]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xe8>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fe82 	bl	800159c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe fe7e 	bl	800159c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e20b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x110>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d069      	beq.n	800299e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ca:	4b50      	ldr	r3, [pc, #320]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b4d      	ldr	r3, [pc, #308]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x190>
 80028e2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x17a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1df      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	493d      	ldr	r1, [pc, #244]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e040      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d023      	beq.n	800296c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a38      	ldr	r2, [pc, #224]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fe34 	bl	800159c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002938:	f7fe fe30 	bl	800159c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1bd      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4929      	ldr	r1, [pc, #164]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
 800296a:	e018      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296c:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fe10 	bl	800159c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe fe0c 	bl	800159c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e199      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d038      	beq.n	8002a1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d019      	beq.n	80029e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b2:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80029b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b6:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe fded 	bl	800159c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c6:	f7fe fde9 	bl	800159c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e176      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x23a>
 80029e4:	e01a      	b.n	8002a1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <HAL_RCC_OscConfig+0x280>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fdd3 	bl	800159c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fa:	f7fe fdcf 	bl	800159c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d903      	bls.n	8002a10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e15c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
 8002a0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	4b91      	ldr	r3, [pc, #580]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ee      	bne.n	80029fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a4 	beq.w	8002b72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b88      	ldr	r3, [pc, #544]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a87      	ldr	r2, [pc, #540]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b85      	ldr	r3, [pc, #532]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a52:	4b82      	ldr	r3, [pc, #520]	@ (8002c5c <HAL_RCC_OscConfig+0x4d0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c5c <HAL_RCC_OscConfig+0x4d0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7e      	ldr	r2, [pc, #504]	@ (8002c5c <HAL_RCC_OscConfig+0x4d0>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fd97 	bl	800159c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7fe fd93 	bl	800159c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b64      	cmp	r3, #100	@ 0x64
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e120      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a84:	4b75      	ldr	r3, [pc, #468]	@ (8002c5c <HAL_RCC_OscConfig+0x4d0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x31a>
 8002a98:	4b6f      	ldr	r3, [pc, #444]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa4:	e02d      	b.n	8002b02 <HAL_RCC_OscConfig+0x376>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x33c>
 8002aae:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	4a69      	ldr	r2, [pc, #420]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aba:	4b67      	ldr	r3, [pc, #412]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a66      	ldr	r2, [pc, #408]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac6:	e01c      	b.n	8002b02 <HAL_RCC_OscConfig+0x376>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d10c      	bne.n	8002aea <HAL_RCC_OscConfig+0x35e>
 8002ad0:	4b61      	ldr	r3, [pc, #388]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	4a60      	ldr	r2, [pc, #384]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8002adc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCC_OscConfig+0x376>
 8002aea:	4b5b      	ldr	r3, [pc, #364]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a5a      	ldr	r2, [pc, #360]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af6:	4b58      	ldr	r3, [pc, #352]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	4a57      	ldr	r2, [pc, #348]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d015      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fd47 	bl	800159c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fd43 	bl	800159c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0ce      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	4b4b      	ldr	r3, [pc, #300]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ee      	beq.n	8002b12 <HAL_RCC_OscConfig+0x386>
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe fd31 	bl	800159c <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fd2d 	bl	800159c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	4b40      	ldr	r3, [pc, #256]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b3c      	ldr	r3, [pc, #240]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80a4 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d06b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d149      	bne.n	8002c24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a30      	ldr	r2, [pc, #192]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fcfe 	bl	800159c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fcfa 	bl	800159c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e087      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b28      	ldr	r3, [pc, #160]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	4313      	orrs	r3, r2
 8002be8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002bee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a18      	ldr	r2, [pc, #96]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fcce 	bl	800159c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fcca 	bl	800159c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e057      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x478>
 8002c22:	e04f      	b.n	8002cc4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0b      	ldr	r2, [pc, #44]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fcb4 	bl	800159c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fcb0 	bl	800159c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e03d      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x4ac>
 8002c56:	e035      	b.n	8002cc4 <HAL_RCC_OscConfig+0x538>
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x544>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d11a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d0      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cec:	4b6a      	ldr	r3, [pc, #424]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d910      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b67      	ldr	r3, [pc, #412]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 020f 	bic.w	r2, r3, #15
 8002d02:	4965      	ldr	r1, [pc, #404]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a58      	ldr	r2, [pc, #352]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a52      	ldr	r2, [pc, #328]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d040      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d115      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b41      	ldr	r3, [pc, #260]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e073      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	4b3d      	ldr	r3, [pc, #244]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06b      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4b39      	ldr	r3, [pc, #228]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4936      	ldr	r1, [pc, #216]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc8:	f7fe fbe8 	bl	800159c <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7fe fbe4 	bl	800159c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e053      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 020c 	and.w	r2, r3, #12
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1eb      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d210      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b24      	ldr	r3, [pc, #144]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 020f 	bic.w	r2, r3, #15
 8002e0e:	4922      	ldr	r1, [pc, #136]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e52:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1cc>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1d0>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1d4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fb44 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	080055e4 	.word	0x080055e4
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b094      	sub	sp, #80	@ 0x50
 8002eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb8:	2300      	movs	r3, #0
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec4:	4b79      	ldr	r3, [pc, #484]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d00d      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x40>
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	f200 80e1 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ede:	e0db      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b73      	ldr	r3, [pc, #460]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ee4:	e0db      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee6:	4b73      	ldr	r3, [pc, #460]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eea:	e0d8      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b6f      	ldr	r3, [pc, #444]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b6a      	ldr	r3, [pc, #424]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	2200      	movs	r2, #0
 8002f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	0159      	lsls	r1, r3, #5
 8002f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f30:	0150      	lsls	r0, r2, #5
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4621      	mov	r1, r4
 8002f38:	1a51      	subs	r1, r2, r1
 8002f3a:	6139      	str	r1, [r7, #16]
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f50:	4659      	mov	r1, fp
 8002f52:	018b      	lsls	r3, r1, #6
 8002f54:	4651      	mov	r1, sl
 8002f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	018a      	lsls	r2, r1, #6
 8002f5e:	4651      	mov	r1, sl
 8002f60:	ebb2 0801 	subs.w	r8, r2, r1
 8002f64:	4659      	mov	r1, fp
 8002f66:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7e:	4690      	mov	r8, r2
 8002f80:	4699      	mov	r9, r3
 8002f82:	4623      	mov	r3, r4
 8002f84:	eb18 0303 	adds.w	r3, r8, r3
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	eb49 0303 	adc.w	r3, r9, r3
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	024b      	lsls	r3, r1, #9
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa8:	4621      	mov	r1, r4
 8002faa:	024a      	lsls	r2, r1, #9
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fbc:	f7fd f980 	bl	80002c0 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc8:	e058      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0159      	lsls	r1, r3, #5
 8002ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff6:	0150      	lsls	r0, r2, #5
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003002:	4649      	mov	r1, r9
 8003004:	eb63 0b01 	sbc.w	fp, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800301c:	ebb2 040a 	subs.w	r4, r2, sl
 8003020:	eb63 050b 	sbc.w	r5, r3, fp
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	00eb      	lsls	r3, r5, #3
 800302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4643      	mov	r3, r8
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	464b      	mov	r3, r9
 8003040:	eb45 0303 	adc.w	r3, r5, r3
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003052:	4629      	mov	r1, r5
 8003054:	028b      	lsls	r3, r1, #10
 8003056:	4621      	mov	r1, r4
 8003058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800305c:	4621      	mov	r1, r4
 800305e:	028a      	lsls	r2, r1, #10
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003066:	2200      	movs	r2, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	61fa      	str	r2, [r7, #28]
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	f7fd f926 	bl	80002c0 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800308c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800308e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003096:	e002      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800309a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3750      	adds	r7, #80	@ 0x50
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_RCC_GetHCLKFreq+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0a9b      	lsrs	r3, r3, #10
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4903      	ldr	r1, [pc, #12]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40023800 	.word	0x40023800
 80030f4:	080055f4 	.word	0x080055f4

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030fc:	f7ff ffdc 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0b5b      	lsrs	r3, r3, #13
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4903      	ldr	r1, [pc, #12]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x24>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	080055f4 	.word	0x080055f4

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003148:	4b69      	ldr	r3, [pc, #420]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a68      	ldr	r2, [pc, #416]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003152:	6093      	str	r3, [r2, #8]
 8003154:	4b66      	ldr	r3, [pc, #408]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315c:	4964      	ldr	r1, [pc, #400]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800316a:	2301      	movs	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d017      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800317a:	4b5d      	ldr	r3, [pc, #372]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003180:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	4959      	ldr	r1, [pc, #356]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003198:	d101      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b6:	4b4e      	ldr	r3, [pc, #312]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	494a      	ldr	r1, [pc, #296]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 808b 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a39      	ldr	r2, [pc, #228]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003210:	4b37      	ldr	r3, [pc, #220]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800321c:	4b35      	ldr	r3, [pc, #212]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a34      	ldr	r2, [pc, #208]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fe f9b8 	bl	800159c <HAL_GetTick>
 800322c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe f9b4 	bl	800159c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	@ 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e357      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003242:	4b2c      	ldr	r3, [pc, #176]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324e:	4b28      	ldr	r3, [pc, #160]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d035      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d02e      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326c:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003282:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003286:	4a1a      	ldr	r2, [pc, #104]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800328e:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003294:	4b16      	ldr	r3, [pc, #88]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d114      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe f97c 	bl	800159c <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	e00a      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fe f978 	bl	800159c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e319      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ee      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032d6:	d111      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	4901      	ldr	r1, [pc, #4]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
 80032ee:	e00b      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000
 80032f8:	0ffffcff 	.word	0x0ffffcff
 80032fc:	4baa      	ldr	r3, [pc, #680]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4aa9      	ldr	r2, [pc, #676]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003302:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003306:	6093      	str	r3, [r2, #8]
 8003308:	4ba7      	ldr	r3, [pc, #668]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	49a4      	ldr	r1, [pc, #656]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003316:	4313      	orrs	r3, r2
 8003318:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003326:	4ba0      	ldr	r3, [pc, #640]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800332c:	4a9e      	ldr	r2, [pc, #632]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003332:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003336:	4b9c      	ldr	r3, [pc, #624]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003338:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	4999      	ldr	r1, [pc, #612]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003354:	4b94      	ldr	r3, [pc, #592]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003362:	4991      	ldr	r1, [pc, #580]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003376:	4b8c      	ldr	r3, [pc, #560]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003384:	4988      	ldr	r1, [pc, #544]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003398:	4b83      	ldr	r3, [pc, #524]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a6:	4980      	ldr	r1, [pc, #512]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ba:	4b7b      	ldr	r3, [pc, #492]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c8:	4977      	ldr	r1, [pc, #476]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033dc:	4b72      	ldr	r3, [pc, #456]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	496f      	ldr	r1, [pc, #444]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fe:	4b6a      	ldr	r3, [pc, #424]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	f023 020c 	bic.w	r2, r3, #12
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340c:	4966      	ldr	r1, [pc, #408]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003420:	4b61      	ldr	r3, [pc, #388]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	495e      	ldr	r1, [pc, #376]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003442:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003448:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003450:	4955      	ldr	r1, [pc, #340]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003464:	4b50      	ldr	r3, [pc, #320]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003472:	494d      	ldr	r1, [pc, #308]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003486:	4b48      	ldr	r3, [pc, #288]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	4944      	ldr	r1, [pc, #272]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034a8:	4b3f      	ldr	r3, [pc, #252]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	493c      	ldr	r1, [pc, #240]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ca:	4b37      	ldr	r3, [pc, #220]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	4933      	ldr	r1, [pc, #204]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ec:	4b2e      	ldr	r3, [pc, #184]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034fa:	492b      	ldr	r1, [pc, #172]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800350e:	4b26      	ldr	r3, [pc, #152]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800351c:	4922      	ldr	r1, [pc, #136]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003528:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800352c:	d101      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800352e:	2301      	movs	r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355c:	4912      	ldr	r1, [pc, #72]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003570:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003580:	4909      	ldr	r1, [pc, #36]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d006      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80d9 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800359c:	4b02      	ldr	r3, [pc, #8]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a01      	ldr	r2, [pc, #4]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035a6:	e001      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ae:	f7fd fff5 	bl	800159c <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035b6:	f7fd fff1 	bl	800159c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	@ 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e194      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035c8:	4b6c      	ldr	r3, [pc, #432]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d021      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d11d      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035e8:	4b64      	ldr	r3, [pc, #400]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035f6:	4b61      	ldr	r3, [pc, #388]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035fc:	0e1b      	lsrs	r3, r3, #24
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	019a      	lsls	r2, r3, #6
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	071b      	lsls	r3, r3, #28
 800361c:	4957      	ldr	r1, [pc, #348]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d02e      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364e:	d129      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003650:	4b4a      	ldr	r3, [pc, #296]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800365e:	4b47      	ldr	r3, [pc, #284]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003664:	0f1b      	lsrs	r3, r3, #28
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	019a      	lsls	r2, r3, #6
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	061b      	lsls	r3, r3, #24
 800367e:	431a      	orrs	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	071b      	lsls	r3, r3, #28
 8003684:	493d      	ldr	r1, [pc, #244]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800368c:	4b3b      	ldr	r3, [pc, #236]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003692:	f023 021f 	bic.w	r2, r3, #31
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	3b01      	subs	r3, #1
 800369c:	4937      	ldr	r1, [pc, #220]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01d      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036b0:	4b32      	ldr	r3, [pc, #200]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b6:	0e1b      	lsrs	r3, r3, #24
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036be:	4b2f      	ldr	r3, [pc, #188]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c4:	0f1b      	lsrs	r3, r3, #28
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	019a      	lsls	r2, r3, #6
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	431a      	orrs	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	431a      	orrs	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	071b      	lsls	r3, r3, #28
 80036e4:	4925      	ldr	r1, [pc, #148]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d011      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	019a      	lsls	r2, r3, #6
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	061b      	lsls	r3, r3, #24
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	071b      	lsls	r3, r3, #28
 8003714:	4919      	ldr	r1, [pc, #100]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a16      	ldr	r2, [pc, #88]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003722:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003728:	f7fd ff38 	bl	800159c <HAL_GetTick>
 800372c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003730:	f7fd ff34 	bl	800159c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	@ 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0d7      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003742:	4b0e      	ldr	r3, [pc, #56]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 80cd 	bne.w	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a08      	ldr	r2, [pc, #32]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003762:	f7fd ff1b 	bl	800159c <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800376a:	f7fd ff17 	bl	800159c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	@ 0x64
 8003776:	d903      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0ba      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800377c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003780:	4b5e      	ldr	r3, [pc, #376]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378c:	d0ed      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d02e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d12a      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037b6:	4b51      	ldr	r3, [pc, #324]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037c4:	4b4d      	ldr	r3, [pc, #308]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	0f1b      	lsrs	r3, r3, #28
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	019a      	lsls	r2, r3, #6
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	061b      	lsls	r3, r3, #24
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	071b      	lsls	r3, r3, #28
 80037ea:	4944      	ldr	r1, [pc, #272]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037f2:	4b42      	ldr	r3, [pc, #264]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	493d      	ldr	r1, [pc, #244]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d022      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003820:	d11d      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003822:	4b36      	ldr	r3, [pc, #216]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003828:	0e1b      	lsrs	r3, r3, #24
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003830:	4b32      	ldr	r3, [pc, #200]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	0f1b      	lsrs	r3, r3, #28
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	019a      	lsls	r2, r3, #6
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	061b      	lsls	r3, r3, #24
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	071b      	lsls	r3, r3, #28
 8003856:	4929      	ldr	r1, [pc, #164]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d028      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	0e1b      	lsrs	r3, r3, #24
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003878:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	019a      	lsls	r2, r3, #6
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	431a      	orrs	r2, r3
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	071b      	lsls	r3, r3, #28
 800389e:	4917      	ldr	r1, [pc, #92]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038a6:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	4911      	ldr	r1, [pc, #68]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038bc:	4b0f      	ldr	r3, [pc, #60]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0e      	ldr	r2, [pc, #56]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c8:	f7fd fe68 	bl	800159c <HAL_GetTick>
 80038cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038d0:	f7fd fe64 	bl	800159c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	@ 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e007      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ee:	d1ef      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800

08003900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e040      	b.n	8003994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fc28 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	@ 0x24
 800392c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fbde 	bl	8004108 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f977 	bl	8003c40 <UART_SetConfig>
 8003952:	4603      	mov	r3, r0
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e01b      	b.n	8003994 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800396a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800397a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fc5d 	bl	800424c <UART_CheckIdleState>
 8003992:	4603      	mov	r3, r0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d177      	bne.n	8003aa4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_UART_Transmit+0x24>
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e070      	b.n	8003aa6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2221      	movs	r2, #33	@ 0x21
 80039d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d2:	f7fd fde3 	bl	800159c <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	88fa      	ldrh	r2, [r7, #6]
 80039dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f0:	d108      	bne.n	8003a04 <HAL_UART_Transmit+0x68>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	e003      	b.n	8003a0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a0c:	e02f      	b.n	8003a6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2180      	movs	r1, #128	@ 0x80
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fc6e 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e03b      	b.n	8003aa6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	3302      	adds	r3, #2
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e007      	b.n	8003a5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1c9      	bne.n	8003a0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2140      	movs	r1, #64	@ 0x40
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fc38 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e005      	b.n	8003aa6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b08a      	sub	sp, #40	@ 0x28
 8003ab2:	af02      	add	r7, sp, #8
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	f040 80b5 	bne.w	8003c34 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_UART_Receive+0x28>
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0ad      	b.n	8003c36 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2222      	movs	r2, #34	@ 0x22
 8003ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af0:	f7fd fd54 	bl	800159c <HAL_GetTick>
 8003af4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0e:	d10e      	bne.n	8003b2e <HAL_UART_Receive+0x80>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <HAL_UART_Receive+0x76>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b22:	e02d      	b.n	8003b80 <HAL_UART_Receive+0xd2>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	22ff      	movs	r2, #255	@ 0xff
 8003b28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b2c:	e028      	b.n	8003b80 <HAL_UART_Receive+0xd2>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <HAL_UART_Receive+0xa4>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_Receive+0x9a>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	22ff      	movs	r2, #255	@ 0xff
 8003b42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b46:	e01b      	b.n	8003b80 <HAL_UART_Receive+0xd2>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	227f      	movs	r2, #127	@ 0x7f
 8003b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b50:	e016      	b.n	8003b80 <HAL_UART_Receive+0xd2>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b5a:	d10d      	bne.n	8003b78 <HAL_UART_Receive+0xca>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <HAL_UART_Receive+0xc0>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	227f      	movs	r2, #127	@ 0x7f
 8003b68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b6c:	e008      	b.n	8003b80 <HAL_UART_Receive+0xd2>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	223f      	movs	r2, #63	@ 0x3f
 8003b72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b76:	e003      	b.n	8003b80 <HAL_UART_Receive+0xd2>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b86:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b90:	d108      	bne.n	8003ba4 <HAL_UART_Receive+0xf6>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e003      	b.n	8003bac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003bac:	e036      	b.n	8003c1c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fb9e 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e032      	b.n	8003c36 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	8a7b      	ldrh	r3, [r7, #18]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	3302      	adds	r3, #2
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e00c      	b.n	8003c0a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	8a7b      	ldrh	r3, [r7, #18]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	3301      	adds	r3, #1
 8003c08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1c2      	bne.n	8003bae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4ba6      	ldr	r3, [pc, #664]	@ (8003f04 <UART_SetConfig+0x2c4>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	6979      	ldr	r1, [r7, #20]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a94      	ldr	r2, [pc, #592]	@ (8003f08 <UART_SetConfig+0x2c8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d120      	bne.n	8003cfe <UART_SetConfig+0xbe>
 8003cbc:	4b93      	ldr	r3, [pc, #588]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d816      	bhi.n	8003cf8 <UART_SetConfig+0xb8>
 8003cca:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <UART_SetConfig+0x90>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003ce1 	.word	0x08003ce1
 8003cd4:	08003ced 	.word	0x08003ced
 8003cd8:	08003ce7 	.word	0x08003ce7
 8003cdc:	08003cf3 	.word	0x08003cf3
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e150      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e14d      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cec:	2304      	movs	r3, #4
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e14a      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e147      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e144      	b.n	8003f88 <UART_SetConfig+0x348>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a83      	ldr	r2, [pc, #524]	@ (8003f10 <UART_SetConfig+0x2d0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d132      	bne.n	8003d6e <UART_SetConfig+0x12e>
 8003d08:	4b80      	ldr	r3, [pc, #512]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d828      	bhi.n	8003d68 <UART_SetConfig+0x128>
 8003d16:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0xdc>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d69 	.word	0x08003d69
 8003d24:	08003d69 	.word	0x08003d69
 8003d28:	08003d69 	.word	0x08003d69
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d69 	.word	0x08003d69
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003d69 	.word	0x08003d69
 8003d3c:	08003d57 	.word	0x08003d57
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d69 	.word	0x08003d69
 8003d4c:	08003d63 	.word	0x08003d63
 8003d50:	2300      	movs	r3, #0
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e118      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e115      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e112      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d62:	2308      	movs	r3, #8
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e10f      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e10c      	b.n	8003f88 <UART_SetConfig+0x348>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a68      	ldr	r2, [pc, #416]	@ (8003f14 <UART_SetConfig+0x2d4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d120      	bne.n	8003dba <UART_SetConfig+0x17a>
 8003d78:	4b64      	ldr	r3, [pc, #400]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d82:	2b30      	cmp	r3, #48	@ 0x30
 8003d84:	d013      	beq.n	8003dae <UART_SetConfig+0x16e>
 8003d86:	2b30      	cmp	r3, #48	@ 0x30
 8003d88:	d814      	bhi.n	8003db4 <UART_SetConfig+0x174>
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d009      	beq.n	8003da2 <UART_SetConfig+0x162>
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d810      	bhi.n	8003db4 <UART_SetConfig+0x174>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <UART_SetConfig+0x15c>
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d006      	beq.n	8003da8 <UART_SetConfig+0x168>
 8003d9a:	e00b      	b.n	8003db4 <UART_SetConfig+0x174>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e0f2      	b.n	8003f88 <UART_SetConfig+0x348>
 8003da2:	2302      	movs	r3, #2
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e0ef      	b.n	8003f88 <UART_SetConfig+0x348>
 8003da8:	2304      	movs	r3, #4
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e0ec      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dae:	2308      	movs	r3, #8
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e0e9      	b.n	8003f88 <UART_SetConfig+0x348>
 8003db4:	2310      	movs	r3, #16
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e0e6      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a56      	ldr	r2, [pc, #344]	@ (8003f18 <UART_SetConfig+0x2d8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d120      	bne.n	8003e06 <UART_SetConfig+0x1c6>
 8003dc4:	4b51      	ldr	r3, [pc, #324]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd0:	d013      	beq.n	8003dfa <UART_SetConfig+0x1ba>
 8003dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd4:	d814      	bhi.n	8003e00 <UART_SetConfig+0x1c0>
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d009      	beq.n	8003dee <UART_SetConfig+0x1ae>
 8003dda:	2b80      	cmp	r3, #128	@ 0x80
 8003ddc:	d810      	bhi.n	8003e00 <UART_SetConfig+0x1c0>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <UART_SetConfig+0x1a8>
 8003de2:	2b40      	cmp	r3, #64	@ 0x40
 8003de4:	d006      	beq.n	8003df4 <UART_SetConfig+0x1b4>
 8003de6:	e00b      	b.n	8003e00 <UART_SetConfig+0x1c0>
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e0cc      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dee:	2302      	movs	r3, #2
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e0c9      	b.n	8003f88 <UART_SetConfig+0x348>
 8003df4:	2304      	movs	r3, #4
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e0c6      	b.n	8003f88 <UART_SetConfig+0x348>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e0c3      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e00:	2310      	movs	r3, #16
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e0c0      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a44      	ldr	r2, [pc, #272]	@ (8003f1c <UART_SetConfig+0x2dc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d125      	bne.n	8003e5c <UART_SetConfig+0x21c>
 8003e10:	4b3e      	ldr	r3, [pc, #248]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e1e:	d017      	beq.n	8003e50 <UART_SetConfig+0x210>
 8003e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e24:	d817      	bhi.n	8003e56 <UART_SetConfig+0x216>
 8003e26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e2a:	d00b      	beq.n	8003e44 <UART_SetConfig+0x204>
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e30:	d811      	bhi.n	8003e56 <UART_SetConfig+0x216>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <UART_SetConfig+0x1fe>
 8003e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3a:	d006      	beq.n	8003e4a <UART_SetConfig+0x20a>
 8003e3c:	e00b      	b.n	8003e56 <UART_SetConfig+0x216>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e0a1      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e44:	2302      	movs	r3, #2
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e09e      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e09b      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e50:	2308      	movs	r3, #8
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e098      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e56:	2310      	movs	r3, #16
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e095      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	@ (8003f20 <UART_SetConfig+0x2e0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d125      	bne.n	8003eb2 <UART_SetConfig+0x272>
 8003e66:	4b29      	ldr	r3, [pc, #164]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e74:	d017      	beq.n	8003ea6 <UART_SetConfig+0x266>
 8003e76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e7a:	d817      	bhi.n	8003eac <UART_SetConfig+0x26c>
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e80:	d00b      	beq.n	8003e9a <UART_SetConfig+0x25a>
 8003e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e86:	d811      	bhi.n	8003eac <UART_SetConfig+0x26c>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <UART_SetConfig+0x254>
 8003e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e90:	d006      	beq.n	8003ea0 <UART_SetConfig+0x260>
 8003e92:	e00b      	b.n	8003eac <UART_SetConfig+0x26c>
 8003e94:	2301      	movs	r3, #1
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e076      	b.n	8003f88 <UART_SetConfig+0x348>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e073      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e070      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e06d      	b.n	8003f88 <UART_SetConfig+0x348>
 8003eac:	2310      	movs	r3, #16
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e06a      	b.n	8003f88 <UART_SetConfig+0x348>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f24 <UART_SetConfig+0x2e4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d138      	bne.n	8003f2e <UART_SetConfig+0x2ee>
 8003ebc:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <UART_SetConfig+0x2cc>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ec6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eca:	d017      	beq.n	8003efc <UART_SetConfig+0x2bc>
 8003ecc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ed0:	d82a      	bhi.n	8003f28 <UART_SetConfig+0x2e8>
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed6:	d00b      	beq.n	8003ef0 <UART_SetConfig+0x2b0>
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003edc:	d824      	bhi.n	8003f28 <UART_SetConfig+0x2e8>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <UART_SetConfig+0x2aa>
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee6:	d006      	beq.n	8003ef6 <UART_SetConfig+0x2b6>
 8003ee8:	e01e      	b.n	8003f28 <UART_SetConfig+0x2e8>
 8003eea:	2300      	movs	r3, #0
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e04b      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e048      	b.n	8003f88 <UART_SetConfig+0x348>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e045      	b.n	8003f88 <UART_SetConfig+0x348>
 8003efc:	2308      	movs	r3, #8
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e042      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f02:	bf00      	nop
 8003f04:	efff69f3 	.word	0xefff69f3
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40004400 	.word	0x40004400
 8003f14:	40004800 	.word	0x40004800
 8003f18:	40004c00 	.word	0x40004c00
 8003f1c:	40005000 	.word	0x40005000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	40007800 	.word	0x40007800
 8003f28:	2310      	movs	r3, #16
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e02c      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a72      	ldr	r2, [pc, #456]	@ (80040fc <UART_SetConfig+0x4bc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d125      	bne.n	8003f84 <UART_SetConfig+0x344>
 8003f38:	4b71      	ldr	r3, [pc, #452]	@ (8004100 <UART_SetConfig+0x4c0>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f46:	d017      	beq.n	8003f78 <UART_SetConfig+0x338>
 8003f48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f4c:	d817      	bhi.n	8003f7e <UART_SetConfig+0x33e>
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f52:	d00b      	beq.n	8003f6c <UART_SetConfig+0x32c>
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f58:	d811      	bhi.n	8003f7e <UART_SetConfig+0x33e>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <UART_SetConfig+0x326>
 8003f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f62:	d006      	beq.n	8003f72 <UART_SetConfig+0x332>
 8003f64:	e00b      	b.n	8003f7e <UART_SetConfig+0x33e>
 8003f66:	2300      	movs	r3, #0
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e00d      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e00a      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f72:	2304      	movs	r3, #4
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e007      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f78:	2308      	movs	r3, #8
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e004      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f7e:	2310      	movs	r3, #16
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e001      	b.n	8003f88 <UART_SetConfig+0x348>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f90:	d15b      	bne.n	800404a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d828      	bhi.n	8003fea <UART_SetConfig+0x3aa>
 8003f98:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <UART_SetConfig+0x360>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fcd 	.word	0x08003fcd
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	08003feb 	.word	0x08003feb
 8003fb0:	08003fdb 	.word	0x08003fdb
 8003fb4:	08003feb 	.word	0x08003feb
 8003fb8:	08003feb 	.word	0x08003feb
 8003fbc:	08003feb 	.word	0x08003feb
 8003fc0:	08003fe3 	.word	0x08003fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7ff f884 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	61b8      	str	r0, [r7, #24]
        break;
 8003fca:	e013      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7ff f894 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	61b8      	str	r0, [r7, #24]
        break;
 8003fd2:	e00f      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004104 <UART_SetConfig+0x4c4>)
 8003fd6:	61bb      	str	r3, [r7, #24]
        break;
 8003fd8:	e00c      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fda:	f7fe ff67 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8003fde:	61b8      	str	r0, [r7, #24]
        break;
 8003fe0:	e008      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe6:	61bb      	str	r3, [r7, #24]
        break;
 8003fe8:	e004      	b.n	8003ff4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ff2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d074      	beq.n	80040e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	005a      	lsls	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	d916      	bls.n	8004044 <UART_SetConfig+0x404>
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401c:	d212      	bcs.n	8004044 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f023 030f 	bic.w	r3, r3, #15
 8004026:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	b29b      	uxth	r3, r3
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	b29a      	uxth	r2, r3
 8004034:	89fb      	ldrh	r3, [r7, #14]
 8004036:	4313      	orrs	r3, r2
 8004038:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	89fa      	ldrh	r2, [r7, #14]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	e04f      	b.n	80040e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	77bb      	strb	r3, [r7, #30]
 8004048:	e04c      	b.n	80040e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800404a:	7ffb      	ldrb	r3, [r7, #31]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d828      	bhi.n	80040a2 <UART_SetConfig+0x462>
 8004050:	a201      	add	r2, pc, #4	@ (adr r2, 8004058 <UART_SetConfig+0x418>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800407d 	.word	0x0800407d
 800405c:	08004085 	.word	0x08004085
 8004060:	0800408d 	.word	0x0800408d
 8004064:	080040a3 	.word	0x080040a3
 8004068:	08004093 	.word	0x08004093
 800406c:	080040a3 	.word	0x080040a3
 8004070:	080040a3 	.word	0x080040a3
 8004074:	080040a3 	.word	0x080040a3
 8004078:	0800409b 	.word	0x0800409b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7ff f828 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8004080:	61b8      	str	r0, [r7, #24]
        break;
 8004082:	e013      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7ff f838 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8004088:	61b8      	str	r0, [r7, #24]
        break;
 800408a:	e00f      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <UART_SetConfig+0x4c4>)
 800408e:	61bb      	str	r3, [r7, #24]
        break;
 8004090:	e00c      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004092:	f7fe ff0b 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004096:	61b8      	str	r0, [r7, #24]
        break;
 8004098:	e008      	b.n	80040ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800409e:	61bb      	str	r3, [r7, #24]
        break;
 80040a0:	e004      	b.n	80040ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	77bb      	strb	r3, [r7, #30]
        break;
 80040aa:	bf00      	nop
    }

    if (pclk != 0U)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	085a      	lsrs	r2, r3, #1
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b0f      	cmp	r3, #15
 80040ca:	d909      	bls.n	80040e0 <UART_SetConfig+0x4a0>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d2:	d205      	bcs.n	80040e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	e001      	b.n	80040e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40007c00 	.word	0x40007c00
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400

08004108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01a      	beq.n	800421e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004206:	d10a      	bne.n	800421e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	@ 0x30
 8004250:	af02      	add	r7, sp, #8
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800425c:	f7fd f99e 	bl	800159c <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d12e      	bne.n	80042ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004270:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	2200      	movs	r2, #0
 800427a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f83b 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d021      	beq.n	80042ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	60fb      	str	r3, [r7, #12]
   return(result);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	617b      	str	r3, [r7, #20]
   return(result);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e6      	bne.n	800428a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e011      	b.n	80042f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3728      	adds	r7, #40	@ 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	e04f      	b.n	80043ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d04b      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004314:	f7fd f942 	bl	800159c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <UART_WaitOnFlagUntilTimeout+0x30>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e04e      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d037      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b80      	cmp	r3, #128	@ 0x80
 8004340:	d034      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0xb2>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	d031      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d110      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2208      	movs	r2, #8
 800435c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f838 	bl	80043d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2208      	movs	r2, #8
 8004368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e029      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004386:	d111      	bne.n	80043ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004390:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f81e 	bl	80043d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e00f      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d0a0      	beq.n	800430c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b095      	sub	sp, #84	@ 0x54
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e6      	bne.n	80043dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	61fb      	str	r3, [r7, #28]
   return(result);
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800442e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e5      	bne.n	800440e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	2b01      	cmp	r3, #1
 8004448:	d118      	bne.n	800447c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	60bb      	str	r3, [r7, #8]
   return(result);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0310 	bic.w	r3, r3, #16
 800445e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	613b      	str	r3, [r7, #16]
   return(result);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004490:	bf00      	nop
 8004492:	3754      	adds	r7, #84	@ 0x54
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800449c:	b084      	sub	sp, #16
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	f107 001c 	add.w	r0, r7, #28
 80044aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d121      	bne.n	80044fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	4b21      	ldr	r3, [pc, #132]	@ (800454c <USB_CoreInit+0xb0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa92 	bl	8004a18 <USB_CoreReset>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e010      	b.n	800451c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa86 	bl	8004a18 <USB_CoreReset>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800451c:	7fbb      	ldrb	r3, [r7, #30]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10b      	bne.n	800453a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f043 0206 	orr.w	r2, r3, #6
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004546:	b004      	add	sp, #16
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	ffbdffbf 	.word	0xffbdffbf

08004550 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 0201 	bic.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d115      	bne.n	80045c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045a0:	200a      	movs	r0, #10
 80045a2:	f7fd f807 	bl	80015b4 <HAL_Delay>
      ms += 10U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	330a      	adds	r3, #10
 80045aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fa25 	bl	80049fc <USB_GetMode>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d01e      	beq.n	80045f6 <USB_SetCurrentMode+0x84>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80045bc:	d9f0      	bls.n	80045a0 <USB_SetCurrentMode+0x2e>
 80045be:	e01a      	b.n	80045f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d115      	bne.n	80045f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045d2:	200a      	movs	r0, #10
 80045d4:	f7fc ffee 	bl	80015b4 <HAL_Delay>
      ms += 10U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	330a      	adds	r3, #10
 80045dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa0c 	bl	80049fc <USB_GetMode>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <USB_SetCurrentMode+0x84>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80045ee:	d9f0      	bls.n	80045d2 <USB_SetCurrentMode+0x60>
 80045f0:	e001      	b.n	80045f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e005      	b.n	8004602 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2bc8      	cmp	r3, #200	@ 0xc8
 80045fa:	d101      	bne.n	8004600 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800460c:	b084      	sub	sp, #16
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800461a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	e009      	b.n	8004640 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3340      	adds	r3, #64	@ 0x40
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	2200      	movs	r2, #0
 8004638:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3301      	adds	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b0e      	cmp	r3, #14
 8004644:	d9f2      	bls.n	800462c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004646:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11c      	bne.n	8004688 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004666:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e005      	b.n	8004694 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800469a:	461a      	mov	r2, r3
 800469c:	2300      	movs	r3, #0
 800469e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10d      	bne.n	80046c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046b0:	2100      	movs	r1, #0
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f968 	bl	8004988 <USB_SetDevSpeed>
 80046b8:	e008      	b.n	80046cc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046ba:	2101      	movs	r1, #1
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f963 	bl	8004988 <USB_SetDevSpeed>
 80046c2:	e003      	b.n	80046cc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046c4:	2103      	movs	r1, #3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f95e 	bl	8004988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046cc:	2110      	movs	r1, #16
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8fa 	bl	80048c8 <USB_FlushTxFifo>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f924 	bl	800492c <USB_FlushRxFifo>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f4:	461a      	mov	r2, r3
 80046f6:	2300      	movs	r3, #0
 80046f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470c:	461a      	mov	r2, r3
 800470e:	2300      	movs	r3, #0
 8004710:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	e043      	b.n	80047a0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800472a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800472e:	d118      	bne.n	8004762 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004742:	461a      	mov	r2, r3
 8004744:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e013      	b.n	8004774 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e008      	b.n	8004774 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476e:	461a      	mov	r2, r3
 8004770:	2300      	movs	r3, #0
 8004772:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004780:	461a      	mov	r2, r3
 8004782:	2300      	movs	r3, #0
 8004784:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004792:	461a      	mov	r2, r3
 8004794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3301      	adds	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047a4:	461a      	mov	r2, r3
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d3b5      	bcc.n	8004718 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e043      	b.n	800483a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047c8:	d118      	bne.n	80047fc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	e013      	b.n	800480e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f2:	461a      	mov	r2, r3
 80047f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e008      	b.n	800480e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	2300      	movs	r3, #0
 800480c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481a:	461a      	mov	r2, r3
 800481c:	2300      	movs	r3, #0
 800481e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3301      	adds	r3, #1
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800483e:	461a      	mov	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4293      	cmp	r3, r2
 8004844:	d3b5      	bcc.n	80047b2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004858:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004866:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004868:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f043 0210 	orr.w	r2, r3, #16
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <USB_DevInit+0x2b4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f043 0208 	orr.w	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800489c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <USB_DevInit+0x2b8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048bc:	b004      	add	sp, #16
 80048be:	4770      	bx	lr
 80048c0:	803c3800 	.word	0x803c3800
 80048c4:	40000004 	.word	0x40000004

080048c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e2:	d901      	bls.n	80048e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e01b      	b.n	8004920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	daf2      	bge.n	80048d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	019b      	lsls	r3, r3, #6
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800490c:	d901      	bls.n	8004912 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e006      	b.n	8004920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d0f0      	beq.n	8004900 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3301      	adds	r3, #1
 800493c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004944:	d901      	bls.n	800494a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e018      	b.n	800497c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	daf2      	bge.n	8004938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2210      	movs	r2, #16
 800495a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004968:	d901      	bls.n	800496e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e006      	b.n	800497c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d0f0      	beq.n	800495c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	68f9      	ldr	r1, [r7, #12]
 80049a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049d4:	f023 0303 	bic.w	r3, r3, #3
 80049d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0301 	and.w	r3, r3, #1
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a30:	d901      	bls.n	8004a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e022      	b.n	8004a7c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	daf2      	bge.n	8004a24 <USB_CoreReset+0xc>

  count = 10U;
 8004a3e:	230a      	movs	r3, #10
 8004a40:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004a42:	e002      	b.n	8004a4a <USB_CoreReset+0x32>
  {
    count--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f9      	bne.n	8004a44 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a68:	d901      	bls.n	8004a6e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e006      	b.n	8004a7c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d0f0      	beq.n	8004a5c <USB_CoreReset+0x44>

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <siprintf>:
 8004a88:	b40e      	push	{r1, r2, r3}
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	b09d      	sub	sp, #116	@ 0x74
 8004a8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004a90:	9002      	str	r0, [sp, #8]
 8004a92:	9006      	str	r0, [sp, #24]
 8004a94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a98:	480a      	ldr	r0, [pc, #40]	@ (8004ac4 <siprintf+0x3c>)
 8004a9a:	9107      	str	r1, [sp, #28]
 8004a9c:	9104      	str	r1, [sp, #16]
 8004a9e:	490a      	ldr	r1, [pc, #40]	@ (8004ac8 <siprintf+0x40>)
 8004aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa4:	9105      	str	r1, [sp, #20]
 8004aa6:	2400      	movs	r4, #0
 8004aa8:	a902      	add	r1, sp, #8
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ab0:	f000 f9b8 	bl	8004e24 <_svfiprintf_r>
 8004ab4:	9b02      	ldr	r3, [sp, #8]
 8004ab6:	701c      	strb	r4, [r3, #0]
 8004ab8:	b01d      	add	sp, #116	@ 0x74
 8004aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abe:	b003      	add	sp, #12
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	ffff0208 	.word	0xffff0208

08004acc <memset>:
 8004acc:	4402      	add	r2, r0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <memset+0xa>
 8004ad4:	4770      	bx	lr
 8004ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ada:	e7f9      	b.n	8004ad0 <memset+0x4>

08004adc <strchr>:
 8004adc:	b2c9      	uxtb	r1, r1
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae6:	b112      	cbz	r2, 8004aee <strchr+0x12>
 8004ae8:	428a      	cmp	r2, r1
 8004aea:	d1f9      	bne.n	8004ae0 <strchr+0x4>
 8004aec:	4770      	bx	lr
 8004aee:	2900      	cmp	r1, #0
 8004af0:	bf18      	it	ne
 8004af2:	2000      	movne	r0, #0
 8004af4:	4770      	bx	lr

08004af6 <strstr>:
 8004af6:	780a      	ldrb	r2, [r1, #0]
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	b96a      	cbnz	r2, 8004b18 <strstr+0x22>
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d109      	bne.n	8004b16 <strstr+0x20>
 8004b02:	460c      	mov	r4, r1
 8004b04:	4605      	mov	r5, r0
 8004b06:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f6      	beq.n	8004afc <strstr+0x6>
 8004b0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004b12:	429e      	cmp	r6, r3
 8004b14:	d0f7      	beq.n	8004b06 <strstr+0x10>
 8004b16:	3001      	adds	r0, #1
 8004b18:	7803      	ldrb	r3, [r0, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ef      	bne.n	8004afe <strstr+0x8>
 8004b1e:	4618      	mov	r0, r3
 8004b20:	e7ec      	b.n	8004afc <strstr+0x6>
	...

08004b24 <__errno>:
 8004b24:	4b01      	ldr	r3, [pc, #4]	@ (8004b2c <__errno+0x8>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <__libc_init_array>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	4d0d      	ldr	r5, [pc, #52]	@ (8004b68 <__libc_init_array+0x38>)
 8004b34:	4c0d      	ldr	r4, [pc, #52]	@ (8004b6c <__libc_init_array+0x3c>)
 8004b36:	1b64      	subs	r4, r4, r5
 8004b38:	10a4      	asrs	r4, r4, #2
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	42a6      	cmp	r6, r4
 8004b3e:	d109      	bne.n	8004b54 <__libc_init_array+0x24>
 8004b40:	4d0b      	ldr	r5, [pc, #44]	@ (8004b70 <__libc_init_array+0x40>)
 8004b42:	4c0c      	ldr	r4, [pc, #48]	@ (8004b74 <__libc_init_array+0x44>)
 8004b44:	f000 fc64 	bl	8005410 <_init>
 8004b48:	1b64      	subs	r4, r4, r5
 8004b4a:	10a4      	asrs	r4, r4, #2
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	d105      	bne.n	8004b5e <__libc_init_array+0x2e>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b58:	4798      	blx	r3
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7ee      	b.n	8004b3c <__libc_init_array+0xc>
 8004b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b62:	4798      	blx	r3
 8004b64:	3601      	adds	r6, #1
 8004b66:	e7f2      	b.n	8004b4e <__libc_init_array+0x1e>
 8004b68:	08005638 	.word	0x08005638
 8004b6c:	08005638 	.word	0x08005638
 8004b70:	08005638 	.word	0x08005638
 8004b74:	0800563c 	.word	0x0800563c

08004b78 <__retarget_lock_acquire_recursive>:
 8004b78:	4770      	bx	lr

08004b7a <__retarget_lock_release_recursive>:
 8004b7a:	4770      	bx	lr

08004b7c <_free_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4605      	mov	r5, r0
 8004b80:	2900      	cmp	r1, #0
 8004b82:	d041      	beq.n	8004c08 <_free_r+0x8c>
 8004b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b88:	1f0c      	subs	r4, r1, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfb8      	it	lt
 8004b8e:	18e4      	addlt	r4, r4, r3
 8004b90:	f000 f8e0 	bl	8004d54 <__malloc_lock>
 8004b94:	4a1d      	ldr	r2, [pc, #116]	@ (8004c0c <_free_r+0x90>)
 8004b96:	6813      	ldr	r3, [r2, #0]
 8004b98:	b933      	cbnz	r3, 8004ba8 <_free_r+0x2c>
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	6014      	str	r4, [r2, #0]
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ba4:	f000 b8dc 	b.w	8004d60 <__malloc_unlock>
 8004ba8:	42a3      	cmp	r3, r4
 8004baa:	d908      	bls.n	8004bbe <_free_r+0x42>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf01      	itttt	eq
 8004bb4:	6819      	ldreq	r1, [r3, #0]
 8004bb6:	685b      	ldreq	r3, [r3, #4]
 8004bb8:	1809      	addeq	r1, r1, r0
 8004bba:	6021      	streq	r1, [r4, #0]
 8004bbc:	e7ed      	b.n	8004b9a <_free_r+0x1e>
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b10b      	cbz	r3, 8004bc8 <_free_r+0x4c>
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d9fa      	bls.n	8004bbe <_free_r+0x42>
 8004bc8:	6811      	ldr	r1, [r2, #0]
 8004bca:	1850      	adds	r0, r2, r1
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d10b      	bne.n	8004be8 <_free_r+0x6c>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	4401      	add	r1, r0
 8004bd4:	1850      	adds	r0, r2, r1
 8004bd6:	4283      	cmp	r3, r0
 8004bd8:	6011      	str	r1, [r2, #0]
 8004bda:	d1e0      	bne.n	8004b9e <_free_r+0x22>
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	6053      	str	r3, [r2, #4]
 8004be2:	4408      	add	r0, r1
 8004be4:	6010      	str	r0, [r2, #0]
 8004be6:	e7da      	b.n	8004b9e <_free_r+0x22>
 8004be8:	d902      	bls.n	8004bf0 <_free_r+0x74>
 8004bea:	230c      	movs	r3, #12
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	e7d6      	b.n	8004b9e <_free_r+0x22>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	1821      	adds	r1, r4, r0
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	bf04      	itt	eq
 8004bf8:	6819      	ldreq	r1, [r3, #0]
 8004bfa:	685b      	ldreq	r3, [r3, #4]
 8004bfc:	6063      	str	r3, [r4, #4]
 8004bfe:	bf04      	itt	eq
 8004c00:	1809      	addeq	r1, r1, r0
 8004c02:	6021      	streq	r1, [r4, #0]
 8004c04:	6054      	str	r4, [r2, #4]
 8004c06:	e7ca      	b.n	8004b9e <_free_r+0x22>
 8004c08:	bd38      	pop	{r3, r4, r5, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000a38 	.word	0x20000a38

08004c10 <sbrk_aligned>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4e0f      	ldr	r6, [pc, #60]	@ (8004c50 <sbrk_aligned+0x40>)
 8004c14:	460c      	mov	r4, r1
 8004c16:	6831      	ldr	r1, [r6, #0]
 8004c18:	4605      	mov	r5, r0
 8004c1a:	b911      	cbnz	r1, 8004c22 <sbrk_aligned+0x12>
 8004c1c:	f000 fba4 	bl	8005368 <_sbrk_r>
 8004c20:	6030      	str	r0, [r6, #0]
 8004c22:	4621      	mov	r1, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 fb9f 	bl	8005368 <_sbrk_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d103      	bne.n	8004c36 <sbrk_aligned+0x26>
 8004c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c32:	4620      	mov	r0, r4
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
 8004c36:	1cc4      	adds	r4, r0, #3
 8004c38:	f024 0403 	bic.w	r4, r4, #3
 8004c3c:	42a0      	cmp	r0, r4
 8004c3e:	d0f8      	beq.n	8004c32 <sbrk_aligned+0x22>
 8004c40:	1a21      	subs	r1, r4, r0
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 fb90 	bl	8005368 <_sbrk_r>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d1f2      	bne.n	8004c32 <sbrk_aligned+0x22>
 8004c4c:	e7ef      	b.n	8004c2e <sbrk_aligned+0x1e>
 8004c4e:	bf00      	nop
 8004c50:	20000a34 	.word	0x20000a34

08004c54 <_malloc_r>:
 8004c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c58:	1ccd      	adds	r5, r1, #3
 8004c5a:	f025 0503 	bic.w	r5, r5, #3
 8004c5e:	3508      	adds	r5, #8
 8004c60:	2d0c      	cmp	r5, #12
 8004c62:	bf38      	it	cc
 8004c64:	250c      	movcc	r5, #12
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	4606      	mov	r6, r0
 8004c6a:	db01      	blt.n	8004c70 <_malloc_r+0x1c>
 8004c6c:	42a9      	cmp	r1, r5
 8004c6e:	d904      	bls.n	8004c7a <_malloc_r+0x26>
 8004c70:	230c      	movs	r3, #12
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	2000      	movs	r0, #0
 8004c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d50 <_malloc_r+0xfc>
 8004c7e:	f000 f869 	bl	8004d54 <__malloc_lock>
 8004c82:	f8d8 3000 	ldr.w	r3, [r8]
 8004c86:	461c      	mov	r4, r3
 8004c88:	bb44      	cbnz	r4, 8004cdc <_malloc_r+0x88>
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7ff ffbf 	bl	8004c10 <sbrk_aligned>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	4604      	mov	r4, r0
 8004c96:	d158      	bne.n	8004d4a <_malloc_r+0xf6>
 8004c98:	f8d8 4000 	ldr.w	r4, [r8]
 8004c9c:	4627      	mov	r7, r4
 8004c9e:	2f00      	cmp	r7, #0
 8004ca0:	d143      	bne.n	8004d2a <_malloc_r+0xd6>
 8004ca2:	2c00      	cmp	r4, #0
 8004ca4:	d04b      	beq.n	8004d3e <_malloc_r+0xea>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	4639      	mov	r1, r7
 8004caa:	4630      	mov	r0, r6
 8004cac:	eb04 0903 	add.w	r9, r4, r3
 8004cb0:	f000 fb5a 	bl	8005368 <_sbrk_r>
 8004cb4:	4581      	cmp	r9, r0
 8004cb6:	d142      	bne.n	8004d3e <_malloc_r+0xea>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	1a6d      	subs	r5, r5, r1
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7ff ffa6 	bl	8004c10 <sbrk_aligned>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d03a      	beq.n	8004d3e <_malloc_r+0xea>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	442b      	add	r3, r5
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	bb62      	cbnz	r2, 8004d30 <_malloc_r+0xdc>
 8004cd6:	f8c8 7000 	str.w	r7, [r8]
 8004cda:	e00f      	b.n	8004cfc <_malloc_r+0xa8>
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	1b52      	subs	r2, r2, r5
 8004ce0:	d420      	bmi.n	8004d24 <_malloc_r+0xd0>
 8004ce2:	2a0b      	cmp	r2, #11
 8004ce4:	d917      	bls.n	8004d16 <_malloc_r+0xc2>
 8004ce6:	1961      	adds	r1, r4, r5
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	6025      	str	r5, [r4, #0]
 8004cec:	bf18      	it	ne
 8004cee:	6059      	strne	r1, [r3, #4]
 8004cf0:	6863      	ldr	r3, [r4, #4]
 8004cf2:	bf08      	it	eq
 8004cf4:	f8c8 1000 	streq.w	r1, [r8]
 8004cf8:	5162      	str	r2, [r4, r5]
 8004cfa:	604b      	str	r3, [r1, #4]
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f000 f82f 	bl	8004d60 <__malloc_unlock>
 8004d02:	f104 000b 	add.w	r0, r4, #11
 8004d06:	1d23      	adds	r3, r4, #4
 8004d08:	f020 0007 	bic.w	r0, r0, #7
 8004d0c:	1ac2      	subs	r2, r0, r3
 8004d0e:	bf1c      	itt	ne
 8004d10:	1a1b      	subne	r3, r3, r0
 8004d12:	50a3      	strne	r3, [r4, r2]
 8004d14:	e7af      	b.n	8004c76 <_malloc_r+0x22>
 8004d16:	6862      	ldr	r2, [r4, #4]
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	bf0c      	ite	eq
 8004d1c:	f8c8 2000 	streq.w	r2, [r8]
 8004d20:	605a      	strne	r2, [r3, #4]
 8004d22:	e7eb      	b.n	8004cfc <_malloc_r+0xa8>
 8004d24:	4623      	mov	r3, r4
 8004d26:	6864      	ldr	r4, [r4, #4]
 8004d28:	e7ae      	b.n	8004c88 <_malloc_r+0x34>
 8004d2a:	463c      	mov	r4, r7
 8004d2c:	687f      	ldr	r7, [r7, #4]
 8004d2e:	e7b6      	b.n	8004c9e <_malloc_r+0x4a>
 8004d30:	461a      	mov	r2, r3
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	d1fb      	bne.n	8004d30 <_malloc_r+0xdc>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6053      	str	r3, [r2, #4]
 8004d3c:	e7de      	b.n	8004cfc <_malloc_r+0xa8>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	4630      	mov	r0, r6
 8004d44:	f000 f80c 	bl	8004d60 <__malloc_unlock>
 8004d48:	e794      	b.n	8004c74 <_malloc_r+0x20>
 8004d4a:	6005      	str	r5, [r0, #0]
 8004d4c:	e7d6      	b.n	8004cfc <_malloc_r+0xa8>
 8004d4e:	bf00      	nop
 8004d50:	20000a38 	.word	0x20000a38

08004d54 <__malloc_lock>:
 8004d54:	4801      	ldr	r0, [pc, #4]	@ (8004d5c <__malloc_lock+0x8>)
 8004d56:	f7ff bf0f 	b.w	8004b78 <__retarget_lock_acquire_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	20000a30 	.word	0x20000a30

08004d60 <__malloc_unlock>:
 8004d60:	4801      	ldr	r0, [pc, #4]	@ (8004d68 <__malloc_unlock+0x8>)
 8004d62:	f7ff bf0a 	b.w	8004b7a <__retarget_lock_release_recursive>
 8004d66:	bf00      	nop
 8004d68:	20000a30 	.word	0x20000a30

08004d6c <__ssputs_r>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	688e      	ldr	r6, [r1, #8]
 8004d72:	461f      	mov	r7, r3
 8004d74:	42be      	cmp	r6, r7
 8004d76:	680b      	ldr	r3, [r1, #0]
 8004d78:	4682      	mov	sl, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4690      	mov	r8, r2
 8004d7e:	d82d      	bhi.n	8004ddc <__ssputs_r+0x70>
 8004d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d88:	d026      	beq.n	8004dd8 <__ssputs_r+0x6c>
 8004d8a:	6965      	ldr	r5, [r4, #20]
 8004d8c:	6909      	ldr	r1, [r1, #16]
 8004d8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d92:	eba3 0901 	sub.w	r9, r3, r1
 8004d96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d9a:	1c7b      	adds	r3, r7, #1
 8004d9c:	444b      	add	r3, r9
 8004d9e:	106d      	asrs	r5, r5, #1
 8004da0:	429d      	cmp	r5, r3
 8004da2:	bf38      	it	cc
 8004da4:	461d      	movcc	r5, r3
 8004da6:	0553      	lsls	r3, r2, #21
 8004da8:	d527      	bpl.n	8004dfa <__ssputs_r+0x8e>
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7ff ff52 	bl	8004c54 <_malloc_r>
 8004db0:	4606      	mov	r6, r0
 8004db2:	b360      	cbz	r0, 8004e0e <__ssputs_r+0xa2>
 8004db4:	6921      	ldr	r1, [r4, #16]
 8004db6:	464a      	mov	r2, r9
 8004db8:	f000 fae6 	bl	8005388 <memcpy>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	6126      	str	r6, [r4, #16]
 8004dca:	6165      	str	r5, [r4, #20]
 8004dcc:	444e      	add	r6, r9
 8004dce:	eba5 0509 	sub.w	r5, r5, r9
 8004dd2:	6026      	str	r6, [r4, #0]
 8004dd4:	60a5      	str	r5, [r4, #8]
 8004dd6:	463e      	mov	r6, r7
 8004dd8:	42be      	cmp	r6, r7
 8004dda:	d900      	bls.n	8004dde <__ssputs_r+0x72>
 8004ddc:	463e      	mov	r6, r7
 8004dde:	6820      	ldr	r0, [r4, #0]
 8004de0:	4632      	mov	r2, r6
 8004de2:	4641      	mov	r1, r8
 8004de4:	f000 faa6 	bl	8005334 <memmove>
 8004de8:	68a3      	ldr	r3, [r4, #8]
 8004dea:	1b9b      	subs	r3, r3, r6
 8004dec:	60a3      	str	r3, [r4, #8]
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	4433      	add	r3, r6
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	2000      	movs	r0, #0
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfa:	462a      	mov	r2, r5
 8004dfc:	f000 fad2 	bl	80053a4 <_realloc_r>
 8004e00:	4606      	mov	r6, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d1e0      	bne.n	8004dc8 <__ssputs_r+0x5c>
 8004e06:	6921      	ldr	r1, [r4, #16]
 8004e08:	4650      	mov	r0, sl
 8004e0a:	f7ff feb7 	bl	8004b7c <_free_r>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	f8ca 3000 	str.w	r3, [sl]
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	e7e9      	b.n	8004df6 <__ssputs_r+0x8a>
	...

08004e24 <_svfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	4698      	mov	r8, r3
 8004e2a:	898b      	ldrh	r3, [r1, #12]
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	b09d      	sub	sp, #116	@ 0x74
 8004e30:	4607      	mov	r7, r0
 8004e32:	460d      	mov	r5, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	d510      	bpl.n	8004e5a <_svfiprintf_r+0x36>
 8004e38:	690b      	ldr	r3, [r1, #16]
 8004e3a:	b973      	cbnz	r3, 8004e5a <_svfiprintf_r+0x36>
 8004e3c:	2140      	movs	r1, #64	@ 0x40
 8004e3e:	f7ff ff09 	bl	8004c54 <_malloc_r>
 8004e42:	6028      	str	r0, [r5, #0]
 8004e44:	6128      	str	r0, [r5, #16]
 8004e46:	b930      	cbnz	r0, 8004e56 <_svfiprintf_r+0x32>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	b01d      	add	sp, #116	@ 0x74
 8004e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e56:	2340      	movs	r3, #64	@ 0x40
 8004e58:	616b      	str	r3, [r5, #20]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e5e:	2320      	movs	r3, #32
 8004e60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e68:	2330      	movs	r3, #48	@ 0x30
 8004e6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005008 <_svfiprintf_r+0x1e4>
 8004e6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e72:	f04f 0901 	mov.w	r9, #1
 8004e76:	4623      	mov	r3, r4
 8004e78:	469a      	mov	sl, r3
 8004e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e7e:	b10a      	cbz	r2, 8004e84 <_svfiprintf_r+0x60>
 8004e80:	2a25      	cmp	r2, #37	@ 0x25
 8004e82:	d1f9      	bne.n	8004e78 <_svfiprintf_r+0x54>
 8004e84:	ebba 0b04 	subs.w	fp, sl, r4
 8004e88:	d00b      	beq.n	8004ea2 <_svfiprintf_r+0x7e>
 8004e8a:	465b      	mov	r3, fp
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	4638      	mov	r0, r7
 8004e92:	f7ff ff6b 	bl	8004d6c <__ssputs_r>
 8004e96:	3001      	adds	r0, #1
 8004e98:	f000 80a7 	beq.w	8004fea <_svfiprintf_r+0x1c6>
 8004e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e9e:	445a      	add	r2, fp
 8004ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 809f 	beq.w	8004fea <_svfiprintf_r+0x1c6>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb6:	f10a 0a01 	add.w	sl, sl, #1
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	9307      	str	r3, [sp, #28]
 8004ebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ec2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ec4:	4654      	mov	r4, sl
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	484e      	ldr	r0, [pc, #312]	@ (8005008 <_svfiprintf_r+0x1e4>)
 8004ece:	f7fb f9a7 	bl	8000220 <memchr>
 8004ed2:	9a04      	ldr	r2, [sp, #16]
 8004ed4:	b9d8      	cbnz	r0, 8004f0e <_svfiprintf_r+0xea>
 8004ed6:	06d0      	lsls	r0, r2, #27
 8004ed8:	bf44      	itt	mi
 8004eda:	2320      	movmi	r3, #32
 8004edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ee0:	0711      	lsls	r1, r2, #28
 8004ee2:	bf44      	itt	mi
 8004ee4:	232b      	movmi	r3, #43	@ 0x2b
 8004ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef0:	d015      	beq.n	8004f1e <_svfiprintf_r+0xfa>
 8004ef2:	9a07      	ldr	r2, [sp, #28]
 8004ef4:	4654      	mov	r4, sl
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f04f 0c0a 	mov.w	ip, #10
 8004efc:	4621      	mov	r1, r4
 8004efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f02:	3b30      	subs	r3, #48	@ 0x30
 8004f04:	2b09      	cmp	r3, #9
 8004f06:	d94b      	bls.n	8004fa0 <_svfiprintf_r+0x17c>
 8004f08:	b1b0      	cbz	r0, 8004f38 <_svfiprintf_r+0x114>
 8004f0a:	9207      	str	r2, [sp, #28]
 8004f0c:	e014      	b.n	8004f38 <_svfiprintf_r+0x114>
 8004f0e:	eba0 0308 	sub.w	r3, r0, r8
 8004f12:	fa09 f303 	lsl.w	r3, r9, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	9304      	str	r3, [sp, #16]
 8004f1a:	46a2      	mov	sl, r4
 8004f1c:	e7d2      	b.n	8004ec4 <_svfiprintf_r+0xa0>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	9103      	str	r1, [sp, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfbb      	ittet	lt
 8004f2a:	425b      	neglt	r3, r3
 8004f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f30:	9307      	strge	r3, [sp, #28]
 8004f32:	9307      	strlt	r3, [sp, #28]
 8004f34:	bfb8      	it	lt
 8004f36:	9204      	strlt	r2, [sp, #16]
 8004f38:	7823      	ldrb	r3, [r4, #0]
 8004f3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f3c:	d10a      	bne.n	8004f54 <_svfiprintf_r+0x130>
 8004f3e:	7863      	ldrb	r3, [r4, #1]
 8004f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f42:	d132      	bne.n	8004faa <_svfiprintf_r+0x186>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	9203      	str	r2, [sp, #12]
 8004f4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f50:	3402      	adds	r4, #2
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005018 <_svfiprintf_r+0x1f4>
 8004f58:	7821      	ldrb	r1, [r4, #0]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	4650      	mov	r0, sl
 8004f5e:	f7fb f95f 	bl	8000220 <memchr>
 8004f62:	b138      	cbz	r0, 8004f74 <_svfiprintf_r+0x150>
 8004f64:	9b04      	ldr	r3, [sp, #16]
 8004f66:	eba0 000a 	sub.w	r0, r0, sl
 8004f6a:	2240      	movs	r2, #64	@ 0x40
 8004f6c:	4082      	lsls	r2, r0
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	3401      	adds	r4, #1
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f78:	4824      	ldr	r0, [pc, #144]	@ (800500c <_svfiprintf_r+0x1e8>)
 8004f7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f7e:	2206      	movs	r2, #6
 8004f80:	f7fb f94e 	bl	8000220 <memchr>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d036      	beq.n	8004ff6 <_svfiprintf_r+0x1d2>
 8004f88:	4b21      	ldr	r3, [pc, #132]	@ (8005010 <_svfiprintf_r+0x1ec>)
 8004f8a:	bb1b      	cbnz	r3, 8004fd4 <_svfiprintf_r+0x1b0>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	3307      	adds	r3, #7
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	3308      	adds	r3, #8
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f9a:	4433      	add	r3, r6
 8004f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f9e:	e76a      	b.n	8004e76 <_svfiprintf_r+0x52>
 8004fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	e7a8      	b.n	8004efc <_svfiprintf_r+0xd8>
 8004faa:	2300      	movs	r3, #0
 8004fac:	3401      	adds	r4, #1
 8004fae:	9305      	str	r3, [sp, #20]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f04f 0c0a 	mov.w	ip, #10
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fbc:	3a30      	subs	r2, #48	@ 0x30
 8004fbe:	2a09      	cmp	r2, #9
 8004fc0:	d903      	bls.n	8004fca <_svfiprintf_r+0x1a6>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0c6      	beq.n	8004f54 <_svfiprintf_r+0x130>
 8004fc6:	9105      	str	r1, [sp, #20]
 8004fc8:	e7c4      	b.n	8004f54 <_svfiprintf_r+0x130>
 8004fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fce:	4604      	mov	r4, r0
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e7f0      	b.n	8004fb6 <_svfiprintf_r+0x192>
 8004fd4:	ab03      	add	r3, sp, #12
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4b0e      	ldr	r3, [pc, #56]	@ (8005014 <_svfiprintf_r+0x1f0>)
 8004fdc:	a904      	add	r1, sp, #16
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f3af 8000 	nop.w
 8004fe4:	1c42      	adds	r2, r0, #1
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	d1d6      	bne.n	8004f98 <_svfiprintf_r+0x174>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	065b      	lsls	r3, r3, #25
 8004fee:	f53f af2d 	bmi.w	8004e4c <_svfiprintf_r+0x28>
 8004ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ff4:	e72c      	b.n	8004e50 <_svfiprintf_r+0x2c>
 8004ff6:	ab03      	add	r3, sp, #12
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	462a      	mov	r2, r5
 8004ffc:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <_svfiprintf_r+0x1f0>)
 8004ffe:	a904      	add	r1, sp, #16
 8005000:	4638      	mov	r0, r7
 8005002:	f000 f879 	bl	80050f8 <_printf_i>
 8005006:	e7ed      	b.n	8004fe4 <_svfiprintf_r+0x1c0>
 8005008:	080055fc 	.word	0x080055fc
 800500c:	08005606 	.word	0x08005606
 8005010:	00000000 	.word	0x00000000
 8005014:	08004d6d 	.word	0x08004d6d
 8005018:	08005602 	.word	0x08005602

0800501c <_printf_common>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	4616      	mov	r6, r2
 8005022:	4698      	mov	r8, r3
 8005024:	688a      	ldr	r2, [r1, #8]
 8005026:	690b      	ldr	r3, [r1, #16]
 8005028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800502c:	4293      	cmp	r3, r2
 800502e:	bfb8      	it	lt
 8005030:	4613      	movlt	r3, r2
 8005032:	6033      	str	r3, [r6, #0]
 8005034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005038:	4607      	mov	r7, r0
 800503a:	460c      	mov	r4, r1
 800503c:	b10a      	cbz	r2, 8005042 <_printf_common+0x26>
 800503e:	3301      	adds	r3, #1
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	0699      	lsls	r1, r3, #26
 8005046:	bf42      	ittt	mi
 8005048:	6833      	ldrmi	r3, [r6, #0]
 800504a:	3302      	addmi	r3, #2
 800504c:	6033      	strmi	r3, [r6, #0]
 800504e:	6825      	ldr	r5, [r4, #0]
 8005050:	f015 0506 	ands.w	r5, r5, #6
 8005054:	d106      	bne.n	8005064 <_printf_common+0x48>
 8005056:	f104 0a19 	add.w	sl, r4, #25
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	6832      	ldr	r2, [r6, #0]
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	42ab      	cmp	r3, r5
 8005062:	dc26      	bgt.n	80050b2 <_printf_common+0x96>
 8005064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005068:	6822      	ldr	r2, [r4, #0]
 800506a:	3b00      	subs	r3, #0
 800506c:	bf18      	it	ne
 800506e:	2301      	movne	r3, #1
 8005070:	0692      	lsls	r2, r2, #26
 8005072:	d42b      	bmi.n	80050cc <_printf_common+0xb0>
 8005074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005078:	4641      	mov	r1, r8
 800507a:	4638      	mov	r0, r7
 800507c:	47c8      	blx	r9
 800507e:	3001      	adds	r0, #1
 8005080:	d01e      	beq.n	80050c0 <_printf_common+0xa4>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	6922      	ldr	r2, [r4, #16]
 8005086:	f003 0306 	and.w	r3, r3, #6
 800508a:	2b04      	cmp	r3, #4
 800508c:	bf02      	ittt	eq
 800508e:	68e5      	ldreq	r5, [r4, #12]
 8005090:	6833      	ldreq	r3, [r6, #0]
 8005092:	1aed      	subeq	r5, r5, r3
 8005094:	68a3      	ldr	r3, [r4, #8]
 8005096:	bf0c      	ite	eq
 8005098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800509c:	2500      	movne	r5, #0
 800509e:	4293      	cmp	r3, r2
 80050a0:	bfc4      	itt	gt
 80050a2:	1a9b      	subgt	r3, r3, r2
 80050a4:	18ed      	addgt	r5, r5, r3
 80050a6:	2600      	movs	r6, #0
 80050a8:	341a      	adds	r4, #26
 80050aa:	42b5      	cmp	r5, r6
 80050ac:	d11a      	bne.n	80050e4 <_printf_common+0xc8>
 80050ae:	2000      	movs	r0, #0
 80050b0:	e008      	b.n	80050c4 <_printf_common+0xa8>
 80050b2:	2301      	movs	r3, #1
 80050b4:	4652      	mov	r2, sl
 80050b6:	4641      	mov	r1, r8
 80050b8:	4638      	mov	r0, r7
 80050ba:	47c8      	blx	r9
 80050bc:	3001      	adds	r0, #1
 80050be:	d103      	bne.n	80050c8 <_printf_common+0xac>
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c8:	3501      	adds	r5, #1
 80050ca:	e7c6      	b.n	800505a <_printf_common+0x3e>
 80050cc:	18e1      	adds	r1, r4, r3
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	2030      	movs	r0, #48	@ 0x30
 80050d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050d6:	4422      	add	r2, r4
 80050d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050e0:	3302      	adds	r3, #2
 80050e2:	e7c7      	b.n	8005074 <_printf_common+0x58>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4622      	mov	r2, r4
 80050e8:	4641      	mov	r1, r8
 80050ea:	4638      	mov	r0, r7
 80050ec:	47c8      	blx	r9
 80050ee:	3001      	adds	r0, #1
 80050f0:	d0e6      	beq.n	80050c0 <_printf_common+0xa4>
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7d9      	b.n	80050aa <_printf_common+0x8e>
	...

080050f8 <_printf_i>:
 80050f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	7e0f      	ldrb	r7, [r1, #24]
 80050fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005100:	2f78      	cmp	r7, #120	@ 0x78
 8005102:	4691      	mov	r9, r2
 8005104:	4680      	mov	r8, r0
 8005106:	460c      	mov	r4, r1
 8005108:	469a      	mov	sl, r3
 800510a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800510e:	d807      	bhi.n	8005120 <_printf_i+0x28>
 8005110:	2f62      	cmp	r7, #98	@ 0x62
 8005112:	d80a      	bhi.n	800512a <_printf_i+0x32>
 8005114:	2f00      	cmp	r7, #0
 8005116:	f000 80d1 	beq.w	80052bc <_printf_i+0x1c4>
 800511a:	2f58      	cmp	r7, #88	@ 0x58
 800511c:	f000 80b8 	beq.w	8005290 <_printf_i+0x198>
 8005120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005128:	e03a      	b.n	80051a0 <_printf_i+0xa8>
 800512a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800512e:	2b15      	cmp	r3, #21
 8005130:	d8f6      	bhi.n	8005120 <_printf_i+0x28>
 8005132:	a101      	add	r1, pc, #4	@ (adr r1, 8005138 <_printf_i+0x40>)
 8005134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005138:	08005191 	.word	0x08005191
 800513c:	080051a5 	.word	0x080051a5
 8005140:	08005121 	.word	0x08005121
 8005144:	08005121 	.word	0x08005121
 8005148:	08005121 	.word	0x08005121
 800514c:	08005121 	.word	0x08005121
 8005150:	080051a5 	.word	0x080051a5
 8005154:	08005121 	.word	0x08005121
 8005158:	08005121 	.word	0x08005121
 800515c:	08005121 	.word	0x08005121
 8005160:	08005121 	.word	0x08005121
 8005164:	080052a3 	.word	0x080052a3
 8005168:	080051cf 	.word	0x080051cf
 800516c:	0800525d 	.word	0x0800525d
 8005170:	08005121 	.word	0x08005121
 8005174:	08005121 	.word	0x08005121
 8005178:	080052c5 	.word	0x080052c5
 800517c:	08005121 	.word	0x08005121
 8005180:	080051cf 	.word	0x080051cf
 8005184:	08005121 	.word	0x08005121
 8005188:	08005121 	.word	0x08005121
 800518c:	08005265 	.word	0x08005265
 8005190:	6833      	ldr	r3, [r6, #0]
 8005192:	1d1a      	adds	r2, r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6032      	str	r2, [r6, #0]
 8005198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800519c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051a0:	2301      	movs	r3, #1
 80051a2:	e09c      	b.n	80052de <_printf_i+0x1e6>
 80051a4:	6833      	ldr	r3, [r6, #0]
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	1d19      	adds	r1, r3, #4
 80051aa:	6031      	str	r1, [r6, #0]
 80051ac:	0606      	lsls	r6, r0, #24
 80051ae:	d501      	bpl.n	80051b4 <_printf_i+0xbc>
 80051b0:	681d      	ldr	r5, [r3, #0]
 80051b2:	e003      	b.n	80051bc <_printf_i+0xc4>
 80051b4:	0645      	lsls	r5, r0, #25
 80051b6:	d5fb      	bpl.n	80051b0 <_printf_i+0xb8>
 80051b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051bc:	2d00      	cmp	r5, #0
 80051be:	da03      	bge.n	80051c8 <_printf_i+0xd0>
 80051c0:	232d      	movs	r3, #45	@ 0x2d
 80051c2:	426d      	negs	r5, r5
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c8:	4858      	ldr	r0, [pc, #352]	@ (800532c <_printf_i+0x234>)
 80051ca:	230a      	movs	r3, #10
 80051cc:	e011      	b.n	80051f2 <_printf_i+0xfa>
 80051ce:	6821      	ldr	r1, [r4, #0]
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	0608      	lsls	r0, r1, #24
 80051d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051d8:	d402      	bmi.n	80051e0 <_printf_i+0xe8>
 80051da:	0649      	lsls	r1, r1, #25
 80051dc:	bf48      	it	mi
 80051de:	b2ad      	uxthmi	r5, r5
 80051e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80051e2:	4852      	ldr	r0, [pc, #328]	@ (800532c <_printf_i+0x234>)
 80051e4:	6033      	str	r3, [r6, #0]
 80051e6:	bf14      	ite	ne
 80051e8:	230a      	movne	r3, #10
 80051ea:	2308      	moveq	r3, #8
 80051ec:	2100      	movs	r1, #0
 80051ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051f2:	6866      	ldr	r6, [r4, #4]
 80051f4:	60a6      	str	r6, [r4, #8]
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	db05      	blt.n	8005206 <_printf_i+0x10e>
 80051fa:	6821      	ldr	r1, [r4, #0]
 80051fc:	432e      	orrs	r6, r5
 80051fe:	f021 0104 	bic.w	r1, r1, #4
 8005202:	6021      	str	r1, [r4, #0]
 8005204:	d04b      	beq.n	800529e <_printf_i+0x1a6>
 8005206:	4616      	mov	r6, r2
 8005208:	fbb5 f1f3 	udiv	r1, r5, r3
 800520c:	fb03 5711 	mls	r7, r3, r1, r5
 8005210:	5dc7      	ldrb	r7, [r0, r7]
 8005212:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005216:	462f      	mov	r7, r5
 8005218:	42bb      	cmp	r3, r7
 800521a:	460d      	mov	r5, r1
 800521c:	d9f4      	bls.n	8005208 <_printf_i+0x110>
 800521e:	2b08      	cmp	r3, #8
 8005220:	d10b      	bne.n	800523a <_printf_i+0x142>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	07df      	lsls	r7, r3, #31
 8005226:	d508      	bpl.n	800523a <_printf_i+0x142>
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	6861      	ldr	r1, [r4, #4]
 800522c:	4299      	cmp	r1, r3
 800522e:	bfde      	ittt	le
 8005230:	2330      	movle	r3, #48	@ 0x30
 8005232:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005236:	f106 36ff 	addle.w	r6, r6, #4294967295
 800523a:	1b92      	subs	r2, r2, r6
 800523c:	6122      	str	r2, [r4, #16]
 800523e:	f8cd a000 	str.w	sl, [sp]
 8005242:	464b      	mov	r3, r9
 8005244:	aa03      	add	r2, sp, #12
 8005246:	4621      	mov	r1, r4
 8005248:	4640      	mov	r0, r8
 800524a:	f7ff fee7 	bl	800501c <_printf_common>
 800524e:	3001      	adds	r0, #1
 8005250:	d14a      	bne.n	80052e8 <_printf_i+0x1f0>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295
 8005256:	b004      	add	sp, #16
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	f043 0320 	orr.w	r3, r3, #32
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	4832      	ldr	r0, [pc, #200]	@ (8005330 <_printf_i+0x238>)
 8005266:	2778      	movs	r7, #120	@ 0x78
 8005268:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	6831      	ldr	r1, [r6, #0]
 8005270:	061f      	lsls	r7, r3, #24
 8005272:	f851 5b04 	ldr.w	r5, [r1], #4
 8005276:	d402      	bmi.n	800527e <_printf_i+0x186>
 8005278:	065f      	lsls	r7, r3, #25
 800527a:	bf48      	it	mi
 800527c:	b2ad      	uxthmi	r5, r5
 800527e:	6031      	str	r1, [r6, #0]
 8005280:	07d9      	lsls	r1, r3, #31
 8005282:	bf44      	itt	mi
 8005284:	f043 0320 	orrmi.w	r3, r3, #32
 8005288:	6023      	strmi	r3, [r4, #0]
 800528a:	b11d      	cbz	r5, 8005294 <_printf_i+0x19c>
 800528c:	2310      	movs	r3, #16
 800528e:	e7ad      	b.n	80051ec <_printf_i+0xf4>
 8005290:	4826      	ldr	r0, [pc, #152]	@ (800532c <_printf_i+0x234>)
 8005292:	e7e9      	b.n	8005268 <_printf_i+0x170>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	f023 0320 	bic.w	r3, r3, #32
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	e7f6      	b.n	800528c <_printf_i+0x194>
 800529e:	4616      	mov	r6, r2
 80052a0:	e7bd      	b.n	800521e <_printf_i+0x126>
 80052a2:	6833      	ldr	r3, [r6, #0]
 80052a4:	6825      	ldr	r5, [r4, #0]
 80052a6:	6961      	ldr	r1, [r4, #20]
 80052a8:	1d18      	adds	r0, r3, #4
 80052aa:	6030      	str	r0, [r6, #0]
 80052ac:	062e      	lsls	r6, r5, #24
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	d501      	bpl.n	80052b6 <_printf_i+0x1be>
 80052b2:	6019      	str	r1, [r3, #0]
 80052b4:	e002      	b.n	80052bc <_printf_i+0x1c4>
 80052b6:	0668      	lsls	r0, r5, #25
 80052b8:	d5fb      	bpl.n	80052b2 <_printf_i+0x1ba>
 80052ba:	8019      	strh	r1, [r3, #0]
 80052bc:	2300      	movs	r3, #0
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	4616      	mov	r6, r2
 80052c2:	e7bc      	b.n	800523e <_printf_i+0x146>
 80052c4:	6833      	ldr	r3, [r6, #0]
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	6032      	str	r2, [r6, #0]
 80052ca:	681e      	ldr	r6, [r3, #0]
 80052cc:	6862      	ldr	r2, [r4, #4]
 80052ce:	2100      	movs	r1, #0
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7fa ffa5 	bl	8000220 <memchr>
 80052d6:	b108      	cbz	r0, 80052dc <_printf_i+0x1e4>
 80052d8:	1b80      	subs	r0, r0, r6
 80052da:	6060      	str	r0, [r4, #4]
 80052dc:	6863      	ldr	r3, [r4, #4]
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	2300      	movs	r3, #0
 80052e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052e6:	e7aa      	b.n	800523e <_printf_i+0x146>
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	4632      	mov	r2, r6
 80052ec:	4649      	mov	r1, r9
 80052ee:	4640      	mov	r0, r8
 80052f0:	47d0      	blx	sl
 80052f2:	3001      	adds	r0, #1
 80052f4:	d0ad      	beq.n	8005252 <_printf_i+0x15a>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	079b      	lsls	r3, r3, #30
 80052fa:	d413      	bmi.n	8005324 <_printf_i+0x22c>
 80052fc:	68e0      	ldr	r0, [r4, #12]
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	4298      	cmp	r0, r3
 8005302:	bfb8      	it	lt
 8005304:	4618      	movlt	r0, r3
 8005306:	e7a6      	b.n	8005256 <_printf_i+0x15e>
 8005308:	2301      	movs	r3, #1
 800530a:	4632      	mov	r2, r6
 800530c:	4649      	mov	r1, r9
 800530e:	4640      	mov	r0, r8
 8005310:	47d0      	blx	sl
 8005312:	3001      	adds	r0, #1
 8005314:	d09d      	beq.n	8005252 <_printf_i+0x15a>
 8005316:	3501      	adds	r5, #1
 8005318:	68e3      	ldr	r3, [r4, #12]
 800531a:	9903      	ldr	r1, [sp, #12]
 800531c:	1a5b      	subs	r3, r3, r1
 800531e:	42ab      	cmp	r3, r5
 8005320:	dcf2      	bgt.n	8005308 <_printf_i+0x210>
 8005322:	e7eb      	b.n	80052fc <_printf_i+0x204>
 8005324:	2500      	movs	r5, #0
 8005326:	f104 0619 	add.w	r6, r4, #25
 800532a:	e7f5      	b.n	8005318 <_printf_i+0x220>
 800532c:	0800560d 	.word	0x0800560d
 8005330:	0800561e 	.word	0x0800561e

08005334 <memmove>:
 8005334:	4288      	cmp	r0, r1
 8005336:	b510      	push	{r4, lr}
 8005338:	eb01 0402 	add.w	r4, r1, r2
 800533c:	d902      	bls.n	8005344 <memmove+0x10>
 800533e:	4284      	cmp	r4, r0
 8005340:	4623      	mov	r3, r4
 8005342:	d807      	bhi.n	8005354 <memmove+0x20>
 8005344:	1e43      	subs	r3, r0, #1
 8005346:	42a1      	cmp	r1, r4
 8005348:	d008      	beq.n	800535c <memmove+0x28>
 800534a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800534e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005352:	e7f8      	b.n	8005346 <memmove+0x12>
 8005354:	4402      	add	r2, r0
 8005356:	4601      	mov	r1, r0
 8005358:	428a      	cmp	r2, r1
 800535a:	d100      	bne.n	800535e <memmove+0x2a>
 800535c:	bd10      	pop	{r4, pc}
 800535e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005366:	e7f7      	b.n	8005358 <memmove+0x24>

08005368 <_sbrk_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d06      	ldr	r5, [pc, #24]	@ (8005384 <_sbrk_r+0x1c>)
 800536c:	2300      	movs	r3, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fc f850 	bl	8001418 <_sbrk>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_sbrk_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_sbrk_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	20000a2c 	.word	0x20000a2c

08005388 <memcpy>:
 8005388:	440a      	add	r2, r1
 800538a:	4291      	cmp	r1, r2
 800538c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005390:	d100      	bne.n	8005394 <memcpy+0xc>
 8005392:	4770      	bx	lr
 8005394:	b510      	push	{r4, lr}
 8005396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800539e:	4291      	cmp	r1, r2
 80053a0:	d1f9      	bne.n	8005396 <memcpy+0xe>
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <_realloc_r>:
 80053a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	4607      	mov	r7, r0
 80053aa:	4614      	mov	r4, r2
 80053ac:	460d      	mov	r5, r1
 80053ae:	b921      	cbnz	r1, 80053ba <_realloc_r+0x16>
 80053b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053b4:	4611      	mov	r1, r2
 80053b6:	f7ff bc4d 	b.w	8004c54 <_malloc_r>
 80053ba:	b92a      	cbnz	r2, 80053c8 <_realloc_r+0x24>
 80053bc:	f7ff fbde 	bl	8004b7c <_free_r>
 80053c0:	4625      	mov	r5, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c8:	f000 f81a 	bl	8005400 <_malloc_usable_size_r>
 80053cc:	4284      	cmp	r4, r0
 80053ce:	4606      	mov	r6, r0
 80053d0:	d802      	bhi.n	80053d8 <_realloc_r+0x34>
 80053d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053d6:	d8f4      	bhi.n	80053c2 <_realloc_r+0x1e>
 80053d8:	4621      	mov	r1, r4
 80053da:	4638      	mov	r0, r7
 80053dc:	f7ff fc3a 	bl	8004c54 <_malloc_r>
 80053e0:	4680      	mov	r8, r0
 80053e2:	b908      	cbnz	r0, 80053e8 <_realloc_r+0x44>
 80053e4:	4645      	mov	r5, r8
 80053e6:	e7ec      	b.n	80053c2 <_realloc_r+0x1e>
 80053e8:	42b4      	cmp	r4, r6
 80053ea:	4622      	mov	r2, r4
 80053ec:	4629      	mov	r1, r5
 80053ee:	bf28      	it	cs
 80053f0:	4632      	movcs	r2, r6
 80053f2:	f7ff ffc9 	bl	8005388 <memcpy>
 80053f6:	4629      	mov	r1, r5
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7ff fbbf 	bl	8004b7c <_free_r>
 80053fe:	e7f1      	b.n	80053e4 <_realloc_r+0x40>

08005400 <_malloc_usable_size_r>:
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f18      	subs	r0, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfbc      	itt	lt
 800540a:	580b      	ldrlt	r3, [r1, r0]
 800540c:	18c0      	addlt	r0, r0, r3
 800540e:	4770      	bx	lr

08005410 <_init>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr

0800541c <_fini>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr
